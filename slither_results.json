{"success": true, "error": null, "results": {"printers": [{"elements": [], "description": "{\n    \"payable\": {\n        \"IERC721\": [\n            \"safeTransferFrom(address,address,uint256,bytes)\",\n            \"safeTransferFrom(address,address,uint256)\",\n            \"transferFrom(address,address,uint256)\",\n            \"approve(address,uint256)\"\n        ],\n        \"IERC721Metadata\": [\n            \"safeTransferFrom(address,address,uint256,bytes)\",\n            \"safeTransferFrom(address,address,uint256)\",\n            \"transferFrom(address,address,uint256)\",\n            \"approve(address,uint256)\"\n        ],\n        \"IERC721Enumerable\": [\n            \"safeTransferFrom(address,address,uint256,bytes)\",\n            \"safeTransferFrom(address,address,uint256)\",\n            \"transferFrom(address,address,uint256)\",\n            \"approve(address,uint256)\"\n        ],\n        \"IMulticall3\": [\n            \"aggregate((address,bytes)[])\",\n            \"aggregate3((address,bool,bytes)[])\",\n            \"aggregate3Value((address,bool,uint256,bytes)[])\",\n            \"blockAndAggregate((address,bytes)[])\",\n            \"tryAggregate(bool,(address,bytes)[])\",\n            \"tryBlockAndAggregate(bool,(address,bytes)[])\"\n        ],\n        \"MockERC721\": [\n            \"approve(address,uint256)\",\n            \"transferFrom(address,address,uint256)\",\n            \"safeTransferFrom(address,address,uint256)\",\n            \"safeTransferFrom(address,address,uint256,bytes)\"\n        ],\n        \"CryticTester\": [\n            \"constructor()\"\n        ]\n    },\n    \"timestamp\": {\n        \"MockERC20\": [\n            \"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\"\n        ],\n        \"ERC20\": [\n            \"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\"\n        ],\n        \"RewardsManager\": [\n            \"constructor()\",\n            \"currentEpoch()\",\n            \"notifyTransfer(address,address,uint256)\",\n            \"accrueVault(uint256,address)\",\n            \"getVaultTimeLeftToAccrue(uint256,address)\",\n            \"getTotalSupplyAtEpoch(uint256,address)\",\n            \"accrueUser(uint256,address,address)\",\n            \"getUserTimeLeftToAccrue(uint256,address,address)\",\n            \"getBalanceAtEpoch(uint256,address,address)\",\n            \"claimRewards(uint256[],address[],address[],address[])\",\n            \"claimRewardReferenceEmitting(uint256,address,address,address)\",\n            \"claimRewardEmitting(uint256,address,address,address)\",\n            \"claimReward(uint256,address,address,address)\",\n            \"claimBulkTokensOverMultipleEpochs(uint256,uint256,address,address[],address)\",\n            \"addBulkRewardsLinearly(uint256,uint256,address,address,uint256)\",\n            \"addBulkRewards(uint256,uint256,address,address,uint256[])\",\n            \"addReward(uint256,address,address,uint256)\",\n            \"getUserNextEpochInfo(uint256,address,address,uint256)\",\n            \"getVaultNextEpochInfo(uint256,address,uint256)\",\n            \"reap((uint256,uint256,address,address[]))\",\n            \"tear((uint256,uint256,address,address[]))\",\n            \"getClaimableBulkRewards((uint256,uint256,address,address[]),address)\"\n        ],\n        \"CryticToFoundry\": [\n            \"test_canary_totalSupply_atEpoch_lckx()\"\n        ]\n    },\n    \"block_number\": {\n        \"CryticToFoundry\": [\n            \"test_canary_totalSupply_atEpoch_lckx()\"\n        ]\n    },\n    \"msg_sender\": {\n        \"MockERC20\": [\n            \"approve(address,uint256)\",\n            \"transfer(address,uint256)\",\n            \"transferFrom(address,address,uint256)\"\n        ],\n        \"MockERC721\": [\n            \"approve(address,uint256)\",\n            \"setApprovalForAll(address,bool)\",\n            \"transferFrom(address,address,uint256)\",\n            \"safeTransferFrom(address,address,uint256)\",\n            \"safeTransferFrom(address,address,uint256,bytes)\"\n        ],\n        \"ERC20\": [\n            \"approve(address,uint256)\",\n            \"transfer(address,uint256)\",\n            \"transferFrom(address,address,uint256)\"\n        ],\n        \"RewardsManager\": [\n            \"notifyTransfer(address,address,uint256)\",\n            \"addBulkRewardsLinearly(uint256,uint256,address,address,uint256)\",\n            \"addBulkRewards(uint256,uint256,address,address,uint256[])\",\n            \"addReward(uint256,address,address,uint256)\",\n            \"reap((uint256,uint256,address,address[]))\",\n            \"tear((uint256,uint256,address,address[]))\"\n        ]\n    },\n    \"msg_gas\": {},\n    \"assert\": {\n        \"CryticTester\": {\n            \"canary_totalSupply_atEpoch()\": [\n                {\n                    \"start\": 1060,\n                    \"length\": 13,\n                    \"filename_relative\": \"lib/chimera/src/CryticAsserts.sol\",\n                    \"filename_absolute\": \"/Users/cerberus/Desktop/Consulting/rewards-manager-2/lib/chimera/src/CryticAsserts.sol\",\n                    \"filename_short\": \"lib/chimera/src/CryticAsserts.sol\",\n                    \"is_dependency\": true,\n                    \"lines\": [\n                        40\n                    ],\n                    \"starting_column\": 13,\n                    \"ending_column\": 26\n                }\n            ],\n            \"solvency_totalSupply_atEpoch()\": [\n                {\n                    \"start\": 499,\n                    \"length\": 13,\n                    \"filename_relative\": \"lib/chimera/src/CryticAsserts.sol\",\n                    \"filename_absolute\": \"/Users/cerberus/Desktop/Consulting/rewards-manager-2/lib/chimera/src/CryticAsserts.sol\",\n                    \"filename_short\": \"lib/chimera/src/CryticAsserts.sol\",\n                    \"is_dependency\": true,\n                    \"lines\": [\n                        19\n                    ],\n                    \"starting_column\": 13,\n                    \"ending_column\": 26\n                }\n            ]\n        }\n    },\n    \"constant_functions\": {\n        \"FoundryAsserts\": [\n            \"excludeArtifacts()\",\n            \"excludeContracts()\",\n            \"excludeSenders()\",\n            \"targetArtifacts()\",\n            \"targetArtifactSelectors()\",\n            \"targetContracts()\",\n            \"targetSelectors()\",\n            \"targetSenders()\",\n            \"targetInterfaces()\",\n            \"failed()\",\n            \"IS_TEST()\"\n        ],\n        \"Script\": [\n            \"IS_SCRIPT()\"\n        ],\n        \"StdAssertions\": [\n            \"failed()\"\n        ],\n        \"stdError\": [\n            \"assertionError()\",\n            \"arithmeticError()\",\n            \"divisionError()\",\n            \"enumConversionError()\",\n            \"encodeStorageError()\",\n            \"popError()\",\n            \"indexOOBError()\",\n            \"memOverflowError()\",\n            \"zeroVarError()\"\n        ],\n        \"StdInvariant\": [\n            \"excludeArtifacts()\",\n            \"excludeContracts()\",\n            \"excludeSenders()\",\n            \"targetArtifacts()\",\n            \"targetArtifactSelectors()\",\n            \"targetContracts()\",\n            \"targetSelectors()\",\n            \"targetSenders()\",\n            \"targetInterfaces()\"\n        ],\n        \"Test\": [\n            \"excludeArtifacts()\",\n            \"excludeContracts()\",\n            \"excludeSenders()\",\n            \"targetArtifacts()\",\n            \"targetArtifactSelectors()\",\n            \"targetContracts()\",\n            \"targetSelectors()\",\n            \"targetSenders()\",\n            \"targetInterfaces()\",\n            \"failed()\",\n            \"IS_TEST()\"\n        ],\n        \"VmSafe\": [\n            \"envAddress(string)\",\n            \"envAddress(string,string)\",\n            \"envBool(string)\",\n            \"envBool(string,string)\",\n            \"envBytes32(string)\",\n            \"envBytes32(string,string)\",\n            \"envBytes(string)\",\n            \"envBytes(string,string)\",\n            \"envInt(string)\",\n            \"envInt(string,string)\",\n            \"envOr(string,bool)\",\n            \"envOr(string,uint256)\",\n            \"envOr(string,string,address[])\",\n            \"envOr(string,string,bytes32[])\",\n            \"envOr(string,string,string[])\",\n            \"envOr(string,string,bytes[])\",\n            \"envOr(string,int256)\",\n            \"envOr(string,address)\",\n            \"envOr(string,bytes32)\",\n            \"envOr(string,string)\",\n            \"envOr(string,bytes)\",\n            \"envOr(string,string,bool[])\",\n            \"envOr(string,string,uint256[])\",\n            \"envOr(string,string,int256[])\",\n            \"envString(string)\",\n            \"envString(string,string)\",\n            \"envUint(string)\",\n            \"envUint(string,string)\",\n            \"addr(uint256)\",\n            \"getBlockNumber()\",\n            \"getBlockTimestamp()\",\n            \"getNonce(address)\",\n            \"load(address,bytes32)\",\n            \"signP256(uint256,bytes32)\",\n            \"sign(uint256,bytes32)\",\n            \"fsMetadata(string)\",\n            \"getCode(string)\",\n            \"getDeployedCode(string)\",\n            \"projectRoot()\",\n            \"readDir(string)\",\n            \"readDir(string,uint64)\",\n            \"readDir(string,uint64,bool)\",\n            \"readFile(string)\",\n            \"readFileBinary(string)\",\n            \"readLine(string)\",\n            \"readLink(string)\",\n            \"keyExists(string,string)\",\n            \"keyExistsJson(string,string)\",\n            \"parseJsonAddress(string,string)\",\n            \"parseJsonAddressArray(string,string)\",\n            \"parseJsonBool(string,string)\",\n            \"parseJsonBoolArray(string,string)\",\n            \"parseJsonBytes(string,string)\",\n            \"parseJsonBytes32(string,string)\",\n            \"parseJsonBytes32Array(string,string)\",\n            \"parseJsonBytesArray(string,string)\",\n            \"parseJsonInt(string,string)\",\n            \"parseJsonIntArray(string,string)\",\n            \"parseJsonKeys(string,string)\",\n            \"parseJsonString(string,string)\",\n            \"parseJsonStringArray(string,string)\",\n            \"parseJsonUint(string,string)\",\n            \"parseJsonUintArray(string,string)\",\n            \"parseJson(string)\",\n            \"parseJson(string,string)\",\n            \"parseAddress(string)\",\n            \"parseBool(string)\",\n            \"parseBytes(string)\",\n            \"parseBytes32(string)\",\n            \"parseInt(string)\",\n            \"parseUint(string)\",\n            \"replace(string,string,string)\",\n            \"split(string,string)\",\n            \"toLowercase(string)\",\n            \"toString(address)\",\n            \"toString(bytes)\",\n            \"toString(bytes32)\",\n            \"toString(bool)\",\n            \"toString(uint256)\",\n            \"toString(int256)\",\n            \"toUppercase(string)\",\n            \"trim(string)\",\n            \"assertApproxEqAbsDecimal(uint256,uint256,uint256,uint256)\",\n            \"assertApproxEqAbsDecimal(uint256,uint256,uint256,uint256,string)\",\n            \"assertApproxEqAbsDecimal(int256,int256,uint256,uint256)\",\n            \"assertApproxEqAbsDecimal(int256,int256,uint256,uint256,string)\",\n            \"assertApproxEqAbs(uint256,uint256,uint256)\",\n            \"assertApproxEqAbs(uint256,uint256,uint256,string)\",\n            \"assertApproxEqAbs(int256,int256,uint256)\",\n            \"assertApproxEqAbs(int256,int256,uint256,string)\",\n            \"assertApproxEqRelDecimal(uint256,uint256,uint256,uint256)\",\n            \"assertApproxEqRelDecimal(uint256,uint256,uint256,uint256,string)\",\n            \"assertApproxEqRelDecimal(int256,int256,uint256,uint256)\",\n            \"assertApproxEqRelDecimal(int256,int256,uint256,uint256,string)\",\n            \"assertApproxEqRel(uint256,uint256,uint256)\",\n            \"assertApproxEqRel(uint256,uint256,uint256,string)\",\n            \"assertApproxEqRel(int256,int256,uint256)\",\n            \"assertApproxEqRel(int256,int256,uint256,string)\",\n            \"assertEqDecimal(uint256,uint256,uint256)\",\n            \"assertEqDecimal(uint256,uint256,uint256,string)\",\n            \"assertEqDecimal(int256,int256,uint256)\",\n            \"assertEqDecimal(int256,int256,uint256,string)\",\n            \"assertEq(bool,bool)\",\n            \"assertEq(bool,bool,string)\",\n            \"assertEq(string,string)\",\n            \"assertEq(string,string,string)\",\n            \"assertEq(bytes,bytes)\",\n            \"assertEq(bytes,bytes,string)\",\n            \"assertEq(bool[],bool[])\",\n            \"assertEq(bool[],bool[],string)\",\n            \"assertEq(uint256[],uint256[])\",\n            \"assertEq(uint256[],uint256[],string)\",\n            \"assertEq(int256[],int256[])\",\n            \"assertEq(int256[],int256[],string)\",\n            \"assertEq(uint256,uint256)\",\n            \"assertEq(address[],address[])\",\n            \"assertEq(address[],address[],string)\",\n            \"assertEq(bytes32[],bytes32[])\",\n            \"assertEq(bytes32[],bytes32[],string)\",\n            \"assertEq(string[],string[])\",\n            \"assertEq(string[],string[],string)\",\n            \"assertEq(bytes[],bytes[])\",\n            \"assertEq(bytes[],bytes[],string)\",\n            \"assertEq(uint256,uint256,string)\",\n            \"assertEq(int256,int256)\",\n            \"assertEq(int256,int256,string)\",\n            \"assertEq(address,address)\",\n            \"assertEq(address,address,string)\",\n            \"assertEq(bytes32,bytes32)\",\n            \"assertEq(bytes32,bytes32,string)\",\n            \"assertFalse(bool)\",\n            \"assertFalse(bool,string)\",\n            \"assertGeDecimal(uint256,uint256,uint256)\",\n            \"assertGeDecimal(uint256,uint256,uint256,string)\",\n            \"assertGeDecimal(int256,int256,uint256)\",\n            \"assertGeDecimal(int256,int256,uint256,string)\",\n            \"assertGe(uint256,uint256)\",\n            \"assertGe(uint256,uint256,string)\",\n            \"assertGe(int256,int256)\",\n            \"assertGe(int256,int256,string)\",\n            \"assertGtDecimal(uint256,uint256,uint256)\",\n            \"assertGtDecimal(uint256,uint256,uint256,string)\",\n            \"assertGtDecimal(int256,int256,uint256)\",\n            \"assertGtDecimal(int256,int256,uint256,string)\",\n            \"assertGt(uint256,uint256)\",\n            \"assertGt(uint256,uint256,string)\",\n            \"assertGt(int256,int256)\",\n            \"assertGt(int256,int256,string)\",\n            \"assertLeDecimal(uint256,uint256,uint256)\",\n            \"assertLeDecimal(uint256,uint256,uint256,string)\",\n            \"assertLeDecimal(int256,int256,uint256)\",\n            \"assertLeDecimal(int256,int256,uint256,string)\",\n            \"assertLe(uint256,uint256)\",\n            \"assertLe(uint256,uint256,string)\",\n            \"assertLe(int256,int256)\",\n            \"assertLe(int256,int256,string)\",\n            \"assertLtDecimal(uint256,uint256,uint256)\",\n            \"assertLtDecimal(uint256,uint256,uint256,string)\",\n            \"assertLtDecimal(int256,int256,uint256)\",\n            \"assertLtDecimal(int256,int256,uint256,string)\",\n            \"assertLt(uint256,uint256)\",\n            \"assertLt(uint256,uint256,string)\",\n            \"assertLt(int256,int256)\",\n            \"assertLt(int256,int256,string)\",\n            \"assertNotEqDecimal(uint256,uint256,uint256)\",\n            \"assertNotEqDecimal(uint256,uint256,uint256,string)\",\n            \"assertNotEqDecimal(int256,int256,uint256)\",\n            \"assertNotEqDecimal(int256,int256,uint256,string)\",\n            \"assertNotEq(bool,bool)\",\n            \"assertNotEq(bool,bool,string)\",\n            \"assertNotEq(string,string)\",\n            \"assertNotEq(string,string,string)\",\n            \"assertNotEq(bytes,bytes)\",\n            \"assertNotEq(bytes,bytes,string)\",\n            \"assertNotEq(bool[],bool[])\",\n            \"assertNotEq(bool[],bool[],string)\",\n            \"assertNotEq(uint256[],uint256[])\",\n            \"assertNotEq(uint256[],uint256[],string)\",\n            \"assertNotEq(int256[],int256[])\",\n            \"assertNotEq(int256[],int256[],string)\",\n            \"assertNotEq(uint256,uint256)\",\n            \"assertNotEq(address[],address[])\",\n            \"assertNotEq(address[],address[],string)\",\n            \"assertNotEq(bytes32[],bytes32[])\",\n            \"assertNotEq(bytes32[],bytes32[],string)\",\n            \"assertNotEq(string[],string[])\",\n            \"assertNotEq(string[],string[],string)\",\n            \"assertNotEq(bytes[],bytes[])\",\n            \"assertNotEq(bytes[],bytes[],string)\",\n            \"assertNotEq(uint256,uint256,string)\",\n            \"assertNotEq(int256,int256)\",\n            \"assertNotEq(int256,int256,string)\",\n            \"assertNotEq(address,address)\",\n            \"assertNotEq(address,address,string)\",\n            \"assertNotEq(bytes32,bytes32)\",\n            \"assertNotEq(bytes32,bytes32,string)\",\n            \"assertTrue(bool)\",\n            \"assertTrue(bool,string)\",\n            \"assume(bool)\",\n            \"rpcUrl(string)\",\n            \"rpcUrlStructs()\",\n            \"rpcUrls()\",\n            \"keyExistsToml(string,string)\",\n            \"parseTomlAddress(string,string)\",\n            \"parseTomlAddressArray(string,string)\",\n            \"parseTomlBool(string,string)\",\n            \"parseTomlBoolArray(string,string)\",\n            \"parseTomlBytes(string,string)\",\n            \"parseTomlBytes32(string,string)\",\n            \"parseTomlBytes32Array(string,string)\",\n            \"parseTomlBytesArray(string,string)\",\n            \"parseTomlInt(string,string)\",\n            \"parseTomlIntArray(string,string)\",\n            \"parseTomlKeys(string,string)\",\n            \"parseTomlString(string,string)\",\n            \"parseTomlStringArray(string,string)\",\n            \"parseTomlUint(string,string)\",\n            \"parseTomlUintArray(string,string)\",\n            \"parseToml(string)\",\n            \"parseToml(string,string)\",\n            \"computeCreate2Address(bytes32,bytes32,address)\",\n            \"computeCreate2Address(bytes32,bytes32)\",\n            \"computeCreateAddress(address,uint256)\",\n            \"deriveKey(string,uint32)\",\n            \"deriveKey(string,string,uint32)\",\n            \"deriveKey(string,uint32,string)\",\n            \"deriveKey(string,string,uint32,string)\",\n            \"getLabel(address)\",\n            \"toBase64URL(bytes)\",\n            \"toBase64URL(string)\",\n            \"toBase64(bytes)\",\n            \"toBase64(string)\"\n        ],\n        \"Vm\": [\n            \"envAddress(string)\",\n            \"envAddress(string,string)\",\n            \"envBool(string)\",\n            \"envBool(string,string)\",\n            \"envBytes32(string)\",\n            \"envBytes32(string,string)\",\n            \"envBytes(string)\",\n            \"envBytes(string,string)\",\n            \"envInt(string)\",\n            \"envInt(string,string)\",\n            \"envOr(string,bool)\",\n            \"envOr(string,uint256)\",\n            \"envOr(string,string,address[])\",\n            \"envOr(string,string,bytes32[])\",\n            \"envOr(string,string,string[])\",\n            \"envOr(string,string,bytes[])\",\n            \"envOr(string,int256)\",\n            \"envOr(string,address)\",\n            \"envOr(string,bytes32)\",\n            \"envOr(string,string)\",\n            \"envOr(string,bytes)\",\n            \"envOr(string,string,bool[])\",\n            \"envOr(string,string,uint256[])\",\n            \"envOr(string,string,int256[])\",\n            \"envString(string)\",\n            \"envString(string,string)\",\n            \"envUint(string)\",\n            \"envUint(string,string)\",\n            \"addr(uint256)\",\n            \"getBlockNumber()\",\n            \"getBlockTimestamp()\",\n            \"getNonce(address)\",\n            \"load(address,bytes32)\",\n            \"signP256(uint256,bytes32)\",\n            \"sign(uint256,bytes32)\",\n            \"fsMetadata(string)\",\n            \"getCode(string)\",\n            \"getDeployedCode(string)\",\n            \"projectRoot()\",\n            \"readDir(string)\",\n            \"readDir(string,uint64)\",\n            \"readDir(string,uint64,bool)\",\n            \"readFile(string)\",\n            \"readFileBinary(string)\",\n            \"readLine(string)\",\n            \"readLink(string)\",\n            \"keyExists(string,string)\",\n            \"keyExistsJson(string,string)\",\n            \"parseJsonAddress(string,string)\",\n            \"parseJsonAddressArray(string,string)\",\n            \"parseJsonBool(string,string)\",\n            \"parseJsonBoolArray(string,string)\",\n            \"parseJsonBytes(string,string)\",\n            \"parseJsonBytes32(string,string)\",\n            \"parseJsonBytes32Array(string,string)\",\n            \"parseJsonBytesArray(string,string)\",\n            \"parseJsonInt(string,string)\",\n            \"parseJsonIntArray(string,string)\",\n            \"parseJsonKeys(string,string)\",\n            \"parseJsonString(string,string)\",\n            \"parseJsonStringArray(string,string)\",\n            \"parseJsonUint(string,string)\",\n            \"parseJsonUintArray(string,string)\",\n            \"parseJson(string)\",\n            \"parseJson(string,string)\",\n            \"parseAddress(string)\",\n            \"parseBool(string)\",\n            \"parseBytes(string)\",\n            \"parseBytes32(string)\",\n            \"parseInt(string)\",\n            \"parseUint(string)\",\n            \"replace(string,string,string)\",\n            \"split(string,string)\",\n            \"toLowercase(string)\",\n            \"toString(address)\",\n            \"toString(bytes)\",\n            \"toString(bytes32)\",\n            \"toString(bool)\",\n            \"toString(uint256)\",\n            \"toString(int256)\",\n            \"toUppercase(string)\",\n            \"trim(string)\",\n            \"assertApproxEqAbsDecimal(uint256,uint256,uint256,uint256)\",\n            \"assertApproxEqAbsDecimal(uint256,uint256,uint256,uint256,string)\",\n            \"assertApproxEqAbsDecimal(int256,int256,uint256,uint256)\",\n            \"assertApproxEqAbsDecimal(int256,int256,uint256,uint256,string)\",\n            \"assertApproxEqAbs(uint256,uint256,uint256)\",\n            \"assertApproxEqAbs(uint256,uint256,uint256,string)\",\n            \"assertApproxEqAbs(int256,int256,uint256)\",\n            \"assertApproxEqAbs(int256,int256,uint256,string)\",\n            \"assertApproxEqRelDecimal(uint256,uint256,uint256,uint256)\",\n            \"assertApproxEqRelDecimal(uint256,uint256,uint256,uint256,string)\",\n            \"assertApproxEqRelDecimal(int256,int256,uint256,uint256)\",\n            \"assertApproxEqRelDecimal(int256,int256,uint256,uint256,string)\",\n            \"assertApproxEqRel(uint256,uint256,uint256)\",\n            \"assertApproxEqRel(uint256,uint256,uint256,string)\",\n            \"assertApproxEqRel(int256,int256,uint256)\",\n            \"assertApproxEqRel(int256,int256,uint256,string)\",\n            \"assertEqDecimal(uint256,uint256,uint256)\",\n            \"assertEqDecimal(uint256,uint256,uint256,string)\",\n            \"assertEqDecimal(int256,int256,uint256)\",\n            \"assertEqDecimal(int256,int256,uint256,string)\",\n            \"assertEq(bool,bool)\",\n            \"assertEq(bool,bool,string)\",\n            \"assertEq(string,string)\",\n            \"assertEq(string,string,string)\",\n            \"assertEq(bytes,bytes)\",\n            \"assertEq(bytes,bytes,string)\",\n            \"assertEq(bool[],bool[])\",\n            \"assertEq(bool[],bool[],string)\",\n            \"assertEq(uint256[],uint256[])\",\n            \"assertEq(uint256[],uint256[],string)\",\n            \"assertEq(int256[],int256[])\",\n            \"assertEq(int256[],int256[],string)\",\n            \"assertEq(uint256,uint256)\",\n            \"assertEq(address[],address[])\",\n            \"assertEq(address[],address[],string)\",\n            \"assertEq(bytes32[],bytes32[])\",\n            \"assertEq(bytes32[],bytes32[],string)\",\n            \"assertEq(string[],string[])\",\n            \"assertEq(string[],string[],string)\",\n            \"assertEq(bytes[],bytes[])\",\n            \"assertEq(bytes[],bytes[],string)\",\n            \"assertEq(uint256,uint256,string)\",\n            \"assertEq(int256,int256)\",\n            \"assertEq(int256,int256,string)\",\n            \"assertEq(address,address)\",\n            \"assertEq(address,address,string)\",\n            \"assertEq(bytes32,bytes32)\",\n            \"assertEq(bytes32,bytes32,string)\",\n            \"assertFalse(bool)\",\n            \"assertFalse(bool,string)\",\n            \"assertGeDecimal(uint256,uint256,uint256)\",\n            \"assertGeDecimal(uint256,uint256,uint256,string)\",\n            \"assertGeDecimal(int256,int256,uint256)\",\n            \"assertGeDecimal(int256,int256,uint256,string)\",\n            \"assertGe(uint256,uint256)\",\n            \"assertGe(uint256,uint256,string)\",\n            \"assertGe(int256,int256)\",\n            \"assertGe(int256,int256,string)\",\n            \"assertGtDecimal(uint256,uint256,uint256)\",\n            \"assertGtDecimal(uint256,uint256,uint256,string)\",\n            \"assertGtDecimal(int256,int256,uint256)\",\n            \"assertGtDecimal(int256,int256,uint256,string)\",\n            \"assertGt(uint256,uint256)\",\n            \"assertGt(uint256,uint256,string)\",\n            \"assertGt(int256,int256)\",\n            \"assertGt(int256,int256,string)\",\n            \"assertLeDecimal(uint256,uint256,uint256)\",\n            \"assertLeDecimal(uint256,uint256,uint256,string)\",\n            \"assertLeDecimal(int256,int256,uint256)\",\n            \"assertLeDecimal(int256,int256,uint256,string)\",\n            \"assertLe(uint256,uint256)\",\n            \"assertLe(uint256,uint256,string)\",\n            \"assertLe(int256,int256)\",\n            \"assertLe(int256,int256,string)\",\n            \"assertLtDecimal(uint256,uint256,uint256)\",\n            \"assertLtDecimal(uint256,uint256,uint256,string)\",\n            \"assertLtDecimal(int256,int256,uint256)\",\n            \"assertLtDecimal(int256,int256,uint256,string)\",\n            \"assertLt(uint256,uint256)\",\n            \"assertLt(uint256,uint256,string)\",\n            \"assertLt(int256,int256)\",\n            \"assertLt(int256,int256,string)\",\n            \"assertNotEqDecimal(uint256,uint256,uint256)\",\n            \"assertNotEqDecimal(uint256,uint256,uint256,string)\",\n            \"assertNotEqDecimal(int256,int256,uint256)\",\n            \"assertNotEqDecimal(int256,int256,uint256,string)\",\n            \"assertNotEq(bool,bool)\",\n            \"assertNotEq(bool,bool,string)\",\n            \"assertNotEq(string,string)\",\n            \"assertNotEq(string,string,string)\",\n            \"assertNotEq(bytes,bytes)\",\n            \"assertNotEq(bytes,bytes,string)\",\n            \"assertNotEq(bool[],bool[])\",\n            \"assertNotEq(bool[],bool[],string)\",\n            \"assertNotEq(uint256[],uint256[])\",\n            \"assertNotEq(uint256[],uint256[],string)\",\n            \"assertNotEq(int256[],int256[])\",\n            \"assertNotEq(int256[],int256[],string)\",\n            \"assertNotEq(uint256,uint256)\",\n            \"assertNotEq(address[],address[])\",\n            \"assertNotEq(address[],address[],string)\",\n            \"assertNotEq(bytes32[],bytes32[])\",\n            \"assertNotEq(bytes32[],bytes32[],string)\",\n            \"assertNotEq(string[],string[])\",\n            \"assertNotEq(string[],string[],string)\",\n            \"assertNotEq(bytes[],bytes[])\",\n            \"assertNotEq(bytes[],bytes[],string)\",\n            \"assertNotEq(uint256,uint256,string)\",\n            \"assertNotEq(int256,int256)\",\n            \"assertNotEq(int256,int256,string)\",\n            \"assertNotEq(address,address)\",\n            \"assertNotEq(address,address,string)\",\n            \"assertNotEq(bytes32,bytes32)\",\n            \"assertNotEq(bytes32,bytes32,string)\",\n            \"assertTrue(bool)\",\n            \"assertTrue(bool,string)\",\n            \"assume(bool)\",\n            \"rpcUrl(string)\",\n            \"rpcUrlStructs()\",\n            \"rpcUrls()\",\n            \"keyExistsToml(string,string)\",\n            \"parseTomlAddress(string,string)\",\n            \"parseTomlAddressArray(string,string)\",\n            \"parseTomlBool(string,string)\",\n            \"parseTomlBoolArray(string,string)\",\n            \"parseTomlBytes(string,string)\",\n            \"parseTomlBytes32(string,string)\",\n            \"parseTomlBytes32Array(string,string)\",\n            \"parseTomlBytesArray(string,string)\",\n            \"parseTomlInt(string,string)\",\n            \"parseTomlIntArray(string,string)\",\n            \"parseTomlKeys(string,string)\",\n            \"parseTomlString(string,string)\",\n            \"parseTomlStringArray(string,string)\",\n            \"parseTomlUint(string,string)\",\n            \"parseTomlUintArray(string,string)\",\n            \"parseToml(string)\",\n            \"parseToml(string,string)\",\n            \"computeCreate2Address(bytes32,bytes32,address)\",\n            \"computeCreate2Address(bytes32,bytes32)\",\n            \"computeCreateAddress(address,uint256)\",\n            \"deriveKey(string,uint32)\",\n            \"deriveKey(string,string,uint32)\",\n            \"deriveKey(string,uint32,string)\",\n            \"deriveKey(string,string,uint32,string)\",\n            \"getLabel(address)\",\n            \"toBase64URL(bytes)\",\n            \"toBase64URL(string)\",\n            \"toBase64(bytes)\",\n            \"toBase64(string)\",\n            \"activeFork()\",\n            \"isPersistent(address)\"\n        ],\n        \"IERC165\": [\n            \"supportsInterface(bytes4)\"\n        ],\n        \"IERC20\": [\n            \"totalSupply()\",\n            \"balanceOf(address)\",\n            \"allowance(address,address)\"\n        ],\n        \"IERC721\": [\n            \"supportsInterface(bytes4)\",\n            \"balanceOf(address)\",\n            \"ownerOf(uint256)\",\n            \"getApproved(uint256)\",\n            \"isApprovedForAll(address,address)\"\n        ],\n        \"IERC721Metadata\": [\n            \"balanceOf(address)\",\n            \"ownerOf(uint256)\",\n            \"getApproved(uint256)\",\n            \"isApprovedForAll(address,address)\",\n            \"supportsInterface(bytes4)\",\n            \"name()\",\n            \"symbol()\",\n            \"tokenURI(uint256)\"\n        ],\n        \"IERC721Enumerable\": [\n            \"balanceOf(address)\",\n            \"ownerOf(uint256)\",\n            \"getApproved(uint256)\",\n            \"isApprovedForAll(address,address)\",\n            \"supportsInterface(bytes4)\",\n            \"totalSupply()\",\n            \"tokenByIndex(uint256)\",\n            \"tokenOfOwnerByIndex(address,uint256)\"\n        ],\n        \"IMulticall3\": [\n            \"getBasefee()\",\n            \"getBlockHash(uint256)\",\n            \"getBlockNumber()\",\n            \"getChainId()\",\n            \"getCurrentBlockCoinbase()\",\n            \"getCurrentBlockDifficulty()\",\n            \"getCurrentBlockGasLimit()\",\n            \"getCurrentBlockTimestamp()\",\n            \"getEthBalance(address)\",\n            \"getLastBlockHash()\"\n        ],\n        \"MockERC20\": [\n            \"DOMAIN_SEPARATOR()\",\n            \"name()\",\n            \"symbol()\",\n            \"decimals()\",\n            \"totalSupply()\",\n            \"balanceOf(address)\",\n            \"allowance(address,address)\",\n            \"nonces(address)\"\n        ],\n        \"MockERC721\": [\n            \"name()\",\n            \"symbol()\",\n            \"tokenURI(uint256)\",\n            \"ownerOf(uint256)\",\n            \"balanceOf(address)\",\n            \"getApproved(uint256)\",\n            \"isApprovedForAll(address,address)\",\n            \"supportsInterface(bytes4)\"\n        ],\n        \"IERC1363\": [\n            \"supportsInterface(bytes4)\",\n            \"totalSupply()\",\n            \"balanceOf(address)\",\n            \"allowance(address,address)\"\n        ],\n        \"ERC20\": [\n            \"DOMAIN_SEPARATOR()\",\n            \"name()\",\n            \"symbol()\",\n            \"decimals()\",\n            \"totalSupply()\",\n            \"balanceOf(address)\",\n            \"allowance(address,address)\",\n            \"nonces(address)\"\n        ],\n        \"CounterScript\": [\n            \"setUp()\",\n            \"IS_SCRIPT()\"\n        ],\n        \"RewardsManager\": [\n            \"currentEpoch()\",\n            \"getEpochData(uint256)\",\n            \"getVaultTimeLeftToAccrue(uint256,address)\",\n            \"getTotalSupplyAtEpoch(uint256,address)\",\n            \"getUserTimeLeftToAccrue(uint256,address,address)\",\n            \"getBalanceAtEpoch(uint256,address,address)\",\n            \"getUserNextEpochInfo(uint256,address,address,uint256)\",\n            \"getVaultNextEpochInfo(uint256,address,uint256)\",\n            \"getClaimableBulkRewards((uint256,uint256,address,address[]),address)\",\n            \"DEPLOY_TIME()\",\n            \"SECONDS_PER_EPOCH()\",\n            \"rewards(uint256,address,address)\",\n            \"rewardsInfo(uint256,address,address)\",\n            \"lastAccruedTimestamp(uint256,address)\",\n            \"lastUserAccrueTimestamp(uint256,address,address)\",\n            \"shares(uint256,address,address)\",\n            \"totalSupply(uint256,address)\",\n            \"points(uint256,address,address)\",\n            \"pointsWithdrawn(uint256,address,address,address)\",\n            \"totalPoints(uint256,address)\"\n        ],\n        \"CryticToFoundry\": [\n            \"excludeArtifacts()\",\n            \"excludeContracts()\",\n            \"excludeSenders()\",\n            \"targetArtifacts()\",\n            \"targetArtifactSelectors()\",\n            \"targetContracts()\",\n            \"targetSelectors()\",\n            \"targetSenders()\",\n            \"targetInterfaces()\",\n            \"failed()\",\n            \"canary_totalSupply_atEpoch()\",\n            \"IS_TEST()\"\n        ],\n        \"Properties\": [\n            \"canary_totalSupply_atEpoch()\"\n        ],\n        \"TargetFunctions\": [\n            \"canary_totalSupply_atEpoch()\"\n        ],\n        \"AdminTargets\": [\n            \"canary_totalSupply_atEpoch()\"\n        ],\n        \"DoomsdayTargets\": [\n            \"canary_totalSupply_atEpoch()\"\n        ],\n        \"ManagersTargets\": [\n            \"canary_totalSupply_atEpoch()\"\n        ],\n        \"RewardsManagerTargets\": [\n            \"canary_totalSupply_atEpoch()\"\n        ]\n    },\n    \"constants_used\": {\n        \"FoundryAsserts\": {\n            \"failed()\": [\n                [\n                    {\n                        \"value\": \"61678357398080765210293718086378416697372618187842506566286863523773954249005\",\n                        \"type\": \"Vm\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"bytes32\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"61678357398080765210293718086378416697372618187842506566286863523773954249005\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"failed\",\n                        \"type\": \"bytes32\"\n                    }\n                ]\n            ]\n        },\n        \"StdAssertions\": {\n            \"failed()\": [\n                [\n                    {\n                        \"value\": \"61678357398080765210293718086378416697372618187842506566286863523773954249005\",\n                        \"type\": \"Vm\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"bytes32\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"61678357398080765210293718086378416697372618187842506566286863523773954249005\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"failed\",\n                        \"type\": \"bytes32\"\n                    }\n                ]\n            ]\n        },\n        \"Test\": {\n            \"failed()\": [\n                [\n                    {\n                        \"value\": \"61678357398080765210293718086378416697372618187842506566286863523773954249005\",\n                        \"type\": \"Vm\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"bytes32\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"61678357398080765210293718086378416697372618187842506566286863523773954249005\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"failed\",\n                        \"type\": \"bytes32\"\n                    }\n                ]\n            ]\n        },\n        \"MockERC20\": {\n            \"initialize(string,string,uint8)\": [\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"ALREADY_INITIALIZED\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\",\n                        \"type\": \"string\"\n                    }\n                ]\n            ],\n            \"approve(address,uint256)\": [\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ]\n            ],\n            \"transfer(address,uint256)\": [\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ]\n            ],\n            \"transferFrom(address,address,uint256)\": [\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"115792089237316195423570985008687907853269984665640564039457584007913129639935\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\": [\n                [\n                    {\n                        \"value\": \"\\u0019\\u0001\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"PERMIT_DEADLINE_EXPIRED\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"INVALID_SIGNER\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"string\"\n                    }\n                ]\n            ],\n            \"DOMAIN_SEPARATOR()\": [\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\",\n                        \"type\": \"string\"\n                    }\n                ]\n            ],\n            \"constructor(string,string,uint8)\": [\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\",\n                        \"type\": \"string\"\n                    }\n                ]\n            ],\n            \"mint(address,uint256)\": [\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ]\n            ],\n            \"burn(address,uint256)\": [\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ]\n            ]\n        },\n        \"MockERC721\": {\n            \"ownerOf(uint256)\": [\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"NOT_MINTED\",\n                        \"type\": \"string\"\n                    }\n                ]\n            ],\n            \"balanceOf(address)\": [\n                [\n                    {\n                        \"value\": \"ZERO_ADDRESS\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ]\n            ],\n            \"initialize(string,string)\": [\n                [\n                    {\n                        \"value\": \"ALREADY_INITIALIZED\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ]\n            ],\n            \"approve(address,uint256)\": [\n                [\n                    {\n                        \"value\": \"NOT_AUTHORIZED\",\n                        \"type\": \"string\"\n                    }\n                ]\n            ],\n            \"transferFrom(address,address,uint256)\": [\n                [\n                    {\n                        \"value\": \"WRONG_FROM\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"INVALID_RECIPIENT\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"NOT_AUTHORIZED\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"safeTransferFrom(address,address,uint256)\": [\n                [\n                    {\n                        \"value\": \"WRONG_FROM\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"INVALID_RECIPIENT\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"NOT_AUTHORIZED\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"353073666\",\n                        \"type\": \"bytes4\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"UNSAFE_RECIPIENT\",\n                        \"type\": \"string\"\n                    }\n                ]\n            ],\n            \"safeTransferFrom(address,address,uint256,bytes)\": [\n                [\n                    {\n                        \"value\": \"WRONG_FROM\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"UNSAFE_RECIPIENT\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"INVALID_RECIPIENT\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"NOT_AUTHORIZED\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"353073666\",\n                        \"type\": \"bytes4\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"supportsInterface(bytes4)\": [\n                [\n                    {\n                        \"value\": \"2158778573\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"33540519\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1532892063\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ]\n        },\n        \"ERC20\": {\n            \"approve(address,uint256)\": [\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ]\n            ],\n            \"transfer(address,uint256)\": [\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ]\n            ],\n            \"transferFrom(address,address,uint256)\": [\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"115792089237316195423570985008687907853269984665640564039457584007913129639935\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\": [\n                [\n                    {\n                        \"value\": \"\\u0019\\u0001\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"PERMIT_DEADLINE_EXPIRED\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"INVALID_SIGNER\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"string\"\n                    }\n                ]\n            ],\n            \"DOMAIN_SEPARATOR()\": [\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\",\n                        \"type\": \"string\"\n                    }\n                ]\n            ]\n        },\n        \"CounterScript\": {\n            \"run()\": [\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"61678357398080765210293718086378416697372618187842506566286863523773954249005\",\n                        \"type\": \"Vm\"\n                    }\n                ]\n            ]\n        },\n        \"RewardsManager\": {\n            \"currentEpoch()\": [\n                [\n                    {\n                        \"value\": \"604800\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"getEpochData(uint256)\": [\n                [\n                    {\n                        \"value\": \"604800\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"notifyTransfer(address,address,uint256)\": [\n                [\n                    {\n                        \"value\": \"604800\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"only ended epochs\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Cannot see the future\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Cannot transfer to yourself\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"accrueVault(uint256,address)\": [\n                [\n                    {\n                        \"value\": \"604800\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Cannot see the future\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"getVaultTimeLeftToAccrue(uint256,address)\": [\n                [\n                    {\n                        \"value\": \"604800\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Cannot see the future\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"getTotalSupplyAtEpoch(uint256,address)\": [\n                [\n                    {\n                        \"value\": \"604800\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Cannot see the future\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"accrueUser(uint256,address,address)\": [\n                [\n                    {\n                        \"value\": \"604800\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"only ended epochs\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"getUserTimeLeftToAccrue(uint256,address,address)\": [\n                [\n                    {\n                        \"value\": \"604800\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Cannot see the future\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"getBalanceAtEpoch(uint256,address,address)\": [\n                [\n                    {\n                        \"value\": \"604800\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Cannot see the future\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"claimRewards(uint256[],address[],address[],address[])\": [\n                [\n                    {\n                        \"value\": \"already claimed\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"604800\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"length mismatch\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"32\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"only ended epochs\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"64\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"claimRewardReferenceEmitting(uint256,address,address,address)\": [\n                [\n                    {\n                        \"value\": \"604800\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"32\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"only ended epochs\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Cannot see the future\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"64\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"claimRewardEmitting(uint256,address,address,address)\": [\n                [\n                    {\n                        \"value\": \"already claimed\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"604800\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"32\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"only ended epochs\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"64\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"claimReward(uint256,address,address,address)\": [\n                [\n                    {\n                        \"value\": \"already claimed\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"604800\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"32\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"only ended epochs\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"64\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"claimBulkTokensOverMultipleEpochs(uint256,uint256,address,address[],address)\": [\n                [\n                    {\n                        \"value\": \"already claimed\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"604800\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"wrong math\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"32\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"dup\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"only ended epochs\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Cannot see the future\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"64\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"addBulkRewardsLinearly(uint256,uint256,address,address,uint256)\": [\n                [\n                    {\n                        \"value\": \"604800\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"32\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"64\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"must divide evenly\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"youtu.be/F3L376eH09Q\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"no feeOnTransfer\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Cannot add to past\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Must add at least one epoch\",\n                        \"type\": \"string\"\n                    }\n                ]\n            ],\n            \"addBulkRewards(uint256,uint256,address,address,uint256[])\": [\n                [\n                    {\n                        \"value\": \"length mismatch\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"604800\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Must add one epoch\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"32\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"64\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"youtu.be/F3L376eH09Q\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"no feeOnTransfer\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Cannot add to past\",\n                        \"type\": \"string\"\n                    }\n                ]\n            ],\n            \"addReward(uint256,address,address,uint256)\": [\n                [\n                    {\n                        \"value\": \"604800\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"32\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"64\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"youtu.be/F3L376eH09Q\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Cannot add to past\",\n                        \"type\": \"string\"\n                    }\n                ]\n            ],\n            \"getUserNextEpochInfo(uint256,address,address,uint256)\": [\n                [\n                    {\n                        \"value\": \"604800\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"only ended epochs\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"getVaultNextEpochInfo(uint256,address,uint256)\": [\n                [\n                    {\n                        \"value\": \"604800\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"only ended epochs\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"reap((uint256,uint256,address,address[]))\": [\n                [\n                    {\n                        \"value\": \"already claimed\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"604800\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"wrong math\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"32\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"dup\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"only ended epochs\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"64\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"tear((uint256,uint256,address,address[]))\": [\n                [\n                    {\n                        \"value\": \"already claimed\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"604800\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"wrong math\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"32\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"dup\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"only ended epochs\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"64\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"getClaimableBulkRewards((uint256,uint256,address,address[]),address)\": [\n                [\n                    {\n                        \"value\": \"already claimed\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"604800\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"wrong math\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"dup\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"only ended epochs\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ]\n        },\n        \"CryticTester\": {\n            \"rewardsManager_accrueUser_clamped(uint256)\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ]\n            ],\n            \"rewardsManager_accrueVault_clamped(uint256)\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ]\n            ],\n            \"rewardsManager_addReward_clamped(uint256,uint256)\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ]\n            ],\n            \"rewardsManager_claimReward_clamped(uint256)\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ]\n            ],\n            \"rewardsManager_accrueUser(uint256,address,address)\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ]\n            ],\n            \"rewardsManager_accrueVault(uint256,address)\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ]\n            ],\n            \"rewardsManager_addBulkRewards(uint256,uint256,address,address,uint256[])\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ]\n            ],\n            \"rewardsManager_addBulkRewardsLinearly(uint256,uint256,address,address,uint256)\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ]\n            ],\n            \"rewardsManager_addReward(uint256,address,address,uint256)\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ]\n            ],\n            \"rewardsManager_claimBulkTokensOverMultipleEpochs(uint256,uint256,address,address[],address)\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ]\n            ],\n            \"rewardsManager_claimReward(uint256,address,address,address)\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ]\n            ],\n            \"rewardsManager_claimRewardEmitting(uint256,address,address,address)\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ]\n            ],\n            \"rewardsManager_claimRewardReferenceEmitting(uint256,address,address,address)\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ]\n            ],\n            \"rewardsManager_claimRewards(uint256[],address[],address[],address[])\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ]\n            ],\n            \"rewardsManager_notifyTransfer(address,address,uint256)\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ]\n            ],\n            \"rewardsManager_reap((uint256,uint256,address,address[]))\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ]\n            ],\n            \"rewardsManager_tear((uint256,uint256,address,address[]))\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ]\n            ],\n            \"canary_totalSupply_atEpoch()\": [\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Total supply is less than 0\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"solvency_totalSupply_atEpoch()\": [\n                [\n                    {\n                        \"value\": \"Total supply is less than total balances\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ]\n            ],\n            \"add_new_asset(uint8)\": [\n                [\n                    {\n                        \"value\": \"TST\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Test Token\",\n                        \"type\": \"string\"\n                    }\n                ]\n            ],\n            \"asset_approve(address,uint128)\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ]\n            ],\n            \"asset_mint(address,uint128)\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ]\n            ],\n            \"claim_rewards_never_reverts()\": [\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"stateless\",\n                        \"type\": \"string\"\n                    }\n                ]\n            ],\n            \"constructor()\": [\n                [\n                    {\n                        \"value\": \"TST\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2827\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"18\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"266691\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"6\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"10\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Test Token\",\n                        \"type\": \"string\"\n                    }\n                ]\n            ]\n        },\n        \"CryticToFoundry\": {\n            \"failed()\": [\n                [\n                    {\n                        \"value\": \"61678357398080765210293718086378416697372618187842506566286863523773954249005\",\n                        \"type\": \"Vm\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"bytes32\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"61678357398080765210293718086378416697372618187842506566286863523773954249005\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"failed\",\n                        \"type\": \"bytes32\"\n                    }\n                ]\n            ],\n            \"rewardsManager_accrueUser_clamped(uint256)\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ]\n            ],\n            \"rewardsManager_accrueVault_clamped(uint256)\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ]\n            ],\n            \"rewardsManager_addReward_clamped(uint256,uint256)\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ]\n            ],\n            \"rewardsManager_claimReward_clamped(uint256)\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ]\n            ],\n            \"rewardsManager_accrueUser(uint256,address,address)\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ]\n            ],\n            \"rewardsManager_accrueVault(uint256,address)\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ]\n            ],\n            \"rewardsManager_addBulkRewards(uint256,uint256,address,address,uint256[])\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ]\n            ],\n            \"rewardsManager_addBulkRewardsLinearly(uint256,uint256,address,address,uint256)\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ]\n            ],\n            \"rewardsManager_addReward(uint256,address,address,uint256)\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ]\n            ],\n            \"rewardsManager_claimBulkTokensOverMultipleEpochs(uint256,uint256,address,address[],address)\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ]\n            ],\n            \"rewardsManager_claimReward(uint256,address,address,address)\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ]\n            ],\n            \"rewardsManager_claimRewardEmitting(uint256,address,address,address)\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ]\n            ],\n            \"rewardsManager_claimRewardReferenceEmitting(uint256,address,address,address)\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ]\n            ],\n            \"rewardsManager_claimRewards(uint256[],address[],address[],address[])\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ]\n            ],\n            \"rewardsManager_notifyTransfer(address,address,uint256)\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ]\n            ],\n            \"rewardsManager_reap((uint256,uint256,address,address[]))\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ]\n            ],\n            \"rewardsManager_tear((uint256,uint256,address,address[]))\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ]\n            ],\n            \"canary_totalSupply_atEpoch()\": [\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"61678357398080765210293718086378416697372618187842506566286863523773954249005\",\n                        \"type\": \"Vm\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Total supply is less than 0\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"solvency_totalSupply_atEpoch()\": [\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"61678357398080765210293718086378416697372618187842506566286863523773954249005\",\n                        \"type\": \"Vm\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Total supply is less than total balances\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"add_new_asset(uint8)\": [\n                [\n                    {\n                        \"value\": \"TST\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Test Token\",\n                        \"type\": \"string\"\n                    }\n                ]\n            ],\n            \"asset_approve(address,uint128)\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ]\n            ],\n            \"asset_mint(address,uint128)\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ]\n            ],\n            \"claim_rewards_never_reverts()\": [\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"stateless\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ]\n            ],\n            \"setUp()\": [\n                [\n                    {\n                        \"value\": \"TST\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"18\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2827\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"266691\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"6\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"10\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Test Token\",\n                        \"type\": \"string\"\n                    }\n                ]\n            ],\n            \"test_crytic()\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Total supply is less than 0\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"61678357398080765210293718086378416697372618187842506566286863523773954249005\",\n                        \"type\": \"Vm\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"test_canary_totalSupply_atEpoch_lckx()\": [\n                [\n                    {\n                        \"value\": \"31\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"19948\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"5014\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"359\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"65536\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"434894\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"728815563385977040452943777879061427756277306518\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"115792089237316195423570985008687907853269984665640564039457584007913129035135\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"600847\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4294967295\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Total supply is less than total balances\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"50417\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"136393\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"23403\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"61678357398080765210293718086378416697372618187842506566286863523773954249005\",\n                        \"type\": \"Vm\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"12884901885\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"5952\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"58783\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"8589934590\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"115792089237316195423570985008687907853269984665640564039457584007913096099417\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"23722\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"stateless\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4369999\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"600848\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"17\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"722\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"249040\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"115792089237316195423570985008687907853269984665640564039457584007913129639929\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"447588\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ]\n        },\n        \"Properties\": {\n            \"canary_totalSupply_atEpoch()\": [\n                [\n                    {\n                        \"value\": \"Total supply is less than 0\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"solvency_totalSupply_atEpoch()\": [\n                [\n                    {\n                        \"value\": \"Total supply is less than total balances\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ]\n        },\n        \"TargetFunctions\": {\n            \"rewardsManager_accrueUser_clamped(uint256)\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ]\n            ],\n            \"rewardsManager_accrueVault_clamped(uint256)\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ]\n            ],\n            \"rewardsManager_addReward_clamped(uint256,uint256)\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ]\n            ],\n            \"rewardsManager_claimReward_clamped(uint256)\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ]\n            ],\n            \"rewardsManager_accrueUser(uint256,address,address)\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ]\n            ],\n            \"rewardsManager_accrueVault(uint256,address)\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ]\n            ],\n            \"rewardsManager_addBulkRewards(uint256,uint256,address,address,uint256[])\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ]\n            ],\n            \"rewardsManager_addBulkRewardsLinearly(uint256,uint256,address,address,uint256)\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ]\n            ],\n            \"rewardsManager_addReward(uint256,address,address,uint256)\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ]\n            ],\n            \"rewardsManager_claimBulkTokensOverMultipleEpochs(uint256,uint256,address,address[],address)\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ]\n            ],\n            \"rewardsManager_claimReward(uint256,address,address,address)\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ]\n            ],\n            \"rewardsManager_claimRewardEmitting(uint256,address,address,address)\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ]\n            ],\n            \"rewardsManager_claimRewardReferenceEmitting(uint256,address,address,address)\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ]\n            ],\n            \"rewardsManager_claimRewards(uint256[],address[],address[],address[])\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ]\n            ],\n            \"rewardsManager_notifyTransfer(address,address,uint256)\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ]\n            ],\n            \"rewardsManager_reap((uint256,uint256,address,address[]))\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ]\n            ],\n            \"rewardsManager_tear((uint256,uint256,address,address[]))\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ]\n            ],\n            \"canary_totalSupply_atEpoch()\": [\n                [\n                    {\n                        \"value\": \"Total supply is less than 0\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"solvency_totalSupply_atEpoch()\": [\n                [\n                    {\n                        \"value\": \"Total supply is less than total balances\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"add_new_asset(uint8)\": [\n                [\n                    {\n                        \"value\": \"TST\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Test Token\",\n                        \"type\": \"string\"\n                    }\n                ]\n            ],\n            \"asset_approve(address,uint128)\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ]\n            ],\n            \"asset_mint(address,uint128)\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ]\n            ],\n            \"claim_rewards_never_reverts()\": [\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"stateless\",\n                        \"type\": \"string\"\n                    }\n                ]\n            ]\n        },\n        \"AdminTargets\": {\n            \"canary_totalSupply_atEpoch()\": [\n                [\n                    {\n                        \"value\": \"Total supply is less than 0\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"solvency_totalSupply_atEpoch()\": [\n                [\n                    {\n                        \"value\": \"Total supply is less than total balances\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ]\n        },\n        \"DoomsdayTargets\": {\n            \"canary_totalSupply_atEpoch()\": [\n                [\n                    {\n                        \"value\": \"Total supply is less than 0\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"solvency_totalSupply_atEpoch()\": [\n                [\n                    {\n                        \"value\": \"Total supply is less than total balances\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"claim_rewards_never_reverts()\": [\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"stateless\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ]\n            ]\n        },\n        \"ManagersTargets\": {\n            \"canary_totalSupply_atEpoch()\": [\n                [\n                    {\n                        \"value\": \"Total supply is less than 0\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"solvency_totalSupply_atEpoch()\": [\n                [\n                    {\n                        \"value\": \"Total supply is less than total balances\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"add_new_asset(uint8)\": [\n                [\n                    {\n                        \"value\": \"TST\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Test Token\",\n                        \"type\": \"string\"\n                    }\n                ]\n            ],\n            \"asset_approve(address,uint128)\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ]\n            ],\n            \"asset_mint(address,uint128)\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ]\n            ]\n        },\n        \"RewardsManagerTargets\": {\n            \"canary_totalSupply_atEpoch()\": [\n                [\n                    {\n                        \"value\": \"Total supply is less than 0\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"solvency_totalSupply_atEpoch()\": [\n                [\n                    {\n                        \"value\": \"Total supply is less than total balances\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"rewardsManager_accrueUser_clamped(uint256)\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ]\n            ],\n            \"rewardsManager_accrueVault_clamped(uint256)\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ]\n            ],\n            \"rewardsManager_addReward_clamped(uint256,uint256)\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ]\n            ],\n            \"rewardsManager_claimReward_clamped(uint256)\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ]\n            ],\n            \"rewardsManager_accrueUser(uint256,address,address)\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ]\n            ],\n            \"rewardsManager_accrueVault(uint256,address)\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ]\n            ],\n            \"rewardsManager_addBulkRewards(uint256,uint256,address,address,uint256[])\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ]\n            ],\n            \"rewardsManager_addBulkRewardsLinearly(uint256,uint256,address,address,uint256)\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ]\n            ],\n            \"rewardsManager_addReward(uint256,address,address,uint256)\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ]\n            ],\n            \"rewardsManager_claimBulkTokensOverMultipleEpochs(uint256,uint256,address,address[],address)\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ]\n            ],\n            \"rewardsManager_claimReward(uint256,address,address,address)\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ]\n            ],\n            \"rewardsManager_claimRewardEmitting(uint256,address,address,address)\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ]\n            ],\n            \"rewardsManager_claimRewardReferenceEmitting(uint256,address,address,address)\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ]\n            ],\n            \"rewardsManager_claimRewards(uint256[],address[],address[],address[])\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ]\n            ],\n            \"rewardsManager_notifyTransfer(address,address,uint256)\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ]\n            ],\n            \"rewardsManager_reap((uint256,uint256,address,address[]))\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ]\n            ],\n            \"rewardsManager_tear((uint256,uint256,address,address[]))\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ]\n            ]\n        }\n    },\n    \"constants_used_in_binary\": {\n        \"MockERC20\": {\n            \"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\": {\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            }\n        },\n        \"MockERC721\": {\n            \"transferFrom(address,address,uint256)\": {\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.SUBTRACTION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"safeTransferFrom(address,address,uint256)\": {\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.GREATER\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.SUBTRACTION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"safeTransferFrom(address,address,uint256,bytes)\": {\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.GREATER\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.SUBTRACTION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"supportsInterface(bytes4)\": {\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"2158778573\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"33540519\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"1532892063\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            }\n        },\n        \"ERC20\": {\n            \"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\": {\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            }\n        },\n        \"RewardsManager\": {\n            \"currentEpoch()\": {\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"getEpochData(uint256)\": {\n                \"BinaryType.SUBTRACTION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"notifyTransfer(address,address,uint256)\": {\n                \"BinaryType.SUBTRACTION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.NOT_EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.GREATER\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"accrueVault(uint256,address)\": {\n                \"BinaryType.SUBTRACTION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.NOT_EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.GREATER\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"getVaultTimeLeftToAccrue(uint256,address)\": {\n                \"BinaryType.SUBTRACTION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"getTotalSupplyAtEpoch(uint256,address)\": {\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.GREATER\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.SUBTRACTION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.NOT_EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"accrueUser(uint256,address,address)\": {\n                \"BinaryType.NOT_EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.SUBTRACTION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.GREATER\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"getUserTimeLeftToAccrue(uint256,address,address)\": {\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.SUBTRACTION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"getBalanceAtEpoch(uint256,address,address)\": {\n                \"BinaryType.SUBTRACTION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.NOT_EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.GREATER\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"claimRewards(uint256[],address[],address[],address[])\": {\n                \"BinaryType.SUBTRACTION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.NOT_EQUAL\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"32\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.GREATER\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"claimRewardReferenceEmitting(uint256,address,address,address)\": {\n                \"BinaryType.SUBTRACTION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.NOT_EQUAL\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"32\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.GREATER\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"claimRewardEmitting(uint256,address,address,address)\": {\n                \"BinaryType.SUBTRACTION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.NOT_EQUAL\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"32\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.GREATER\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"claimReward(uint256,address,address,address)\": {\n                \"BinaryType.SUBTRACTION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.NOT_EQUAL\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"32\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.GREATER\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"claimBulkTokensOverMultipleEpochs(uint256,uint256,address,address[],address)\": {\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.SUBTRACTION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.NOT_EQUAL\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"32\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.GREATER\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"addBulkRewardsLinearly(uint256,uint256,address,address,uint256)\": {\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"32\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.NOT_EQUAL\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"addBulkRewards(uint256,uint256,address,address,uint256[])\": {\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"32\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.NOT_EQUAL\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"addReward(uint256,address,address,uint256)\": {\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"32\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.NOT_EQUAL\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"getUserNextEpochInfo(uint256,address,address,uint256)\": {\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.SUBTRACTION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"getVaultNextEpochInfo(uint256,address,uint256)\": {\n                \"BinaryType.SUBTRACTION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"reap((uint256,uint256,address,address[]))\": {\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"32\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.NOT_EQUAL\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.SUBTRACTION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.GREATER\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"tear((uint256,uint256,address,address[]))\": {\n                \"BinaryType.NOT_EQUAL\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.SUBTRACTION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.GREATER\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"32\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"getClaimableBulkRewards((uint256,uint256,address,address[]),address)\": {\n                \"BinaryType.SUBTRACTION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.NOT_EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.GREATER\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            }\n        },\n        \"CryticTester\": {\n            \"solvency_totalSupply_atEpoch()\": {\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"add_new_asset(uint8)\": {\n                \"BinaryType.NOT_EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"claim_rewards_never_reverts()\": {\n                \"BinaryType.SUBTRACTION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"constructor()\": {\n                \"BinaryType.NOT_EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            }\n        },\n        \"CryticToFoundry\": {\n            \"solvency_totalSupply_atEpoch()\": {\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"add_new_asset(uint8)\": {\n                \"BinaryType.NOT_EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"claim_rewards_never_reverts()\": {\n                \"BinaryType.SUBTRACTION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"setUp()\": {\n                \"BinaryType.NOT_EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"test_crytic()\": {\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"test_canary_totalSupply_atEpoch_lckx()\": {\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"136393\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"31\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"23403\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"19948\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"600847\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"600848\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"5952\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"17\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"5014\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"249040\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"434894\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"58783\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"23722\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"447588\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"50417\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.SUBTRACTION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            }\n        },\n        \"Properties\": {\n            \"solvency_totalSupply_atEpoch()\": {\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            }\n        },\n        \"TargetFunctions\": {\n            \"solvency_totalSupply_atEpoch()\": {\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"add_new_asset(uint8)\": {\n                \"BinaryType.NOT_EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"claim_rewards_never_reverts()\": {\n                \"BinaryType.SUBTRACTION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            }\n        },\n        \"AdminTargets\": {\n            \"solvency_totalSupply_atEpoch()\": {\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            }\n        },\n        \"DoomsdayTargets\": {\n            \"solvency_totalSupply_atEpoch()\": {\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"claim_rewards_never_reverts()\": {\n                \"BinaryType.SUBTRACTION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            }\n        },\n        \"ManagersTargets\": {\n            \"solvency_totalSupply_atEpoch()\": {\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"add_new_asset(uint8)\": {\n                \"BinaryType.NOT_EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            }\n        },\n        \"RewardsManagerTargets\": {\n            \"solvency_totalSupply_atEpoch()\": {\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            }\n        }\n    },\n    \"functions_relations\": {\n        \"Asserts\": {},\n        \"BaseProperties\": {},\n        \"BaseSetup\": {},\n        \"BaseTargetFunctions\": {},\n        \"CryticAsserts\": {},\n        \"FoundryAsserts\": {\n            \"excludeArtifacts()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"excludeContracts()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"excludeSenders()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetArtifacts()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetArtifactSelectors()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetContracts()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetSelectors()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetSenders()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetInterfaces()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"failed()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            }\n        },\n        \"IHevm\": {\n            \"warp(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"roll(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assume(bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"deal(address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"load(address,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"store(address,bytes32,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"sign(uint256,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"addr(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"ffi(string[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"prank(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"createFork(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"selectFork(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"activeFork()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"label(address,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            }\n        },\n        \"CommonBase\": {},\n        \"TestBase\": {},\n        \"ScriptBase\": {},\n        \"Script\": {},\n        \"StdAssertions\": {\n            \"failed()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            }\n        },\n        \"StdChains\": {},\n        \"StdCheatsSafe\": {},\n        \"StdCheats\": {},\n        \"stdError\": {},\n        \"StdInvariant\": {\n            \"excludeArtifacts()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"excludeContracts()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"excludeSenders()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetArtifacts()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetArtifactSelectors()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetContracts()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetSelectors()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetSenders()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetInterfaces()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            }\n        },\n        \"stdJson\": {},\n        \"stdMath\": {},\n        \"stdStorageSafe\": {},\n        \"stdStorage\": {},\n        \"StdStyle\": {},\n        \"stdToml\": {},\n        \"StdUtils\": {},\n        \"Test\": {\n            \"excludeArtifacts()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"excludeContracts()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"excludeSenders()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetArtifacts()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetArtifactSelectors()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetContracts()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetSelectors()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetSenders()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetInterfaces()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"failed()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            }\n        },\n        \"VmSafe\": {\n            \"envAddress(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envAddress(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envBool(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envBool(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envBytes32(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envBytes32(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envBytes(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envBytes(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envInt(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envInt(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,string,address[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,string,bytes32[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,string,string[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,string,bytes[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,int256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,string,bool[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,string,uint256[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,string,int256[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envString(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envString(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envUint(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envUint(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"setEnv(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"accesses(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"addr(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"eth_getLogs(uint256,uint256,address,bytes32[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getBlockNumber()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getBlockTimestamp()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getMappingKeyAndParentOf(address,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getMappingLength(address,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getMappingSlotAt(address,bytes32,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getNonce(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getRecordedLogs()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"load(address,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"pauseGasMetering()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"record()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"recordLogs()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"resumeGasMetering()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"rpc(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"signP256(uint256,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"sign(uint256,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"startMappingRecording()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"startStateDiffRecording()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"stopAndReturnStateDiff()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"stopMappingRecording()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"closeFile(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"copyFile(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"createDir(string,bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"exists(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"ffi(string[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"fsMetadata(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getCode(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getDeployedCode(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"isDir(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"isFile(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"projectRoot()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"readDir(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"readDir(string,uint64)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"readDir(string,uint64,bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"readFile(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"readFileBinary(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"readLine(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"readLink(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"removeDir(string,bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"removeFile(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"tryFfi(string[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"unixTime()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"writeFile(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"writeFileBinary(string,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"writeLine(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"keyExists(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"keyExistsJson(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonAddress(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonAddressArray(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonBool(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonBoolArray(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonBytes(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonBytes32(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonBytes32Array(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonBytesArray(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonInt(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonIntArray(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonKeys(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonString(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonStringArray(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonUint(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonUintArray(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJson(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJson(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeAddress(string,string,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeAddress(string,string,address[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeBool(string,string,bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeBool(string,string,bool[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeBytes32(string,string,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeBytes32(string,string,bytes32[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeBytes(string,string,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeBytes(string,string,bytes[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeInt(string,string,int256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeInt(string,string,int256[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeJson(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeString(string,string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeString(string,string,string[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeUint(string,string,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeUint(string,string,uint256[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"writeJson(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"writeJson(string,string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"broadcast()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"broadcast(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"broadcast(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"startBroadcast()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"startBroadcast(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"startBroadcast(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"stopBroadcast()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseAddress(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseBool(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseBytes(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseBytes32(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseInt(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseUint(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"replace(string,string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"split(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"toLowercase(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"toString(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"toString(bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"toString(bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"toString(bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"toString(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"toString(int256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"toUppercase(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"trim(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqAbsDecimal(uint256,uint256,uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqAbsDecimal(uint256,uint256,uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqAbsDecimal(int256,int256,uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqAbsDecimal(int256,int256,uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqAbs(uint256,uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqAbs(uint256,uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqAbs(int256,int256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqAbs(int256,int256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqRelDecimal(uint256,uint256,uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqRelDecimal(uint256,uint256,uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqRelDecimal(int256,int256,uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqRelDecimal(int256,int256,uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqRel(uint256,uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqRel(uint256,uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqRel(int256,int256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqRel(int256,int256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEqDecimal(uint256,uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEqDecimal(uint256,uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEqDecimal(int256,int256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEqDecimal(int256,int256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(bool,bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(bool,bool,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(string,string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(bytes,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(bytes,bytes,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(bool[],bool[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(bool[],bool[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(uint256[],uint256[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(uint256[],uint256[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(int256[],int256[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(int256[],int256[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(address[],address[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(address[],address[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(bytes32[],bytes32[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(bytes32[],bytes32[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(string[],string[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(string[],string[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(bytes[],bytes[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(bytes[],bytes[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(int256,int256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(int256,int256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(address,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(address,address,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(bytes32,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(bytes32,bytes32,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertFalse(bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertFalse(bool,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGeDecimal(uint256,uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGeDecimal(uint256,uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGeDecimal(int256,int256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGeDecimal(int256,int256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGe(uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGe(uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGe(int256,int256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGe(int256,int256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGtDecimal(uint256,uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGtDecimal(uint256,uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGtDecimal(int256,int256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGtDecimal(int256,int256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGt(uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGt(uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGt(int256,int256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGt(int256,int256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLeDecimal(uint256,uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLeDecimal(uint256,uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLeDecimal(int256,int256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLeDecimal(int256,int256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLe(uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLe(uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLe(int256,int256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLe(int256,int256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLtDecimal(uint256,uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLtDecimal(uint256,uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLtDecimal(int256,int256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLtDecimal(int256,int256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLt(uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLt(uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLt(int256,int256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLt(int256,int256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEqDecimal(uint256,uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEqDecimal(uint256,uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEqDecimal(int256,int256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEqDecimal(int256,int256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(bool,bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(bool,bool,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(string,string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(bytes,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(bytes,bytes,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(bool[],bool[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(bool[],bool[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(uint256[],uint256[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(uint256[],uint256[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(int256[],int256[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(int256[],int256[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(address[],address[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(address[],address[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(bytes32[],bytes32[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(bytes32[],bytes32[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(string[],string[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(string[],string[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(bytes[],bytes[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(bytes[],bytes[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(int256,int256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(int256,int256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(address,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(address,address,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(bytes32,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(bytes32,bytes32,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertTrue(bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertTrue(bool,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assume(bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"breakpoint(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"breakpoint(string,bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"rpcUrl(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"rpcUrlStructs()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"rpcUrls()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"sleep(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"keyExistsToml(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlAddress(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlAddressArray(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlBool(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlBoolArray(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlBytes(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlBytes32(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlBytes32Array(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlBytesArray(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlInt(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlIntArray(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlKeys(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlString(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlStringArray(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlUint(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlUintArray(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseToml(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseToml(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"writeToml(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"writeToml(string,string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"computeCreate2Address(bytes32,bytes32,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"computeCreate2Address(bytes32,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"computeCreateAddress(address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"createWallet(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"createWallet(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"createWallet(uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"deriveKey(string,uint32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"deriveKey(string,string,uint32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"deriveKey(string,uint32,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"deriveKey(string,string,uint32,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getLabel(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getNonce((address,uint256,uint256,uint256))\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"label(address,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"rememberKey(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"sign((address,uint256,uint256,uint256),bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"toBase64URL(bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"toBase64URL(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"toBase64(bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"toBase64(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            }\n        },\n        \"Vm\": {\n            \"envAddress(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envAddress(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envBool(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envBool(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envBytes32(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envBytes32(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envBytes(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envBytes(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envInt(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envInt(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,string,address[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,string,bytes32[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,string,string[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,string,bytes[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,int256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,string,bool[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,string,uint256[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,string,int256[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envString(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envString(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envUint(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envUint(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"setEnv(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"accesses(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"addr(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"eth_getLogs(uint256,uint256,address,bytes32[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getBlockNumber()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getBlockTimestamp()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getMappingKeyAndParentOf(address,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getMappingLength(address,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getMappingSlotAt(address,bytes32,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getNonce(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getRecordedLogs()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"load(address,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"pauseGasMetering()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"record()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"recordLogs()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"resumeGasMetering()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"rpc(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"signP256(uint256,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"sign(uint256,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"startMappingRecording()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"startStateDiffRecording()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"stopAndReturnStateDiff()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"stopMappingRecording()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"closeFile(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"copyFile(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"createDir(string,bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"exists(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"ffi(string[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"fsMetadata(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getCode(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getDeployedCode(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"isDir(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"isFile(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"projectRoot()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"readDir(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"readDir(string,uint64)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"readDir(string,uint64,bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"readFile(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"readFileBinary(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"readLine(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"readLink(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"removeDir(string,bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"removeFile(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"tryFfi(string[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"unixTime()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"writeFile(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"writeFileBinary(string,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"writeLine(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"keyExists(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"keyExistsJson(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonAddress(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonAddressArray(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonBool(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonBoolArray(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonBytes(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonBytes32(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonBytes32Array(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonBytesArray(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonInt(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonIntArray(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonKeys(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonString(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonStringArray(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonUint(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonUintArray(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJson(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJson(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeAddress(string,string,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeAddress(string,string,address[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeBool(string,string,bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeBool(string,string,bool[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeBytes32(string,string,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeBytes32(string,string,bytes32[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeBytes(string,string,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeBytes(string,string,bytes[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeInt(string,string,int256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeInt(string,string,int256[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeJson(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeString(string,string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeString(string,string,string[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeUint(string,string,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeUint(string,string,uint256[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"writeJson(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"writeJson(string,string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"broadcast()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"broadcast(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"broadcast(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"startBroadcast()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"startBroadcast(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"startBroadcast(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"stopBroadcast()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseAddress(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseBool(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseBytes(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseBytes32(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseInt(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseUint(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"replace(string,string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"split(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"toLowercase(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"toString(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"toString(bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"toString(bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"toString(bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"toString(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"toString(int256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"toUppercase(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"trim(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqAbsDecimal(uint256,uint256,uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqAbsDecimal(uint256,uint256,uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqAbsDecimal(int256,int256,uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqAbsDecimal(int256,int256,uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqAbs(uint256,uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqAbs(uint256,uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqAbs(int256,int256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqAbs(int256,int256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqRelDecimal(uint256,uint256,uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqRelDecimal(uint256,uint256,uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqRelDecimal(int256,int256,uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqRelDecimal(int256,int256,uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqRel(uint256,uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqRel(uint256,uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqRel(int256,int256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqRel(int256,int256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEqDecimal(uint256,uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEqDecimal(uint256,uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEqDecimal(int256,int256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEqDecimal(int256,int256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(bool,bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(bool,bool,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(string,string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(bytes,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(bytes,bytes,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(bool[],bool[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(bool[],bool[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(uint256[],uint256[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(uint256[],uint256[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(int256[],int256[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(int256[],int256[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(address[],address[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(address[],address[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(bytes32[],bytes32[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(bytes32[],bytes32[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(string[],string[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(string[],string[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(bytes[],bytes[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(bytes[],bytes[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(int256,int256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(int256,int256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(address,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(address,address,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(bytes32,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(bytes32,bytes32,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertFalse(bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertFalse(bool,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGeDecimal(uint256,uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGeDecimal(uint256,uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGeDecimal(int256,int256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGeDecimal(int256,int256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGe(uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGe(uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGe(int256,int256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGe(int256,int256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGtDecimal(uint256,uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGtDecimal(uint256,uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGtDecimal(int256,int256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGtDecimal(int256,int256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGt(uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGt(uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGt(int256,int256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGt(int256,int256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLeDecimal(uint256,uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLeDecimal(uint256,uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLeDecimal(int256,int256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLeDecimal(int256,int256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLe(uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLe(uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLe(int256,int256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLe(int256,int256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLtDecimal(uint256,uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLtDecimal(uint256,uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLtDecimal(int256,int256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLtDecimal(int256,int256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLt(uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLt(uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLt(int256,int256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLt(int256,int256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEqDecimal(uint256,uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEqDecimal(uint256,uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEqDecimal(int256,int256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEqDecimal(int256,int256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(bool,bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(bool,bool,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(string,string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(bytes,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(bytes,bytes,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(bool[],bool[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(bool[],bool[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(uint256[],uint256[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(uint256[],uint256[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(int256[],int256[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(int256[],int256[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(address[],address[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(address[],address[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(bytes32[],bytes32[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(bytes32[],bytes32[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(string[],string[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(string[],string[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(bytes[],bytes[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(bytes[],bytes[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(int256,int256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(int256,int256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(address,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(address,address,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(bytes32,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(bytes32,bytes32,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertTrue(bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertTrue(bool,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assume(bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"breakpoint(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"breakpoint(string,bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"rpcUrl(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"rpcUrlStructs()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"rpcUrls()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"sleep(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"keyExistsToml(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlAddress(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlAddressArray(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlBool(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlBoolArray(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlBytes(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlBytes32(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlBytes32Array(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlBytesArray(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlInt(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlIntArray(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlKeys(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlString(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlStringArray(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlUint(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlUintArray(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseToml(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseToml(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"writeToml(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"writeToml(string,string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"computeCreate2Address(bytes32,bytes32,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"computeCreate2Address(bytes32,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"computeCreateAddress(address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"createWallet(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"createWallet(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"createWallet(uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"deriveKey(string,uint32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"deriveKey(string,string,uint32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"deriveKey(string,uint32,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"deriveKey(string,string,uint32,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getLabel(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getNonce((address,uint256,uint256,uint256))\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"label(address,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"rememberKey(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"sign((address,uint256,uint256,uint256),bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"toBase64URL(bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"toBase64URL(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"toBase64(bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"toBase64(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"activeFork()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"allowCheatcodes(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"chainId(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"clearMockedCalls()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"coinbase(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"createFork(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"createFork(string,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"createFork(string,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"createSelectFork(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"createSelectFork(string,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"createSelectFork(string,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"deal(address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"deleteSnapshot(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"deleteSnapshots()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"difficulty(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"dumpState(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"etch(address,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"fee(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"isPersistent(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"loadAllocs(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"makePersistent(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"makePersistent(address,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"makePersistent(address,address,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"makePersistent(address[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"mockCallRevert(address,bytes,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"mockCallRevert(address,uint256,bytes,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"mockCall(address,bytes,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"mockCall(address,uint256,bytes,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"prank(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"prank(address,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"prevrandao(bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"readCallers()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"resetNonce(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"revertTo(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"revertToAndDelete(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"revokePersistent(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"revokePersistent(address[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"roll(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"rollFork(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"rollFork(bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"rollFork(uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"rollFork(uint256,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"selectFork(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"setNonce(address,uint64)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"setNonceUnsafe(address,uint64)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"snapshot()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"startPrank(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"startPrank(address,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"stopPrank()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"store(address,bytes32,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"transact(bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"transact(uint256,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"txGasPrice(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"warp(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectCallMinGas(address,uint256,uint64,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectCallMinGas(address,uint256,uint64,bytes,uint64)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectCall(address,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectCall(address,bytes,uint64)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectCall(address,uint256,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectCall(address,uint256,bytes,uint64)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectCall(address,uint256,uint64,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectCall(address,uint256,uint64,bytes,uint64)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectEmit(bool,bool,bool,bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectEmit(bool,bool,bool,bool,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectEmit()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectEmit(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectRevert()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectRevert(bytes4)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectRevert(bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectSafeMemory(uint64,uint64)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectSafeMemoryCall(uint64,uint64)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"skip(bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"stopExpectSafeMemory()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            }\n        },\n        \"console\": {},\n        \"console2\": {},\n        \"IERC165\": {\n            \"supportsInterface(bytes4)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            }\n        },\n        \"IERC20\": {\n            \"totalSupply()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"balanceOf(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"transfer(address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"allowance(address,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"approve(address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"transferFrom(address,address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            }\n        },\n        \"IERC721\": {\n            \"supportsInterface(bytes4)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"balanceOf(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"ownerOf(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"safeTransferFrom(address,address,uint256,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"safeTransferFrom(address,address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"transferFrom(address,address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"approve(address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"setApprovalForAll(address,bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getApproved(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"isApprovedForAll(address,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            }\n        },\n        \"IERC721TokenReceiver\": {\n            \"onERC721Received(address,address,uint256,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            }\n        },\n        \"IERC721Metadata\": {\n            \"balanceOf(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"ownerOf(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"safeTransferFrom(address,address,uint256,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"safeTransferFrom(address,address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"transferFrom(address,address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"approve(address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"setApprovalForAll(address,bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getApproved(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"isApprovedForAll(address,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"supportsInterface(bytes4)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"name()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"symbol()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"tokenURI(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            }\n        },\n        \"IERC721Enumerable\": {\n            \"balanceOf(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"ownerOf(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"safeTransferFrom(address,address,uint256,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"safeTransferFrom(address,address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"transferFrom(address,address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"approve(address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"setApprovalForAll(address,bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getApproved(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"isApprovedForAll(address,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"supportsInterface(bytes4)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"totalSupply()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"tokenByIndex(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"tokenOfOwnerByIndex(address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            }\n        },\n        \"IMulticall3\": {\n            \"aggregate((address,bytes)[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"aggregate3((address,bool,bytes)[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"aggregate3Value((address,bool,uint256,bytes)[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"blockAndAggregate((address,bytes)[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getBasefee()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getBlockHash(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getBlockNumber()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getChainId()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getCurrentBlockCoinbase()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getCurrentBlockDifficulty()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getCurrentBlockGasLimit()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getCurrentBlockTimestamp()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getEthBalance(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getLastBlockHash()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"tryAggregate(bool,(address,bytes)[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"tryBlockAndAggregate(bool,(address,bytes)[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            }\n        },\n        \"MockERC20\": {\n            \"approve(address,uint256)\": {\n                \"impacts\": [\n                    \"transferFrom(address,address,uint256)\"\n                ],\n                \"is_impacted_by\": []\n            },\n            \"transfer(address,uint256)\": {\n                \"impacts\": [\n                    \"transfer(address,uint256)\",\n                    \"transferFrom(address,address,uint256)\",\n                    \"mint(address,uint256)\",\n                    \"burn(address,uint256)\"\n                ],\n                \"is_impacted_by\": [\n                    \"transfer(address,uint256)\",\n                    \"transferFrom(address,address,uint256)\",\n                    \"mint(address,uint256)\",\n                    \"burn(address,uint256)\"\n                ]\n            },\n            \"transferFrom(address,address,uint256)\": {\n                \"impacts\": [\n                    \"transfer(address,uint256)\",\n                    \"transferFrom(address,address,uint256)\",\n                    \"mint(address,uint256)\",\n                    \"burn(address,uint256)\"\n                ],\n                \"is_impacted_by\": [\n                    \"approve(address,uint256)\",\n                    \"transfer(address,uint256)\",\n                    \"transferFrom(address,address,uint256)\",\n                    \"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\",\n                    \"mint(address,uint256)\",\n                    \"burn(address,uint256)\"\n                ]\n            },\n            \"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\": {\n                \"impacts\": [\n                    \"transferFrom(address,address,uint256)\",\n                    \"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\"\n                ],\n                \"is_impacted_by\": [\n                    \"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\",\n                    \"constructor(string,string,uint8)\"\n                ]\n            },\n            \"DOMAIN_SEPARATOR()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"constructor(string,string,uint8)\"\n                ]\n            },\n            \"constructor(string,string,uint8)\": {\n                \"impacts\": [\n                    \"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\",\n                    \"DOMAIN_SEPARATOR()\",\n                    \"constructor(string,string,uint8)\"\n                ],\n                \"is_impacted_by\": [\n                    \"constructor(string,string,uint8)\"\n                ]\n            },\n            \"mint(address,uint256)\": {\n                \"impacts\": [\n                    \"transfer(address,uint256)\",\n                    \"transferFrom(address,address,uint256)\",\n                    \"mint(address,uint256)\",\n                    \"burn(address,uint256)\"\n                ],\n                \"is_impacted_by\": [\n                    \"transfer(address,uint256)\",\n                    \"transferFrom(address,address,uint256)\",\n                    \"mint(address,uint256)\",\n                    \"burn(address,uint256)\"\n                ]\n            },\n            \"burn(address,uint256)\": {\n                \"impacts\": [\n                    \"transfer(address,uint256)\",\n                    \"transferFrom(address,address,uint256)\",\n                    \"mint(address,uint256)\",\n                    \"burn(address,uint256)\"\n                ],\n                \"is_impacted_by\": [\n                    \"transfer(address,uint256)\",\n                    \"transferFrom(address,address,uint256)\",\n                    \"mint(address,uint256)\",\n                    \"burn(address,uint256)\"\n                ]\n            }\n        },\n        \"MockERC721\": {\n            \"name()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"initialize(string,string)\"\n                ]\n            },\n            \"symbol()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"initialize(string,string)\"\n                ]\n            },\n            \"tokenURI(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"ownerOf(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"transferFrom(address,address,uint256)\",\n                    \"safeTransferFrom(address,address,uint256)\",\n                    \"safeTransferFrom(address,address,uint256,bytes)\"\n                ]\n            },\n            \"balanceOf(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"transferFrom(address,address,uint256)\",\n                    \"safeTransferFrom(address,address,uint256)\",\n                    \"safeTransferFrom(address,address,uint256,bytes)\"\n                ]\n            },\n            \"getApproved(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"approve(address,uint256)\",\n                    \"transferFrom(address,address,uint256)\",\n                    \"safeTransferFrom(address,address,uint256)\",\n                    \"safeTransferFrom(address,address,uint256,bytes)\"\n                ]\n            },\n            \"isApprovedForAll(address,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setApprovalForAll(address,bool)\"\n                ]\n            },\n            \"initialize(string,string)\": {\n                \"impacts\": [\n                    \"name()\",\n                    \"symbol()\",\n                    \"initialize(string,string)\"\n                ],\n                \"is_impacted_by\": [\n                    \"initialize(string,string)\"\n                ]\n            },\n            \"approve(address,uint256)\": {\n                \"impacts\": [\n                    \"getApproved(uint256)\",\n                    \"transferFrom(address,address,uint256)\",\n                    \"safeTransferFrom(address,address,uint256)\",\n                    \"safeTransferFrom(address,address,uint256,bytes)\"\n                ],\n                \"is_impacted_by\": [\n                    \"setApprovalForAll(address,bool)\",\n                    \"transferFrom(address,address,uint256)\",\n                    \"safeTransferFrom(address,address,uint256)\",\n                    \"safeTransferFrom(address,address,uint256,bytes)\"\n                ]\n            },\n            \"setApprovalForAll(address,bool)\": {\n                \"impacts\": [\n                    \"isApprovedForAll(address,address)\",\n                    \"approve(address,uint256)\",\n                    \"transferFrom(address,address,uint256)\",\n                    \"safeTransferFrom(address,address,uint256)\",\n                    \"safeTransferFrom(address,address,uint256,bytes)\"\n                ],\n                \"is_impacted_by\": []\n            },\n            \"transferFrom(address,address,uint256)\": {\n                \"impacts\": [\n                    \"ownerOf(uint256)\",\n                    \"balanceOf(address)\",\n                    \"getApproved(uint256)\",\n                    \"approve(address,uint256)\",\n                    \"transferFrom(address,address,uint256)\",\n                    \"safeTransferFrom(address,address,uint256)\",\n                    \"safeTransferFrom(address,address,uint256,bytes)\"\n                ],\n                \"is_impacted_by\": [\n                    \"approve(address,uint256)\",\n                    \"setApprovalForAll(address,bool)\",\n                    \"transferFrom(address,address,uint256)\",\n                    \"safeTransferFrom(address,address,uint256)\",\n                    \"safeTransferFrom(address,address,uint256,bytes)\"\n                ]\n            },\n            \"safeTransferFrom(address,address,uint256)\": {\n                \"impacts\": [\n                    \"ownerOf(uint256)\",\n                    \"balanceOf(address)\",\n                    \"getApproved(uint256)\",\n                    \"approve(address,uint256)\",\n                    \"transferFrom(address,address,uint256)\",\n                    \"safeTransferFrom(address,address,uint256)\",\n                    \"safeTransferFrom(address,address,uint256,bytes)\"\n                ],\n                \"is_impacted_by\": [\n                    \"approve(address,uint256)\",\n                    \"setApprovalForAll(address,bool)\",\n                    \"transferFrom(address,address,uint256)\",\n                    \"safeTransferFrom(address,address,uint256)\",\n                    \"safeTransferFrom(address,address,uint256,bytes)\"\n                ]\n            },\n            \"safeTransferFrom(address,address,uint256,bytes)\": {\n                \"impacts\": [\n                    \"ownerOf(uint256)\",\n                    \"balanceOf(address)\",\n                    \"getApproved(uint256)\",\n                    \"approve(address,uint256)\",\n                    \"transferFrom(address,address,uint256)\",\n                    \"safeTransferFrom(address,address,uint256)\",\n                    \"safeTransferFrom(address,address,uint256,bytes)\"\n                ],\n                \"is_impacted_by\": [\n                    \"approve(address,uint256)\",\n                    \"setApprovalForAll(address,bool)\",\n                    \"transferFrom(address,address,uint256)\",\n                    \"safeTransferFrom(address,address,uint256)\",\n                    \"safeTransferFrom(address,address,uint256,bytes)\"\n                ]\n            },\n            \"supportsInterface(bytes4)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            }\n        },\n        \"safeconsole\": {},\n        \"IERC1363\": {\n            \"supportsInterface(bytes4)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"totalSupply()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"balanceOf(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"transfer(address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"allowance(address,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"approve(address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"transferFrom(address,address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"transferAndCall(address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"transferAndCall(address,uint256,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"transferFromAndCall(address,address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"transferFromAndCall(address,address,uint256,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"approveAndCall(address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"approveAndCall(address,uint256,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            }\n        },\n        \"SafeERC20\": {},\n        \"ReentrancyGuard\": {},\n        \"ActorManager\": {},\n        \"AssetManager\": {},\n        \"EnumerableSet\": {},\n        \"ERC20\": {\n            \"approve(address,uint256)\": {\n                \"impacts\": [\n                    \"transferFrom(address,address,uint256)\"\n                ],\n                \"is_impacted_by\": []\n            },\n            \"transfer(address,uint256)\": {\n                \"impacts\": [\n                    \"transfer(address,uint256)\",\n                    \"transferFrom(address,address,uint256)\"\n                ],\n                \"is_impacted_by\": [\n                    \"transfer(address,uint256)\",\n                    \"transferFrom(address,address,uint256)\"\n                ]\n            },\n            \"transferFrom(address,address,uint256)\": {\n                \"impacts\": [\n                    \"transfer(address,uint256)\",\n                    \"transferFrom(address,address,uint256)\"\n                ],\n                \"is_impacted_by\": [\n                    \"approve(address,uint256)\",\n                    \"transfer(address,uint256)\",\n                    \"transferFrom(address,address,uint256)\",\n                    \"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\"\n                ]\n            },\n            \"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\": {\n                \"impacts\": [\n                    \"transferFrom(address,address,uint256)\",\n                    \"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\"\n                ],\n                \"is_impacted_by\": [\n                    \"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\"\n                ]\n            },\n            \"DOMAIN_SEPARATOR()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            }\n        },\n        \"Panic\": {},\n        \"Utils\": {},\n        \"CounterScript\": {\n            \"setUp()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"run()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            }\n        },\n        \"RewardsManager\": {\n            \"constructor()\": {\n                \"impacts\": [\n                    \"currentEpoch()\",\n                    \"getEpochData(uint256)\",\n                    \"notifyTransfer(address,address,uint256)\",\n                    \"accrueVault(uint256,address)\",\n                    \"getVaultTimeLeftToAccrue(uint256,address)\",\n                    \"getTotalSupplyAtEpoch(uint256,address)\",\n                    \"accrueUser(uint256,address,address)\",\n                    \"getUserTimeLeftToAccrue(uint256,address,address)\",\n                    \"getBalanceAtEpoch(uint256,address,address)\",\n                    \"claimRewards(uint256[],address[],address[],address[])\",\n                    \"claimRewardReferenceEmitting(uint256,address,address,address)\",\n                    \"claimRewardEmitting(uint256,address,address,address)\",\n                    \"claimReward(uint256,address,address,address)\",\n                    \"claimBulkTokensOverMultipleEpochs(uint256,uint256,address,address[],address)\",\n                    \"addBulkRewardsLinearly(uint256,uint256,address,address,uint256)\",\n                    \"addBulkRewards(uint256,uint256,address,address,uint256[])\",\n                    \"addReward(uint256,address,address,uint256)\",\n                    \"getUserNextEpochInfo(uint256,address,address,uint256)\",\n                    \"getVaultNextEpochInfo(uint256,address,uint256)\",\n                    \"reap((uint256,uint256,address,address[]))\",\n                    \"tear((uint256,uint256,address,address[]))\",\n                    \"getClaimableBulkRewards((uint256,uint256,address,address[]),address)\"\n                ],\n                \"is_impacted_by\": []\n            },\n            \"currentEpoch()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"constructor()\"\n                ]\n            },\n            \"getEpochData(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"constructor()\"\n                ]\n            },\n            \"notifyTransfer(address,address,uint256)\": {\n                \"impacts\": [\n                    \"notifyTransfer(address,address,uint256)\",\n                    \"accrueVault(uint256,address)\",\n                    \"getVaultTimeLeftToAccrue(uint256,address)\",\n                    \"getTotalSupplyAtEpoch(uint256,address)\",\n                    \"accrueUser(uint256,address,address)\",\n                    \"getUserTimeLeftToAccrue(uint256,address,address)\",\n                    \"getBalanceAtEpoch(uint256,address,address)\",\n                    \"claimRewards(uint256[],address[],address[],address[])\",\n                    \"claimRewardReferenceEmitting(uint256,address,address,address)\",\n                    \"claimRewardEmitting(uint256,address,address,address)\",\n                    \"claimReward(uint256,address,address,address)\",\n                    \"claimBulkTokensOverMultipleEpochs(uint256,uint256,address,address[],address)\",\n                    \"getUserNextEpochInfo(uint256,address,address,uint256)\",\n                    \"getVaultNextEpochInfo(uint256,address,uint256)\",\n                    \"reap((uint256,uint256,address,address[]))\",\n                    \"tear((uint256,uint256,address,address[]))\",\n                    \"getClaimableBulkRewards((uint256,uint256,address,address[]),address)\"\n                ],\n                \"is_impacted_by\": [\n                    \"constructor()\",\n                    \"notifyTransfer(address,address,uint256)\",\n                    \"accrueVault(uint256,address)\",\n                    \"accrueUser(uint256,address,address)\",\n                    \"claimRewardReferenceEmitting(uint256,address,address,address)\",\n                    \"claimBulkTokensOverMultipleEpochs(uint256,uint256,address,address[],address)\",\n                    \"reap((uint256,uint256,address,address[]))\",\n                    \"tear((uint256,uint256,address,address[]))\"\n                ]\n            },\n            \"accrueVault(uint256,address)\": {\n                \"impacts\": [\n                    \"notifyTransfer(address,address,uint256)\",\n                    \"accrueVault(uint256,address)\",\n                    \"getVaultTimeLeftToAccrue(uint256,address)\",\n                    \"getTotalSupplyAtEpoch(uint256,address)\",\n                    \"claimRewards(uint256[],address[],address[],address[])\",\n                    \"claimRewardReferenceEmitting(uint256,address,address,address)\",\n                    \"claimRewardEmitting(uint256,address,address,address)\",\n                    \"claimReward(uint256,address,address,address)\",\n                    \"claimBulkTokensOverMultipleEpochs(uint256,uint256,address,address[],address)\",\n                    \"getVaultNextEpochInfo(uint256,address,uint256)\",\n                    \"reap((uint256,uint256,address,address[]))\",\n                    \"tear((uint256,uint256,address,address[]))\",\n                    \"getClaimableBulkRewards((uint256,uint256,address,address[]),address)\"\n                ],\n                \"is_impacted_by\": [\n                    \"constructor()\",\n                    \"notifyTransfer(address,address,uint256)\",\n                    \"accrueVault(uint256,address)\",\n                    \"claimRewardReferenceEmitting(uint256,address,address,address)\",\n                    \"claimBulkTokensOverMultipleEpochs(uint256,uint256,address,address[],address)\"\n                ]\n            },\n            \"getVaultTimeLeftToAccrue(uint256,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"constructor()\",\n                    \"notifyTransfer(address,address,uint256)\",\n                    \"accrueVault(uint256,address)\",\n                    \"claimRewardReferenceEmitting(uint256,address,address,address)\",\n                    \"claimBulkTokensOverMultipleEpochs(uint256,uint256,address,address[],address)\"\n                ]\n            },\n            \"getTotalSupplyAtEpoch(uint256,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"constructor()\",\n                    \"notifyTransfer(address,address,uint256)\",\n                    \"accrueVault(uint256,address)\",\n                    \"claimRewardReferenceEmitting(uint256,address,address,address)\",\n                    \"claimBulkTokensOverMultipleEpochs(uint256,uint256,address,address[],address)\"\n                ]\n            },\n            \"accrueUser(uint256,address,address)\": {\n                \"impacts\": [\n                    \"notifyTransfer(address,address,uint256)\",\n                    \"accrueUser(uint256,address,address)\",\n                    \"getUserTimeLeftToAccrue(uint256,address,address)\",\n                    \"getBalanceAtEpoch(uint256,address,address)\",\n                    \"claimRewards(uint256[],address[],address[],address[])\",\n                    \"claimRewardReferenceEmitting(uint256,address,address,address)\",\n                    \"claimRewardEmitting(uint256,address,address,address)\",\n                    \"claimReward(uint256,address,address,address)\",\n                    \"claimBulkTokensOverMultipleEpochs(uint256,uint256,address,address[],address)\",\n                    \"getUserNextEpochInfo(uint256,address,address,uint256)\",\n                    \"reap((uint256,uint256,address,address[]))\",\n                    \"tear((uint256,uint256,address,address[]))\",\n                    \"getClaimableBulkRewards((uint256,uint256,address,address[]),address)\"\n                ],\n                \"is_impacted_by\": [\n                    \"constructor()\",\n                    \"notifyTransfer(address,address,uint256)\",\n                    \"accrueUser(uint256,address,address)\",\n                    \"claimRewardReferenceEmitting(uint256,address,address,address)\",\n                    \"claimBulkTokensOverMultipleEpochs(uint256,uint256,address,address[],address)\",\n                    \"reap((uint256,uint256,address,address[]))\",\n                    \"tear((uint256,uint256,address,address[]))\"\n                ]\n            },\n            \"getUserTimeLeftToAccrue(uint256,address,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"constructor()\",\n                    \"notifyTransfer(address,address,uint256)\",\n                    \"accrueUser(uint256,address,address)\",\n                    \"claimRewardReferenceEmitting(uint256,address,address,address)\",\n                    \"claimBulkTokensOverMultipleEpochs(uint256,uint256,address,address[],address)\",\n                    \"reap((uint256,uint256,address,address[]))\",\n                    \"tear((uint256,uint256,address,address[]))\"\n                ]\n            },\n            \"getBalanceAtEpoch(uint256,address,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"constructor()\",\n                    \"notifyTransfer(address,address,uint256)\",\n                    \"accrueUser(uint256,address,address)\",\n                    \"claimRewardReferenceEmitting(uint256,address,address,address)\",\n                    \"claimBulkTokensOverMultipleEpochs(uint256,uint256,address,address[],address)\",\n                    \"reap((uint256,uint256,address,address[]))\",\n                    \"tear((uint256,uint256,address,address[]))\"\n                ]\n            },\n            \"claimRewards(uint256[],address[],address[],address[])\": {\n                \"impacts\": [\n                    \"claimRewards(uint256[],address[],address[],address[])\",\n                    \"claimRewardReferenceEmitting(uint256,address,address,address)\",\n                    \"claimRewardEmitting(uint256,address,address,address)\",\n                    \"claimReward(uint256,address,address,address)\",\n                    \"claimBulkTokensOverMultipleEpochs(uint256,uint256,address,address[],address)\",\n                    \"reap((uint256,uint256,address,address[]))\",\n                    \"tear((uint256,uint256,address,address[]))\",\n                    \"getClaimableBulkRewards((uint256,uint256,address,address[]),address)\"\n                ],\n                \"is_impacted_by\": [\n                    \"constructor()\",\n                    \"notifyTransfer(address,address,uint256)\",\n                    \"accrueVault(uint256,address)\",\n                    \"accrueUser(uint256,address,address)\",\n                    \"claimRewards(uint256[],address[],address[],address[])\",\n                    \"claimRewardReferenceEmitting(uint256,address,address,address)\",\n                    \"claimRewardEmitting(uint256,address,address,address)\",\n                    \"claimReward(uint256,address,address,address)\",\n                    \"claimBulkTokensOverMultipleEpochs(uint256,uint256,address,address[],address)\",\n                    \"addBulkRewardsLinearly(uint256,uint256,address,address,uint256)\",\n                    \"addBulkRewards(uint256,uint256,address,address,uint256[])\",\n                    \"addReward(uint256,address,address,uint256)\",\n                    \"reap((uint256,uint256,address,address[]))\",\n                    \"tear((uint256,uint256,address,address[]))\"\n                ]\n            },\n            \"claimRewardReferenceEmitting(uint256,address,address,address)\": {\n                \"impacts\": [\n                    \"notifyTransfer(address,address,uint256)\",\n                    \"accrueVault(uint256,address)\",\n                    \"getVaultTimeLeftToAccrue(uint256,address)\",\n                    \"getTotalSupplyAtEpoch(uint256,address)\",\n                    \"accrueUser(uint256,address,address)\",\n                    \"getUserTimeLeftToAccrue(uint256,address,address)\",\n                    \"getBalanceAtEpoch(uint256,address,address)\",\n                    \"claimRewards(uint256[],address[],address[],address[])\",\n                    \"claimRewardReferenceEmitting(uint256,address,address,address)\",\n                    \"claimRewardEmitting(uint256,address,address,address)\",\n                    \"claimReward(uint256,address,address,address)\",\n                    \"claimBulkTokensOverMultipleEpochs(uint256,uint256,address,address[],address)\",\n                    \"getUserNextEpochInfo(uint256,address,address,uint256)\",\n                    \"getVaultNextEpochInfo(uint256,address,uint256)\",\n                    \"reap((uint256,uint256,address,address[]))\",\n                    \"tear((uint256,uint256,address,address[]))\",\n                    \"getClaimableBulkRewards((uint256,uint256,address,address[]),address)\"\n                ],\n                \"is_impacted_by\": [\n                    \"constructor()\",\n                    \"notifyTransfer(address,address,uint256)\",\n                    \"accrueVault(uint256,address)\",\n                    \"accrueUser(uint256,address,address)\",\n                    \"claimRewards(uint256[],address[],address[],address[])\",\n                    \"claimRewardReferenceEmitting(uint256,address,address,address)\",\n                    \"claimRewardEmitting(uint256,address,address,address)\",\n                    \"claimReward(uint256,address,address,address)\",\n                    \"claimBulkTokensOverMultipleEpochs(uint256,uint256,address,address[],address)\",\n                    \"addBulkRewardsLinearly(uint256,uint256,address,address,uint256)\",\n                    \"addBulkRewards(uint256,uint256,address,address,uint256[])\",\n                    \"addReward(uint256,address,address,uint256)\",\n                    \"reap((uint256,uint256,address,address[]))\",\n                    \"tear((uint256,uint256,address,address[]))\"\n                ]\n            },\n            \"claimRewardEmitting(uint256,address,address,address)\": {\n                \"impacts\": [\n                    \"claimRewards(uint256[],address[],address[],address[])\",\n                    \"claimRewardReferenceEmitting(uint256,address,address,address)\",\n                    \"claimRewardEmitting(uint256,address,address,address)\",\n                    \"claimReward(uint256,address,address,address)\",\n                    \"claimBulkTokensOverMultipleEpochs(uint256,uint256,address,address[],address)\",\n                    \"reap((uint256,uint256,address,address[]))\",\n                    \"tear((uint256,uint256,address,address[]))\",\n                    \"getClaimableBulkRewards((uint256,uint256,address,address[]),address)\"\n                ],\n                \"is_impacted_by\": [\n                    \"constructor()\",\n                    \"notifyTransfer(address,address,uint256)\",\n                    \"accrueVault(uint256,address)\",\n                    \"accrueUser(uint256,address,address)\",\n                    \"claimRewards(uint256[],address[],address[],address[])\",\n                    \"claimRewardReferenceEmitting(uint256,address,address,address)\",\n                    \"claimRewardEmitting(uint256,address,address,address)\",\n                    \"claimReward(uint256,address,address,address)\",\n                    \"claimBulkTokensOverMultipleEpochs(uint256,uint256,address,address[],address)\",\n                    \"addBulkRewardsLinearly(uint256,uint256,address,address,uint256)\",\n                    \"addBulkRewards(uint256,uint256,address,address,uint256[])\",\n                    \"addReward(uint256,address,address,uint256)\",\n                    \"reap((uint256,uint256,address,address[]))\",\n                    \"tear((uint256,uint256,address,address[]))\"\n                ]\n            },\n            \"claimReward(uint256,address,address,address)\": {\n                \"impacts\": [\n                    \"claimRewards(uint256[],address[],address[],address[])\",\n                    \"claimRewardReferenceEmitting(uint256,address,address,address)\",\n                    \"claimRewardEmitting(uint256,address,address,address)\",\n                    \"claimReward(uint256,address,address,address)\",\n                    \"claimBulkTokensOverMultipleEpochs(uint256,uint256,address,address[],address)\",\n                    \"reap((uint256,uint256,address,address[]))\",\n                    \"tear((uint256,uint256,address,address[]))\",\n                    \"getClaimableBulkRewards((uint256,uint256,address,address[]),address)\"\n                ],\n                \"is_impacted_by\": [\n                    \"constructor()\",\n                    \"notifyTransfer(address,address,uint256)\",\n                    \"accrueVault(uint256,address)\",\n                    \"accrueUser(uint256,address,address)\",\n                    \"claimRewards(uint256[],address[],address[],address[])\",\n                    \"claimRewardReferenceEmitting(uint256,address,address,address)\",\n                    \"claimRewardEmitting(uint256,address,address,address)\",\n                    \"claimReward(uint256,address,address,address)\",\n                    \"claimBulkTokensOverMultipleEpochs(uint256,uint256,address,address[],address)\",\n                    \"addBulkRewardsLinearly(uint256,uint256,address,address,uint256)\",\n                    \"addBulkRewards(uint256,uint256,address,address,uint256[])\",\n                    \"addReward(uint256,address,address,uint256)\",\n                    \"reap((uint256,uint256,address,address[]))\",\n                    \"tear((uint256,uint256,address,address[]))\"\n                ]\n            },\n            \"claimBulkTokensOverMultipleEpochs(uint256,uint256,address,address[],address)\": {\n                \"impacts\": [\n                    \"notifyTransfer(address,address,uint256)\",\n                    \"accrueVault(uint256,address)\",\n                    \"getVaultTimeLeftToAccrue(uint256,address)\",\n                    \"getTotalSupplyAtEpoch(uint256,address)\",\n                    \"accrueUser(uint256,address,address)\",\n                    \"getUserTimeLeftToAccrue(uint256,address,address)\",\n                    \"getBalanceAtEpoch(uint256,address,address)\",\n                    \"claimRewards(uint256[],address[],address[],address[])\",\n                    \"claimRewardReferenceEmitting(uint256,address,address,address)\",\n                    \"claimRewardEmitting(uint256,address,address,address)\",\n                    \"claimReward(uint256,address,address,address)\",\n                    \"claimBulkTokensOverMultipleEpochs(uint256,uint256,address,address[],address)\",\n                    \"getUserNextEpochInfo(uint256,address,address,uint256)\",\n                    \"getVaultNextEpochInfo(uint256,address,uint256)\",\n                    \"reap((uint256,uint256,address,address[]))\",\n                    \"tear((uint256,uint256,address,address[]))\",\n                    \"getClaimableBulkRewards((uint256,uint256,address,address[]),address)\"\n                ],\n                \"is_impacted_by\": [\n                    \"constructor()\",\n                    \"notifyTransfer(address,address,uint256)\",\n                    \"accrueVault(uint256,address)\",\n                    \"accrueUser(uint256,address,address)\",\n                    \"claimRewards(uint256[],address[],address[],address[])\",\n                    \"claimRewardReferenceEmitting(uint256,address,address,address)\",\n                    \"claimRewardEmitting(uint256,address,address,address)\",\n                    \"claimReward(uint256,address,address,address)\",\n                    \"claimBulkTokensOverMultipleEpochs(uint256,uint256,address,address[],address)\",\n                    \"addBulkRewardsLinearly(uint256,uint256,address,address,uint256)\",\n                    \"addBulkRewards(uint256,uint256,address,address,uint256[])\",\n                    \"addReward(uint256,address,address,uint256)\",\n                    \"reap((uint256,uint256,address,address[]))\",\n                    \"tear((uint256,uint256,address,address[]))\"\n                ]\n            },\n            \"addBulkRewardsLinearly(uint256,uint256,address,address,uint256)\": {\n                \"impacts\": [\n                    \"claimRewards(uint256[],address[],address[],address[])\",\n                    \"claimRewardReferenceEmitting(uint256,address,address,address)\",\n                    \"claimRewardEmitting(uint256,address,address,address)\",\n                    \"claimReward(uint256,address,address,address)\",\n                    \"claimBulkTokensOverMultipleEpochs(uint256,uint256,address,address[],address)\",\n                    \"addBulkRewardsLinearly(uint256,uint256,address,address,uint256)\",\n                    \"addBulkRewards(uint256,uint256,address,address,uint256[])\",\n                    \"addReward(uint256,address,address,uint256)\",\n                    \"reap((uint256,uint256,address,address[]))\",\n                    \"tear((uint256,uint256,address,address[]))\",\n                    \"getClaimableBulkRewards((uint256,uint256,address,address[]),address)\"\n                ],\n                \"is_impacted_by\": [\n                    \"constructor()\",\n                    \"addBulkRewardsLinearly(uint256,uint256,address,address,uint256)\",\n                    \"addBulkRewards(uint256,uint256,address,address,uint256[])\",\n                    \"addReward(uint256,address,address,uint256)\"\n                ]\n            },\n            \"addBulkRewards(uint256,uint256,address,address,uint256[])\": {\n                \"impacts\": [\n                    \"claimRewards(uint256[],address[],address[],address[])\",\n                    \"claimRewardReferenceEmitting(uint256,address,address,address)\",\n                    \"claimRewardEmitting(uint256,address,address,address)\",\n                    \"claimReward(uint256,address,address,address)\",\n                    \"claimBulkTokensOverMultipleEpochs(uint256,uint256,address,address[],address)\",\n                    \"addBulkRewardsLinearly(uint256,uint256,address,address,uint256)\",\n                    \"addBulkRewards(uint256,uint256,address,address,uint256[])\",\n                    \"addReward(uint256,address,address,uint256)\",\n                    \"reap((uint256,uint256,address,address[]))\",\n                    \"tear((uint256,uint256,address,address[]))\",\n                    \"getClaimableBulkRewards((uint256,uint256,address,address[]),address)\"\n                ],\n                \"is_impacted_by\": [\n                    \"constructor()\",\n                    \"addBulkRewardsLinearly(uint256,uint256,address,address,uint256)\",\n                    \"addBulkRewards(uint256,uint256,address,address,uint256[])\",\n                    \"addReward(uint256,address,address,uint256)\"\n                ]\n            },\n            \"addReward(uint256,address,address,uint256)\": {\n                \"impacts\": [\n                    \"claimRewards(uint256[],address[],address[],address[])\",\n                    \"claimRewardReferenceEmitting(uint256,address,address,address)\",\n                    \"claimRewardEmitting(uint256,address,address,address)\",\n                    \"claimReward(uint256,address,address,address)\",\n                    \"claimBulkTokensOverMultipleEpochs(uint256,uint256,address,address[],address)\",\n                    \"addBulkRewardsLinearly(uint256,uint256,address,address,uint256)\",\n                    \"addBulkRewards(uint256,uint256,address,address,uint256[])\",\n                    \"addReward(uint256,address,address,uint256)\",\n                    \"reap((uint256,uint256,address,address[]))\",\n                    \"tear((uint256,uint256,address,address[]))\",\n                    \"getClaimableBulkRewards((uint256,uint256,address,address[]),address)\"\n                ],\n                \"is_impacted_by\": [\n                    \"constructor()\",\n                    \"addBulkRewardsLinearly(uint256,uint256,address,address,uint256)\",\n                    \"addBulkRewards(uint256,uint256,address,address,uint256[])\",\n                    \"addReward(uint256,address,address,uint256)\"\n                ]\n            },\n            \"getUserNextEpochInfo(uint256,address,address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"constructor()\",\n                    \"notifyTransfer(address,address,uint256)\",\n                    \"accrueUser(uint256,address,address)\",\n                    \"claimRewardReferenceEmitting(uint256,address,address,address)\",\n                    \"claimBulkTokensOverMultipleEpochs(uint256,uint256,address,address[],address)\",\n                    \"reap((uint256,uint256,address,address[]))\",\n                    \"tear((uint256,uint256,address,address[]))\"\n                ]\n            },\n            \"getVaultNextEpochInfo(uint256,address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"constructor()\",\n                    \"notifyTransfer(address,address,uint256)\",\n                    \"accrueVault(uint256,address)\",\n                    \"claimRewardReferenceEmitting(uint256,address,address,address)\",\n                    \"claimBulkTokensOverMultipleEpochs(uint256,uint256,address,address[],address)\"\n                ]\n            },\n            \"reap((uint256,uint256,address,address[]))\": {\n                \"impacts\": [\n                    \"notifyTransfer(address,address,uint256)\",\n                    \"accrueUser(uint256,address,address)\",\n                    \"getUserTimeLeftToAccrue(uint256,address,address)\",\n                    \"getBalanceAtEpoch(uint256,address,address)\",\n                    \"claimRewards(uint256[],address[],address[],address[])\",\n                    \"claimRewardReferenceEmitting(uint256,address,address,address)\",\n                    \"claimRewardEmitting(uint256,address,address,address)\",\n                    \"claimReward(uint256,address,address,address)\",\n                    \"claimBulkTokensOverMultipleEpochs(uint256,uint256,address,address[],address)\",\n                    \"getUserNextEpochInfo(uint256,address,address,uint256)\",\n                    \"reap((uint256,uint256,address,address[]))\",\n                    \"tear((uint256,uint256,address,address[]))\",\n                    \"getClaimableBulkRewards((uint256,uint256,address,address[]),address)\"\n                ],\n                \"is_impacted_by\": [\n                    \"constructor()\",\n                    \"notifyTransfer(address,address,uint256)\",\n                    \"accrueVault(uint256,address)\",\n                    \"accrueUser(uint256,address,address)\",\n                    \"claimRewards(uint256[],address[],address[],address[])\",\n                    \"claimRewardReferenceEmitting(uint256,address,address,address)\",\n                    \"claimRewardEmitting(uint256,address,address,address)\",\n                    \"claimReward(uint256,address,address,address)\",\n                    \"claimBulkTokensOverMultipleEpochs(uint256,uint256,address,address[],address)\",\n                    \"addBulkRewardsLinearly(uint256,uint256,address,address,uint256)\",\n                    \"addBulkRewards(uint256,uint256,address,address,uint256[])\",\n                    \"addReward(uint256,address,address,uint256)\",\n                    \"reap((uint256,uint256,address,address[]))\",\n                    \"tear((uint256,uint256,address,address[]))\"\n                ]\n            },\n            \"tear((uint256,uint256,address,address[]))\": {\n                \"impacts\": [\n                    \"notifyTransfer(address,address,uint256)\",\n                    \"accrueUser(uint256,address,address)\",\n                    \"getUserTimeLeftToAccrue(uint256,address,address)\",\n                    \"getBalanceAtEpoch(uint256,address,address)\",\n                    \"claimRewards(uint256[],address[],address[],address[])\",\n                    \"claimRewardReferenceEmitting(uint256,address,address,address)\",\n                    \"claimRewardEmitting(uint256,address,address,address)\",\n                    \"claimReward(uint256,address,address,address)\",\n                    \"claimBulkTokensOverMultipleEpochs(uint256,uint256,address,address[],address)\",\n                    \"getUserNextEpochInfo(uint256,address,address,uint256)\",\n                    \"reap((uint256,uint256,address,address[]))\",\n                    \"tear((uint256,uint256,address,address[]))\",\n                    \"getClaimableBulkRewards((uint256,uint256,address,address[]),address)\"\n                ],\n                \"is_impacted_by\": [\n                    \"constructor()\",\n                    \"notifyTransfer(address,address,uint256)\",\n                    \"accrueVault(uint256,address)\",\n                    \"accrueUser(uint256,address,address)\",\n                    \"claimRewards(uint256[],address[],address[],address[])\",\n                    \"claimRewardReferenceEmitting(uint256,address,address,address)\",\n                    \"claimRewardEmitting(uint256,address,address,address)\",\n                    \"claimReward(uint256,address,address,address)\",\n                    \"claimBulkTokensOverMultipleEpochs(uint256,uint256,address,address[],address)\",\n                    \"addBulkRewardsLinearly(uint256,uint256,address,address,uint256)\",\n                    \"addBulkRewards(uint256,uint256,address,address,uint256[])\",\n                    \"addReward(uint256,address,address,uint256)\",\n                    \"reap((uint256,uint256,address,address[]))\",\n                    \"tear((uint256,uint256,address,address[]))\"\n                ]\n            },\n            \"getClaimableBulkRewards((uint256,uint256,address,address[]),address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"constructor()\",\n                    \"notifyTransfer(address,address,uint256)\",\n                    \"accrueVault(uint256,address)\",\n                    \"accrueUser(uint256,address,address)\",\n                    \"claimRewards(uint256[],address[],address[],address[])\",\n                    \"claimRewardReferenceEmitting(uint256,address,address,address)\",\n                    \"claimRewardEmitting(uint256,address,address,address)\",\n                    \"claimReward(uint256,address,address,address)\",\n                    \"claimBulkTokensOverMultipleEpochs(uint256,uint256,address,address[],address)\",\n                    \"addBulkRewardsLinearly(uint256,uint256,address,address,uint256)\",\n                    \"addBulkRewards(uint256,uint256,address,address,uint256[])\",\n                    \"addReward(uint256,address,address,uint256)\",\n                    \"reap((uint256,uint256,address,address[]))\",\n                    \"tear((uint256,uint256,address,address[]))\"\n                ]\n            }\n        },\n        \"BeforeAfter\": {},\n        \"CryticTester\": {\n            \"rewardsManager_accrueUser_clamped(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\",\n                    \"constructor()\"\n                ]\n            },\n            \"rewardsManager_accrueVault_clamped(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\",\n                    \"constructor()\"\n                ]\n            },\n            \"rewardsManager_addReward_clamped(uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\",\n                    \"switch_asset(uint256)\",\n                    \"add_new_asset(uint8)\",\n                    \"constructor()\"\n                ]\n            },\n            \"rewardsManager_claimReward_clamped(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\",\n                    \"switch_asset(uint256)\",\n                    \"add_new_asset(uint8)\",\n                    \"constructor()\"\n                ]\n            },\n            \"rewardsManager_accrueUser(uint256,address,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\",\n                    \"constructor()\"\n                ]\n            },\n            \"rewardsManager_accrueVault(uint256,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\",\n                    \"constructor()\"\n                ]\n            },\n            \"rewardsManager_addBulkRewards(uint256,uint256,address,address,uint256[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\",\n                    \"constructor()\"\n                ]\n            },\n            \"rewardsManager_addBulkRewardsLinearly(uint256,uint256,address,address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\",\n                    \"constructor()\"\n                ]\n            },\n            \"rewardsManager_addReward(uint256,address,address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\",\n                    \"constructor()\"\n                ]\n            },\n            \"rewardsManager_claimBulkTokensOverMultipleEpochs(uint256,uint256,address,address[],address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\",\n                    \"constructor()\"\n                ]\n            },\n            \"rewardsManager_claimReward(uint256,address,address,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\",\n                    \"constructor()\"\n                ]\n            },\n            \"rewardsManager_claimRewardEmitting(uint256,address,address,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\",\n                    \"constructor()\"\n                ]\n            },\n            \"rewardsManager_claimRewardReferenceEmitting(uint256,address,address,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\",\n                    \"constructor()\"\n                ]\n            },\n            \"rewardsManager_claimRewards(uint256[],address[],address[],address[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\",\n                    \"constructor()\"\n                ]\n            },\n            \"rewardsManager_notifyTransfer(address,address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\",\n                    \"constructor()\"\n                ]\n            },\n            \"rewardsManager_reap((uint256,uint256,address,address[]))\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\",\n                    \"constructor()\"\n                ]\n            },\n            \"rewardsManager_tear((uint256,uint256,address,address[]))\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\",\n                    \"constructor()\"\n                ]\n            },\n            \"canary_totalSupply_atEpoch()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"constructor()\"\n                ]\n            },\n            \"solvency_totalSupply_atEpoch()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"constructor()\"\n                ]\n            },\n            \"switchActor(uint256)\": {\n                \"impacts\": [\n                    \"rewardsManager_accrueUser_clamped(uint256)\",\n                    \"rewardsManager_accrueVault_clamped(uint256)\",\n                    \"rewardsManager_addReward_clamped(uint256,uint256)\",\n                    \"rewardsManager_claimReward_clamped(uint256)\",\n                    \"rewardsManager_accrueUser(uint256,address,address)\",\n                    \"rewardsManager_accrueVault(uint256,address)\",\n                    \"rewardsManager_addBulkRewards(uint256,uint256,address,address,uint256[])\",\n                    \"rewardsManager_addBulkRewardsLinearly(uint256,uint256,address,address,uint256)\",\n                    \"rewardsManager_addReward(uint256,address,address,uint256)\",\n                    \"rewardsManager_claimBulkTokensOverMultipleEpochs(uint256,uint256,address,address[],address)\",\n                    \"rewardsManager_claimReward(uint256,address,address,address)\",\n                    \"rewardsManager_claimRewardEmitting(uint256,address,address,address)\",\n                    \"rewardsManager_claimRewardReferenceEmitting(uint256,address,address,address)\",\n                    \"rewardsManager_claimRewards(uint256[],address[],address[],address[])\",\n                    \"rewardsManager_notifyTransfer(address,address,uint256)\",\n                    \"rewardsManager_reap((uint256,uint256,address,address[]))\",\n                    \"rewardsManager_tear((uint256,uint256,address,address[]))\",\n                    \"asset_approve(address,uint128)\",\n                    \"claim_rewards_never_reverts()\"\n                ],\n                \"is_impacted_by\": []\n            },\n            \"switch_asset(uint256)\": {\n                \"impacts\": [\n                    \"rewardsManager_addReward_clamped(uint256,uint256)\",\n                    \"rewardsManager_claimReward_clamped(uint256)\",\n                    \"asset_approve(address,uint128)\",\n                    \"asset_mint(address,uint128)\",\n                    \"claim_rewards_never_reverts()\"\n                ],\n                \"is_impacted_by\": []\n            },\n            \"add_new_asset(uint8)\": {\n                \"impacts\": [\n                    \"rewardsManager_addReward_clamped(uint256,uint256)\",\n                    \"rewardsManager_claimReward_clamped(uint256)\",\n                    \"asset_approve(address,uint128)\",\n                    \"asset_mint(address,uint128)\",\n                    \"claim_rewards_never_reverts()\"\n                ],\n                \"is_impacted_by\": []\n            },\n            \"asset_approve(address,uint128)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\",\n                    \"switch_asset(uint256)\",\n                    \"add_new_asset(uint8)\",\n                    \"constructor()\"\n                ]\n            },\n            \"asset_mint(address,uint128)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switch_asset(uint256)\",\n                    \"add_new_asset(uint8)\",\n                    \"constructor()\"\n                ]\n            },\n            \"claim_rewards_never_reverts()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\",\n                    \"switch_asset(uint256)\",\n                    \"add_new_asset(uint8)\",\n                    \"constructor()\"\n                ]\n            },\n            \"constructor()\": {\n                \"impacts\": [\n                    \"rewardsManager_accrueUser_clamped(uint256)\",\n                    \"rewardsManager_accrueVault_clamped(uint256)\",\n                    \"rewardsManager_addReward_clamped(uint256,uint256)\",\n                    \"rewardsManager_claimReward_clamped(uint256)\",\n                    \"rewardsManager_accrueUser(uint256,address,address)\",\n                    \"rewardsManager_accrueVault(uint256,address)\",\n                    \"rewardsManager_addBulkRewards(uint256,uint256,address,address,uint256[])\",\n                    \"rewardsManager_addBulkRewardsLinearly(uint256,uint256,address,address,uint256)\",\n                    \"rewardsManager_addReward(uint256,address,address,uint256)\",\n                    \"rewardsManager_claimBulkTokensOverMultipleEpochs(uint256,uint256,address,address[],address)\",\n                    \"rewardsManager_claimReward(uint256,address,address,address)\",\n                    \"rewardsManager_claimRewardEmitting(uint256,address,address,address)\",\n                    \"rewardsManager_claimRewardReferenceEmitting(uint256,address,address,address)\",\n                    \"rewardsManager_claimRewards(uint256[],address[],address[],address[])\",\n                    \"rewardsManager_notifyTransfer(address,address,uint256)\",\n                    \"rewardsManager_reap((uint256,uint256,address,address[]))\",\n                    \"rewardsManager_tear((uint256,uint256,address,address[]))\",\n                    \"canary_totalSupply_atEpoch()\",\n                    \"solvency_totalSupply_atEpoch()\",\n                    \"asset_approve(address,uint128)\",\n                    \"asset_mint(address,uint128)\",\n                    \"claim_rewards_never_reverts()\"\n                ],\n                \"is_impacted_by\": []\n            }\n        },\n        \"CryticToFoundry\": {\n            \"excludeArtifacts()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"excludeContracts()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"excludeSenders()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetArtifacts()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetArtifactSelectors()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetContracts()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetSelectors()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetSenders()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetInterfaces()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"failed()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"rewardsManager_accrueUser_clamped(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\",\n                    \"setUp()\"\n                ]\n            },\n            \"rewardsManager_accrueVault_clamped(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\",\n                    \"setUp()\"\n                ]\n            },\n            \"rewardsManager_addReward_clamped(uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\",\n                    \"switch_asset(uint256)\",\n                    \"add_new_asset(uint8)\",\n                    \"setUp()\"\n                ]\n            },\n            \"rewardsManager_claimReward_clamped(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\",\n                    \"switch_asset(uint256)\",\n                    \"add_new_asset(uint8)\",\n                    \"setUp()\"\n                ]\n            },\n            \"rewardsManager_accrueUser(uint256,address,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\",\n                    \"setUp()\"\n                ]\n            },\n            \"rewardsManager_accrueVault(uint256,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\",\n                    \"setUp()\"\n                ]\n            },\n            \"rewardsManager_addBulkRewards(uint256,uint256,address,address,uint256[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\",\n                    \"setUp()\"\n                ]\n            },\n            \"rewardsManager_addBulkRewardsLinearly(uint256,uint256,address,address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\",\n                    \"setUp()\"\n                ]\n            },\n            \"rewardsManager_addReward(uint256,address,address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\",\n                    \"setUp()\"\n                ]\n            },\n            \"rewardsManager_claimBulkTokensOverMultipleEpochs(uint256,uint256,address,address[],address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\",\n                    \"setUp()\"\n                ]\n            },\n            \"rewardsManager_claimReward(uint256,address,address,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\",\n                    \"setUp()\"\n                ]\n            },\n            \"rewardsManager_claimRewardEmitting(uint256,address,address,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\",\n                    \"setUp()\"\n                ]\n            },\n            \"rewardsManager_claimRewardReferenceEmitting(uint256,address,address,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\",\n                    \"setUp()\"\n                ]\n            },\n            \"rewardsManager_claimRewards(uint256[],address[],address[],address[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\",\n                    \"setUp()\"\n                ]\n            },\n            \"rewardsManager_notifyTransfer(address,address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\",\n                    \"setUp()\"\n                ]\n            },\n            \"rewardsManager_reap((uint256,uint256,address,address[]))\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\",\n                    \"setUp()\"\n                ]\n            },\n            \"rewardsManager_tear((uint256,uint256,address,address[]))\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\",\n                    \"setUp()\"\n                ]\n            },\n            \"canary_totalSupply_atEpoch()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"solvency_totalSupply_atEpoch()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"switchActor(uint256)\": {\n                \"impacts\": [\n                    \"rewardsManager_accrueUser_clamped(uint256)\",\n                    \"rewardsManager_accrueVault_clamped(uint256)\",\n                    \"rewardsManager_addReward_clamped(uint256,uint256)\",\n                    \"rewardsManager_claimReward_clamped(uint256)\",\n                    \"rewardsManager_accrueUser(uint256,address,address)\",\n                    \"rewardsManager_accrueVault(uint256,address)\",\n                    \"rewardsManager_addBulkRewards(uint256,uint256,address,address,uint256[])\",\n                    \"rewardsManager_addBulkRewardsLinearly(uint256,uint256,address,address,uint256)\",\n                    \"rewardsManager_addReward(uint256,address,address,uint256)\",\n                    \"rewardsManager_claimBulkTokensOverMultipleEpochs(uint256,uint256,address,address[],address)\",\n                    \"rewardsManager_claimReward(uint256,address,address,address)\",\n                    \"rewardsManager_claimRewardEmitting(uint256,address,address,address)\",\n                    \"rewardsManager_claimRewardReferenceEmitting(uint256,address,address,address)\",\n                    \"rewardsManager_claimRewards(uint256[],address[],address[],address[])\",\n                    \"rewardsManager_notifyTransfer(address,address,uint256)\",\n                    \"rewardsManager_reap((uint256,uint256,address,address[]))\",\n                    \"rewardsManager_tear((uint256,uint256,address,address[]))\",\n                    \"asset_approve(address,uint128)\",\n                    \"claim_rewards_never_reverts()\",\n                    \"test_crytic()\",\n                    \"test_canary_totalSupply_atEpoch_lckx()\"\n                ],\n                \"is_impacted_by\": []\n            },\n            \"switch_asset(uint256)\": {\n                \"impacts\": [\n                    \"rewardsManager_addReward_clamped(uint256,uint256)\",\n                    \"rewardsManager_claimReward_clamped(uint256)\",\n                    \"asset_approve(address,uint128)\",\n                    \"asset_mint(address,uint128)\",\n                    \"claim_rewards_never_reverts()\",\n                    \"test_crytic()\",\n                    \"test_canary_totalSupply_atEpoch_lckx()\"\n                ],\n                \"is_impacted_by\": []\n            },\n            \"add_new_asset(uint8)\": {\n                \"impacts\": [\n                    \"rewardsManager_addReward_clamped(uint256,uint256)\",\n                    \"rewardsManager_claimReward_clamped(uint256)\",\n                    \"asset_approve(address,uint128)\",\n                    \"asset_mint(address,uint128)\",\n                    \"claim_rewards_never_reverts()\",\n                    \"test_crytic()\",\n                    \"test_canary_totalSupply_atEpoch_lckx()\"\n                ],\n                \"is_impacted_by\": []\n            },\n            \"asset_approve(address,uint128)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\",\n                    \"switch_asset(uint256)\",\n                    \"add_new_asset(uint8)\",\n                    \"setUp()\"\n                ]\n            },\n            \"asset_mint(address,uint128)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switch_asset(uint256)\",\n                    \"add_new_asset(uint8)\",\n                    \"setUp()\"\n                ]\n            },\n            \"claim_rewards_never_reverts()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\",\n                    \"switch_asset(uint256)\",\n                    \"add_new_asset(uint8)\",\n                    \"setUp()\"\n                ]\n            },\n            \"setUp()\": {\n                \"impacts\": [\n                    \"rewardsManager_accrueUser_clamped(uint256)\",\n                    \"rewardsManager_accrueVault_clamped(uint256)\",\n                    \"rewardsManager_addReward_clamped(uint256,uint256)\",\n                    \"rewardsManager_claimReward_clamped(uint256)\",\n                    \"rewardsManager_accrueUser(uint256,address,address)\",\n                    \"rewardsManager_accrueVault(uint256,address)\",\n                    \"rewardsManager_addBulkRewards(uint256,uint256,address,address,uint256[])\",\n                    \"rewardsManager_addBulkRewardsLinearly(uint256,uint256,address,address,uint256)\",\n                    \"rewardsManager_addReward(uint256,address,address,uint256)\",\n                    \"rewardsManager_claimBulkTokensOverMultipleEpochs(uint256,uint256,address,address[],address)\",\n                    \"rewardsManager_claimReward(uint256,address,address,address)\",\n                    \"rewardsManager_claimRewardEmitting(uint256,address,address,address)\",\n                    \"rewardsManager_claimRewardReferenceEmitting(uint256,address,address,address)\",\n                    \"rewardsManager_claimRewards(uint256[],address[],address[],address[])\",\n                    \"rewardsManager_notifyTransfer(address,address,uint256)\",\n                    \"rewardsManager_reap((uint256,uint256,address,address[]))\",\n                    \"rewardsManager_tear((uint256,uint256,address,address[]))\",\n                    \"canary_totalSupply_atEpoch()\",\n                    \"solvency_totalSupply_atEpoch()\",\n                    \"asset_approve(address,uint128)\",\n                    \"asset_mint(address,uint128)\",\n                    \"claim_rewards_never_reverts()\",\n                    \"test_crytic()\",\n                    \"test_canary_totalSupply_atEpoch_lckx()\"\n                ],\n                \"is_impacted_by\": []\n            },\n            \"test_crytic()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\",\n                    \"switch_asset(uint256)\",\n                    \"add_new_asset(uint8)\",\n                    \"setUp()\"\n                ]\n            },\n            \"test_canary_totalSupply_atEpoch_lckx()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\",\n                    \"switch_asset(uint256)\",\n                    \"add_new_asset(uint8)\",\n                    \"setUp()\"\n                ]\n            }\n        },\n        \"Properties\": {\n            \"canary_totalSupply_atEpoch()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"solvency_totalSupply_atEpoch()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            }\n        },\n        \"Setup\": {},\n        \"TargetFunctions\": {\n            \"rewardsManager_accrueUser_clamped(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\"\n                ]\n            },\n            \"rewardsManager_accrueVault_clamped(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\"\n                ]\n            },\n            \"rewardsManager_addReward_clamped(uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\",\n                    \"switch_asset(uint256)\",\n                    \"add_new_asset(uint8)\"\n                ]\n            },\n            \"rewardsManager_claimReward_clamped(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\",\n                    \"switch_asset(uint256)\",\n                    \"add_new_asset(uint8)\"\n                ]\n            },\n            \"rewardsManager_accrueUser(uint256,address,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\"\n                ]\n            },\n            \"rewardsManager_accrueVault(uint256,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\"\n                ]\n            },\n            \"rewardsManager_addBulkRewards(uint256,uint256,address,address,uint256[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\"\n                ]\n            },\n            \"rewardsManager_addBulkRewardsLinearly(uint256,uint256,address,address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\"\n                ]\n            },\n            \"rewardsManager_addReward(uint256,address,address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\"\n                ]\n            },\n            \"rewardsManager_claimBulkTokensOverMultipleEpochs(uint256,uint256,address,address[],address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\"\n                ]\n            },\n            \"rewardsManager_claimReward(uint256,address,address,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\"\n                ]\n            },\n            \"rewardsManager_claimRewardEmitting(uint256,address,address,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\"\n                ]\n            },\n            \"rewardsManager_claimRewardReferenceEmitting(uint256,address,address,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\"\n                ]\n            },\n            \"rewardsManager_claimRewards(uint256[],address[],address[],address[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\"\n                ]\n            },\n            \"rewardsManager_notifyTransfer(address,address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\"\n                ]\n            },\n            \"rewardsManager_reap((uint256,uint256,address,address[]))\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\"\n                ]\n            },\n            \"rewardsManager_tear((uint256,uint256,address,address[]))\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\"\n                ]\n            },\n            \"canary_totalSupply_atEpoch()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"solvency_totalSupply_atEpoch()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"switchActor(uint256)\": {\n                \"impacts\": [\n                    \"rewardsManager_accrueUser_clamped(uint256)\",\n                    \"rewardsManager_accrueVault_clamped(uint256)\",\n                    \"rewardsManager_addReward_clamped(uint256,uint256)\",\n                    \"rewardsManager_claimReward_clamped(uint256)\",\n                    \"rewardsManager_accrueUser(uint256,address,address)\",\n                    \"rewardsManager_accrueVault(uint256,address)\",\n                    \"rewardsManager_addBulkRewards(uint256,uint256,address,address,uint256[])\",\n                    \"rewardsManager_addBulkRewardsLinearly(uint256,uint256,address,address,uint256)\",\n                    \"rewardsManager_addReward(uint256,address,address,uint256)\",\n                    \"rewardsManager_claimBulkTokensOverMultipleEpochs(uint256,uint256,address,address[],address)\",\n                    \"rewardsManager_claimReward(uint256,address,address,address)\",\n                    \"rewardsManager_claimRewardEmitting(uint256,address,address,address)\",\n                    \"rewardsManager_claimRewardReferenceEmitting(uint256,address,address,address)\",\n                    \"rewardsManager_claimRewards(uint256[],address[],address[],address[])\",\n                    \"rewardsManager_notifyTransfer(address,address,uint256)\",\n                    \"rewardsManager_reap((uint256,uint256,address,address[]))\",\n                    \"rewardsManager_tear((uint256,uint256,address,address[]))\",\n                    \"asset_approve(address,uint128)\",\n                    \"claim_rewards_never_reverts()\"\n                ],\n                \"is_impacted_by\": []\n            },\n            \"switch_asset(uint256)\": {\n                \"impacts\": [\n                    \"rewardsManager_addReward_clamped(uint256,uint256)\",\n                    \"rewardsManager_claimReward_clamped(uint256)\",\n                    \"asset_approve(address,uint128)\",\n                    \"asset_mint(address,uint128)\",\n                    \"claim_rewards_never_reverts()\"\n                ],\n                \"is_impacted_by\": []\n            },\n            \"add_new_asset(uint8)\": {\n                \"impacts\": [\n                    \"rewardsManager_addReward_clamped(uint256,uint256)\",\n                    \"rewardsManager_claimReward_clamped(uint256)\",\n                    \"asset_approve(address,uint128)\",\n                    \"asset_mint(address,uint128)\",\n                    \"claim_rewards_never_reverts()\"\n                ],\n                \"is_impacted_by\": []\n            },\n            \"asset_approve(address,uint128)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\",\n                    \"switch_asset(uint256)\",\n                    \"add_new_asset(uint8)\"\n                ]\n            },\n            \"asset_mint(address,uint128)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switch_asset(uint256)\",\n                    \"add_new_asset(uint8)\"\n                ]\n            },\n            \"claim_rewards_never_reverts()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\",\n                    \"switch_asset(uint256)\",\n                    \"add_new_asset(uint8)\"\n                ]\n            }\n        },\n        \"AdminTargets\": {\n            \"canary_totalSupply_atEpoch()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"solvency_totalSupply_atEpoch()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            }\n        },\n        \"DoomsdayTargets\": {\n            \"canary_totalSupply_atEpoch()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"solvency_totalSupply_atEpoch()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"claim_rewards_never_reverts()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            }\n        },\n        \"ManagersTargets\": {\n            \"canary_totalSupply_atEpoch()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"solvency_totalSupply_atEpoch()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"switchActor(uint256)\": {\n                \"impacts\": [\n                    \"asset_approve(address,uint128)\"\n                ],\n                \"is_impacted_by\": []\n            },\n            \"switch_asset(uint256)\": {\n                \"impacts\": [\n                    \"asset_approve(address,uint128)\",\n                    \"asset_mint(address,uint128)\"\n                ],\n                \"is_impacted_by\": []\n            },\n            \"add_new_asset(uint8)\": {\n                \"impacts\": [\n                    \"asset_approve(address,uint128)\",\n                    \"asset_mint(address,uint128)\"\n                ],\n                \"is_impacted_by\": []\n            },\n            \"asset_approve(address,uint128)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\",\n                    \"switch_asset(uint256)\",\n                    \"add_new_asset(uint8)\"\n                ]\n            },\n            \"asset_mint(address,uint128)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switch_asset(uint256)\",\n                    \"add_new_asset(uint8)\"\n                ]\n            }\n        },\n        \"RewardsManagerTargets\": {\n            \"canary_totalSupply_atEpoch()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"solvency_totalSupply_atEpoch()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"rewardsManager_accrueUser_clamped(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"rewardsManager_accrueVault_clamped(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"rewardsManager_addReward_clamped(uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"rewardsManager_claimReward_clamped(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"rewardsManager_accrueUser(uint256,address,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"rewardsManager_accrueVault(uint256,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"rewardsManager_addBulkRewards(uint256,uint256,address,address,uint256[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"rewardsManager_addBulkRewardsLinearly(uint256,uint256,address,address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"rewardsManager_addReward(uint256,address,address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"rewardsManager_claimBulkTokensOverMultipleEpochs(uint256,uint256,address,address[],address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"rewardsManager_claimReward(uint256,address,address,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"rewardsManager_claimRewardEmitting(uint256,address,address,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"rewardsManager_claimRewardReferenceEmitting(uint256,address,address,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"rewardsManager_claimRewards(uint256[],address[],address[],address[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"rewardsManager_notifyTransfer(address,address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"rewardsManager_reap((uint256,uint256,address,address[]))\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"rewardsManager_tear((uint256,uint256,address,address[]))\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            }\n        }\n    },\n    \"constructors\": {\n        \"ReentrancyGuard\": \"constructor()\",\n        \"ActorManager\": \"constructor()\",\n        \"ERC20\": \"constructor(string,string,uint8)\",\n        \"MockERC20\": \"constructor(string,string,uint8)\",\n        \"RewardsManager\": \"constructor()\",\n        \"BeforeAfter\": \"constructor()\",\n        \"CryticTester\": \"constructor()\",\n        \"CryticToFoundry\": \"constructor()\",\n        \"Properties\": \"constructor()\",\n        \"Setup\": \"constructor()\",\n        \"TargetFunctions\": \"constructor()\",\n        \"AdminTargets\": \"constructor()\",\n        \"DoomsdayTargets\": \"constructor()\",\n        \"ManagersTargets\": \"constructor()\",\n        \"RewardsManagerTargets\": \"constructor()\"\n    },\n    \"have_external_calls\": {\n        \"FoundryAsserts\": [\n            \"failed()\"\n        ],\n        \"StdAssertions\": [\n            \"failed()\"\n        ],\n        \"Test\": [\n            \"failed()\"\n        ],\n        \"MockERC721\": [\n            \"safeTransferFrom(address,address,uint256,bytes)\",\n            \"safeTransferFrom(address,address,uint256)\"\n        ],\n        \"CounterScript\": [\n            \"run()\"\n        ],\n        \"RewardsManager\": [\n            \"claimBulkTokensOverMultipleEpochs(uint256,uint256,address,address[],address)\",\n            \"tear((uint256,uint256,address,address[]))\",\n            \"reap((uint256,uint256,address,address[]))\",\n            \"claimRewardReferenceEmitting(uint256,address,address,address)\",\n            \"claimRewardEmitting(uint256,address,address,address)\",\n            \"addBulkRewards(uint256,uint256,address,address,uint256[])\",\n            \"addBulkRewardsLinearly(uint256,uint256,address,address,uint256)\",\n            \"claimReward(uint256,address,address,address)\",\n            \"claimRewards(uint256[],address[],address[],address[])\",\n            \"addReward(uint256,address,address,uint256)\"\n        ],\n        \"CryticTester\": [\n            \"rewardsManager_accrueVault(uint256,address)\",\n            \"rewardsManager_reap((uint256,uint256,address,address[]))\",\n            \"solvency_totalSupply_atEpoch()\",\n            \"rewardsManager_claimReward_clamped(uint256)\",\n            \"rewardsManager_claimReward(uint256,address,address,address)\",\n            \"rewardsManager_tear((uint256,uint256,address,address[]))\",\n            \"rewardsManager_notifyTransfer(address,address,uint256)\",\n            \"asset_approve(address,uint128)\",\n            \"rewardsManager_claimRewardReferenceEmitting(uint256,address,address,address)\",\n            \"add_new_asset(uint8)\",\n            \"rewardsManager_accrueUser_clamped(uint256)\",\n            \"constructor()\",\n            \"rewardsManager_accrueUser(uint256,address,address)\",\n            \"claim_rewards_never_reverts()\",\n            \"rewardsManager_claimBulkTokensOverMultipleEpochs(uint256,uint256,address,address[],address)\",\n            \"rewardsManager_addReward_clamped(uint256,uint256)\",\n            \"rewardsManager_accrueVault_clamped(uint256)\",\n            \"asset_mint(address,uint128)\",\n            \"rewardsManager_addReward(uint256,address,address,uint256)\",\n            \"rewardsManager_claimRewards(uint256[],address[],address[],address[])\",\n            \"canary_totalSupply_atEpoch()\",\n            \"rewardsManager_addBulkRewardsLinearly(uint256,uint256,address,address,uint256)\",\n            \"rewardsManager_addBulkRewards(uint256,uint256,address,address,uint256[])\",\n            \"switch_asset(uint256)\",\n            \"switchActor(uint256)\",\n            \"rewardsManager_claimRewardEmitting(uint256,address,address,address)\"\n        ],\n        \"CryticToFoundry\": [\n            \"rewardsManager_accrueVault(uint256,address)\",\n            \"rewardsManager_reap((uint256,uint256,address,address[]))\",\n            \"solvency_totalSupply_atEpoch()\",\n            \"rewardsManager_claimReward_clamped(uint256)\",\n            \"rewardsManager_claimReward(uint256,address,address,address)\",\n            \"rewardsManager_tear((uint256,uint256,address,address[]))\",\n            \"rewardsManager_notifyTransfer(address,address,uint256)\",\n            \"asset_approve(address,uint128)\",\n            \"failed()\",\n            \"rewardsManager_claimRewardReferenceEmitting(uint256,address,address,address)\",\n            \"add_new_asset(uint8)\",\n            \"rewardsManager_accrueUser_clamped(uint256)\",\n            \"rewardsManager_accrueUser(uint256,address,address)\",\n            \"test_crytic()\",\n            \"claim_rewards_never_reverts()\",\n            \"rewardsManager_claimBulkTokensOverMultipleEpochs(uint256,uint256,address,address[],address)\",\n            \"rewardsManager_addReward_clamped(uint256,uint256)\",\n            \"test_canary_totalSupply_atEpoch_lckx()\",\n            \"rewardsManager_accrueVault_clamped(uint256)\",\n            \"asset_mint(address,uint128)\",\n            \"rewardsManager_addReward(uint256,address,address,uint256)\",\n            \"rewardsManager_claimRewards(uint256[],address[],address[],address[])\",\n            \"canary_totalSupply_atEpoch()\",\n            \"rewardsManager_addBulkRewardsLinearly(uint256,uint256,address,address,uint256)\",\n            \"rewardsManager_addBulkRewards(uint256,uint256,address,address,uint256[])\",\n            \"switch_asset(uint256)\",\n            \"setUp()\",\n            \"switchActor(uint256)\",\n            \"rewardsManager_claimRewardEmitting(uint256,address,address,address)\"\n        ],\n        \"Properties\": [\n            \"canary_totalSupply_atEpoch()\",\n            \"solvency_totalSupply_atEpoch()\"\n        ],\n        \"TargetFunctions\": [\n            \"rewardsManager_accrueVault(uint256,address)\",\n            \"rewardsManager_reap((uint256,uint256,address,address[]))\",\n            \"solvency_totalSupply_atEpoch()\",\n            \"rewardsManager_claimReward_clamped(uint256)\",\n            \"rewardsManager_claimReward(uint256,address,address,address)\",\n            \"rewardsManager_tear((uint256,uint256,address,address[]))\",\n            \"rewardsManager_notifyTransfer(address,address,uint256)\",\n            \"asset_approve(address,uint128)\",\n            \"rewardsManager_claimRewardReferenceEmitting(uint256,address,address,address)\",\n            \"add_new_asset(uint8)\",\n            \"rewardsManager_accrueUser_clamped(uint256)\",\n            \"rewardsManager_accrueUser(uint256,address,address)\",\n            \"claim_rewards_never_reverts()\",\n            \"rewardsManager_claimBulkTokensOverMultipleEpochs(uint256,uint256,address,address[],address)\",\n            \"rewardsManager_addReward_clamped(uint256,uint256)\",\n            \"rewardsManager_accrueVault_clamped(uint256)\",\n            \"asset_mint(address,uint128)\",\n            \"rewardsManager_addReward(uint256,address,address,uint256)\",\n            \"rewardsManager_claimRewards(uint256[],address[],address[],address[])\",\n            \"canary_totalSupply_atEpoch()\",\n            \"rewardsManager_addBulkRewardsLinearly(uint256,uint256,address,address,uint256)\",\n            \"rewardsManager_addBulkRewards(uint256,uint256,address,address,uint256[])\",\n            \"switch_asset(uint256)\",\n            \"switchActor(uint256)\",\n            \"rewardsManager_claimRewardEmitting(uint256,address,address,address)\"\n        ],\n        \"AdminTargets\": [\n            \"canary_totalSupply_atEpoch()\",\n            \"solvency_totalSupply_atEpoch()\"\n        ],\n        \"DoomsdayTargets\": [\n            \"canary_totalSupply_atEpoch()\",\n            \"solvency_totalSupply_atEpoch()\",\n            \"claim_rewards_never_reverts()\"\n        ],\n        \"ManagersTargets\": [\n            \"canary_totalSupply_atEpoch()\",\n            \"solvency_totalSupply_atEpoch()\",\n            \"switch_asset(uint256)\",\n            \"asset_approve(address,uint128)\",\n            \"switchActor(uint256)\",\n            \"asset_mint(address,uint128)\",\n            \"add_new_asset(uint8)\"\n        ],\n        \"RewardsManagerTargets\": [\n            \"solvency_totalSupply_atEpoch()\",\n            \"rewardsManager_accrueVault(uint256,address)\",\n            \"rewardsManager_reap((uint256,uint256,address,address[]))\",\n            \"rewardsManager_claimReward_clamped(uint256)\",\n            \"rewardsManager_claimReward(uint256,address,address,address)\",\n            \"rewardsManager_tear((uint256,uint256,address,address[]))\",\n            \"rewardsManager_notifyTransfer(address,address,uint256)\",\n            \"rewardsManager_claimRewardReferenceEmitting(uint256,address,address,address)\",\n            \"rewardsManager_accrueUser_clamped(uint256)\",\n            \"rewardsManager_accrueUser(uint256,address,address)\",\n            \"rewardsManager_claimBulkTokensOverMultipleEpochs(uint256,uint256,address,address[],address)\",\n            \"rewardsManager_addReward_clamped(uint256,uint256)\",\n            \"rewardsManager_accrueVault_clamped(uint256)\",\n            \"rewardsManager_addReward(uint256,address,address,uint256)\",\n            \"rewardsManager_claimRewards(uint256[],address[],address[],address[])\",\n            \"canary_totalSupply_atEpoch()\",\n            \"rewardsManager_addBulkRewardsLinearly(uint256,uint256,address,address,uint256)\",\n            \"rewardsManager_addBulkRewards(uint256,uint256,address,address,uint256[])\",\n            \"rewardsManager_claimRewardEmitting(uint256,address,address,address)\"\n        ]\n    },\n    \"use_balance\": {},\n    \"solc_versions\": [\n        \"0.8.24\"\n    ],\n    \"with_fallback\": [],\n    \"with_receive\": []\n}", "markdown": "{\n    \"payable\": {\n        \"IERC721\": [\n            \"safeTransferFrom(address,address,uint256,bytes)\",\n            \"safeTransferFrom(address,address,uint256)\",\n            \"transferFrom(address,address,uint256)\",\n            \"approve(address,uint256)\"\n        ],\n        \"IERC721Metadata\": [\n            \"safeTransferFrom(address,address,uint256,bytes)\",\n            \"safeTransferFrom(address,address,uint256)\",\n            \"transferFrom(address,address,uint256)\",\n            \"approve(address,uint256)\"\n        ],\n        \"IERC721Enumerable\": [\n            \"safeTransferFrom(address,address,uint256,bytes)\",\n            \"safeTransferFrom(address,address,uint256)\",\n            \"transferFrom(address,address,uint256)\",\n            \"approve(address,uint256)\"\n        ],\n        \"IMulticall3\": [\n            \"aggregate((address,bytes)[])\",\n            \"aggregate3((address,bool,bytes)[])\",\n            \"aggregate3Value((address,bool,uint256,bytes)[])\",\n            \"blockAndAggregate((address,bytes)[])\",\n            \"tryAggregate(bool,(address,bytes)[])\",\n            \"tryBlockAndAggregate(bool,(address,bytes)[])\"\n        ],\n        \"MockERC721\": [\n            \"approve(address,uint256)\",\n            \"transferFrom(address,address,uint256)\",\n            \"safeTransferFrom(address,address,uint256)\",\n            \"safeTransferFrom(address,address,uint256,bytes)\"\n        ],\n        \"CryticTester\": [\n            \"constructor()\"\n        ]\n    },\n    \"timestamp\": {\n        \"MockERC20\": [\n            \"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\"\n        ],\n        \"ERC20\": [\n            \"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\"\n        ],\n        \"RewardsManager\": [\n            \"constructor()\",\n            \"currentEpoch()\",\n            \"notifyTransfer(address,address,uint256)\",\n            \"accrueVault(uint256,address)\",\n            \"getVaultTimeLeftToAccrue(uint256,address)\",\n            \"getTotalSupplyAtEpoch(uint256,address)\",\n            \"accrueUser(uint256,address,address)\",\n            \"getUserTimeLeftToAccrue(uint256,address,address)\",\n            \"getBalanceAtEpoch(uint256,address,address)\",\n            \"claimRewards(uint256[],address[],address[],address[])\",\n            \"claimRewardReferenceEmitting(uint256,address,address,address)\",\n            \"claimRewardEmitting(uint256,address,address,address)\",\n            \"claimReward(uint256,address,address,address)\",\n            \"claimBulkTokensOverMultipleEpochs(uint256,uint256,address,address[],address)\",\n            \"addBulkRewardsLinearly(uint256,uint256,address,address,uint256)\",\n            \"addBulkRewards(uint256,uint256,address,address,uint256[])\",\n            \"addReward(uint256,address,address,uint256)\",\n            \"getUserNextEpochInfo(uint256,address,address,uint256)\",\n            \"getVaultNextEpochInfo(uint256,address,uint256)\",\n            \"reap((uint256,uint256,address,address[]))\",\n            \"tear((uint256,uint256,address,address[]))\",\n            \"getClaimableBulkRewards((uint256,uint256,address,address[]),address)\"\n        ],\n        \"CryticToFoundry\": [\n            \"test_canary_totalSupply_atEpoch_lckx()\"\n        ]\n    },\n    \"block_number\": {\n        \"CryticToFoundry\": [\n            \"test_canary_totalSupply_atEpoch_lckx()\"\n        ]\n    },\n    \"msg_sender\": {\n        \"MockERC20\": [\n            \"approve(address,uint256)\",\n            \"transfer(address,uint256)\",\n            \"transferFrom(address,address,uint256)\"\n        ],\n        \"MockERC721\": [\n            \"approve(address,uint256)\",\n            \"setApprovalForAll(address,bool)\",\n            \"transferFrom(address,address,uint256)\",\n            \"safeTransferFrom(address,address,uint256)\",\n            \"safeTransferFrom(address,address,uint256,bytes)\"\n        ],\n        \"ERC20\": [\n            \"approve(address,uint256)\",\n            \"transfer(address,uint256)\",\n            \"transferFrom(address,address,uint256)\"\n        ],\n        \"RewardsManager\": [\n            \"notifyTransfer(address,address,uint256)\",\n            \"addBulkRewardsLinearly(uint256,uint256,address,address,uint256)\",\n            \"addBulkRewards(uint256,uint256,address,address,uint256[])\",\n            \"addReward(uint256,address,address,uint256)\",\n            \"reap((uint256,uint256,address,address[]))\",\n            \"tear((uint256,uint256,address,address[]))\"\n        ]\n    },\n    \"msg_gas\": {},\n    \"assert\": {\n        \"CryticTester\": {\n            \"canary_totalSupply_atEpoch()\": [\n                {\n                    \"start\": 1060,\n                    \"length\": 13,\n                    \"filename_relative\": \"lib/chimera/src/CryticAsserts.sol\",\n                    \"filename_absolute\": \"/Users/cerberus/Desktop/Consulting/rewards-manager-2/lib/chimera/src/CryticAsserts.sol\",\n                    \"filename_short\": \"lib/chimera/src/CryticAsserts.sol\",\n                    \"is_dependency\": true,\n                    \"lines\": [\n                        40\n                    ],\n                    \"starting_column\": 13,\n                    \"ending_column\": 26\n                }\n            ],\n            \"solvency_totalSupply_atEpoch()\": [\n                {\n                    \"start\": 499,\n                    \"length\": 13,\n                    \"filename_relative\": \"lib/chimera/src/CryticAsserts.sol\",\n                    \"filename_absolute\": \"/Users/cerberus/Desktop/Consulting/rewards-manager-2/lib/chimera/src/CryticAsserts.sol\",\n                    \"filename_short\": \"lib/chimera/src/CryticAsserts.sol\",\n                    \"is_dependency\": true,\n                    \"lines\": [\n                        19\n                    ],\n                    \"starting_column\": 13,\n                    \"ending_column\": 26\n                }\n            ]\n        }\n    },\n    \"constant_functions\": {\n        \"FoundryAsserts\": [\n            \"excludeArtifacts()\",\n            \"excludeContracts()\",\n            \"excludeSenders()\",\n            \"targetArtifacts()\",\n            \"targetArtifactSelectors()\",\n            \"targetContracts()\",\n            \"targetSelectors()\",\n            \"targetSenders()\",\n            \"targetInterfaces()\",\n            \"failed()\",\n            \"IS_TEST()\"\n        ],\n        \"Script\": [\n            \"IS_SCRIPT()\"\n        ],\n        \"StdAssertions\": [\n            \"failed()\"\n        ],\n        \"stdError\": [\n            \"assertionError()\",\n            \"arithmeticError()\",\n            \"divisionError()\",\n            \"enumConversionError()\",\n            \"encodeStorageError()\",\n            \"popError()\",\n            \"indexOOBError()\",\n            \"memOverflowError()\",\n            \"zeroVarError()\"\n        ],\n        \"StdInvariant\": [\n            \"excludeArtifacts()\",\n            \"excludeContracts()\",\n            \"excludeSenders()\",\n            \"targetArtifacts()\",\n            \"targetArtifactSelectors()\",\n            \"targetContracts()\",\n            \"targetSelectors()\",\n            \"targetSenders()\",\n            \"targetInterfaces()\"\n        ],\n        \"Test\": [\n            \"excludeArtifacts()\",\n            \"excludeContracts()\",\n            \"excludeSenders()\",\n            \"targetArtifacts()\",\n            \"targetArtifactSelectors()\",\n            \"targetContracts()\",\n            \"targetSelectors()\",\n            \"targetSenders()\",\n            \"targetInterfaces()\",\n            \"failed()\",\n            \"IS_TEST()\"\n        ],\n        \"VmSafe\": [\n            \"envAddress(string)\",\n            \"envAddress(string,string)\",\n            \"envBool(string)\",\n            \"envBool(string,string)\",\n            \"envBytes32(string)\",\n            \"envBytes32(string,string)\",\n            \"envBytes(string)\",\n            \"envBytes(string,string)\",\n            \"envInt(string)\",\n            \"envInt(string,string)\",\n            \"envOr(string,bool)\",\n            \"envOr(string,uint256)\",\n            \"envOr(string,string,address[])\",\n            \"envOr(string,string,bytes32[])\",\n            \"envOr(string,string,string[])\",\n            \"envOr(string,string,bytes[])\",\n            \"envOr(string,int256)\",\n            \"envOr(string,address)\",\n            \"envOr(string,bytes32)\",\n            \"envOr(string,string)\",\n            \"envOr(string,bytes)\",\n            \"envOr(string,string,bool[])\",\n            \"envOr(string,string,uint256[])\",\n            \"envOr(string,string,int256[])\",\n            \"envString(string)\",\n            \"envString(string,string)\",\n            \"envUint(string)\",\n            \"envUint(string,string)\",\n            \"addr(uint256)\",\n            \"getBlockNumber()\",\n            \"getBlockTimestamp()\",\n            \"getNonce(address)\",\n            \"load(address,bytes32)\",\n            \"signP256(uint256,bytes32)\",\n            \"sign(uint256,bytes32)\",\n            \"fsMetadata(string)\",\n            \"getCode(string)\",\n            \"getDeployedCode(string)\",\n            \"projectRoot()\",\n            \"readDir(string)\",\n            \"readDir(string,uint64)\",\n            \"readDir(string,uint64,bool)\",\n            \"readFile(string)\",\n            \"readFileBinary(string)\",\n            \"readLine(string)\",\n            \"readLink(string)\",\n            \"keyExists(string,string)\",\n            \"keyExistsJson(string,string)\",\n            \"parseJsonAddress(string,string)\",\n            \"parseJsonAddressArray(string,string)\",\n            \"parseJsonBool(string,string)\",\n            \"parseJsonBoolArray(string,string)\",\n            \"parseJsonBytes(string,string)\",\n            \"parseJsonBytes32(string,string)\",\n            \"parseJsonBytes32Array(string,string)\",\n            \"parseJsonBytesArray(string,string)\",\n            \"parseJsonInt(string,string)\",\n            \"parseJsonIntArray(string,string)\",\n            \"parseJsonKeys(string,string)\",\n            \"parseJsonString(string,string)\",\n            \"parseJsonStringArray(string,string)\",\n            \"parseJsonUint(string,string)\",\n            \"parseJsonUintArray(string,string)\",\n            \"parseJson(string)\",\n            \"parseJson(string,string)\",\n            \"parseAddress(string)\",\n            \"parseBool(string)\",\n            \"parseBytes(string)\",\n            \"parseBytes32(string)\",\n            \"parseInt(string)\",\n            \"parseUint(string)\",\n            \"replace(string,string,string)\",\n            \"split(string,string)\",\n            \"toLowercase(string)\",\n            \"toString(address)\",\n            \"toString(bytes)\",\n            \"toString(bytes32)\",\n            \"toString(bool)\",\n            \"toString(uint256)\",\n            \"toString(int256)\",\n            \"toUppercase(string)\",\n            \"trim(string)\",\n            \"assertApproxEqAbsDecimal(uint256,uint256,uint256,uint256)\",\n            \"assertApproxEqAbsDecimal(uint256,uint256,uint256,uint256,string)\",\n            \"assertApproxEqAbsDecimal(int256,int256,uint256,uint256)\",\n            \"assertApproxEqAbsDecimal(int256,int256,uint256,uint256,string)\",\n            \"assertApproxEqAbs(uint256,uint256,uint256)\",\n            \"assertApproxEqAbs(uint256,uint256,uint256,string)\",\n            \"assertApproxEqAbs(int256,int256,uint256)\",\n            \"assertApproxEqAbs(int256,int256,uint256,string)\",\n            \"assertApproxEqRelDecimal(uint256,uint256,uint256,uint256)\",\n            \"assertApproxEqRelDecimal(uint256,uint256,uint256,uint256,string)\",\n            \"assertApproxEqRelDecimal(int256,int256,uint256,uint256)\",\n            \"assertApproxEqRelDecimal(int256,int256,uint256,uint256,string)\",\n            \"assertApproxEqRel(uint256,uint256,uint256)\",\n            \"assertApproxEqRel(uint256,uint256,uint256,string)\",\n            \"assertApproxEqRel(int256,int256,uint256)\",\n            \"assertApproxEqRel(int256,int256,uint256,string)\",\n            \"assertEqDecimal(uint256,uint256,uint256)\",\n            \"assertEqDecimal(uint256,uint256,uint256,string)\",\n            \"assertEqDecimal(int256,int256,uint256)\",\n            \"assertEqDecimal(int256,int256,uint256,string)\",\n            \"assertEq(bool,bool)\",\n            \"assertEq(bool,bool,string)\",\n            \"assertEq(string,string)\",\n            \"assertEq(string,string,string)\",\n            \"assertEq(bytes,bytes)\",\n            \"assertEq(bytes,bytes,string)\",\n            \"assertEq(bool[],bool[])\",\n            \"assertEq(bool[],bool[],string)\",\n            \"assertEq(uint256[],uint256[])\",\n            \"assertEq(uint256[],uint256[],string)\",\n            \"assertEq(int256[],int256[])\",\n            \"assertEq(int256[],int256[],string)\",\n            \"assertEq(uint256,uint256)\",\n            \"assertEq(address[],address[])\",\n            \"assertEq(address[],address[],string)\",\n            \"assertEq(bytes32[],bytes32[])\",\n            \"assertEq(bytes32[],bytes32[],string)\",\n            \"assertEq(string[],string[])\",\n            \"assertEq(string[],string[],string)\",\n            \"assertEq(bytes[],bytes[])\",\n            \"assertEq(bytes[],bytes[],string)\",\n            \"assertEq(uint256,uint256,string)\",\n            \"assertEq(int256,int256)\",\n            \"assertEq(int256,int256,string)\",\n            \"assertEq(address,address)\",\n            \"assertEq(address,address,string)\",\n            \"assertEq(bytes32,bytes32)\",\n            \"assertEq(bytes32,bytes32,string)\",\n            \"assertFalse(bool)\",\n            \"assertFalse(bool,string)\",\n            \"assertGeDecimal(uint256,uint256,uint256)\",\n            \"assertGeDecimal(uint256,uint256,uint256,string)\",\n            \"assertGeDecimal(int256,int256,uint256)\",\n            \"assertGeDecimal(int256,int256,uint256,string)\",\n            \"assertGe(uint256,uint256)\",\n            \"assertGe(uint256,uint256,string)\",\n            \"assertGe(int256,int256)\",\n            \"assertGe(int256,int256,string)\",\n            \"assertGtDecimal(uint256,uint256,uint256)\",\n            \"assertGtDecimal(uint256,uint256,uint256,string)\",\n            \"assertGtDecimal(int256,int256,uint256)\",\n            \"assertGtDecimal(int256,int256,uint256,string)\",\n            \"assertGt(uint256,uint256)\",\n            \"assertGt(uint256,uint256,string)\",\n            \"assertGt(int256,int256)\",\n            \"assertGt(int256,int256,string)\",\n            \"assertLeDecimal(uint256,uint256,uint256)\",\n            \"assertLeDecimal(uint256,uint256,uint256,string)\",\n            \"assertLeDecimal(int256,int256,uint256)\",\n            \"assertLeDecimal(int256,int256,uint256,string)\",\n            \"assertLe(uint256,uint256)\",\n            \"assertLe(uint256,uint256,string)\",\n            \"assertLe(int256,int256)\",\n            \"assertLe(int256,int256,string)\",\n            \"assertLtDecimal(uint256,uint256,uint256)\",\n            \"assertLtDecimal(uint256,uint256,uint256,string)\",\n            \"assertLtDecimal(int256,int256,uint256)\",\n            \"assertLtDecimal(int256,int256,uint256,string)\",\n            \"assertLt(uint256,uint256)\",\n            \"assertLt(uint256,uint256,string)\",\n            \"assertLt(int256,int256)\",\n            \"assertLt(int256,int256,string)\",\n            \"assertNotEqDecimal(uint256,uint256,uint256)\",\n            \"assertNotEqDecimal(uint256,uint256,uint256,string)\",\n            \"assertNotEqDecimal(int256,int256,uint256)\",\n            \"assertNotEqDecimal(int256,int256,uint256,string)\",\n            \"assertNotEq(bool,bool)\",\n            \"assertNotEq(bool,bool,string)\",\n            \"assertNotEq(string,string)\",\n            \"assertNotEq(string,string,string)\",\n            \"assertNotEq(bytes,bytes)\",\n            \"assertNotEq(bytes,bytes,string)\",\n            \"assertNotEq(bool[],bool[])\",\n            \"assertNotEq(bool[],bool[],string)\",\n            \"assertNotEq(uint256[],uint256[])\",\n            \"assertNotEq(uint256[],uint256[],string)\",\n            \"assertNotEq(int256[],int256[])\",\n            \"assertNotEq(int256[],int256[],string)\",\n            \"assertNotEq(uint256,uint256)\",\n            \"assertNotEq(address[],address[])\",\n            \"assertNotEq(address[],address[],string)\",\n            \"assertNotEq(bytes32[],bytes32[])\",\n            \"assertNotEq(bytes32[],bytes32[],string)\",\n            \"assertNotEq(string[],string[])\",\n            \"assertNotEq(string[],string[],string)\",\n            \"assertNotEq(bytes[],bytes[])\",\n            \"assertNotEq(bytes[],bytes[],string)\",\n            \"assertNotEq(uint256,uint256,string)\",\n            \"assertNotEq(int256,int256)\",\n            \"assertNotEq(int256,int256,string)\",\n            \"assertNotEq(address,address)\",\n            \"assertNotEq(address,address,string)\",\n            \"assertNotEq(bytes32,bytes32)\",\n            \"assertNotEq(bytes32,bytes32,string)\",\n            \"assertTrue(bool)\",\n            \"assertTrue(bool,string)\",\n            \"assume(bool)\",\n            \"rpcUrl(string)\",\n            \"rpcUrlStructs()\",\n            \"rpcUrls()\",\n            \"keyExistsToml(string,string)\",\n            \"parseTomlAddress(string,string)\",\n            \"parseTomlAddressArray(string,string)\",\n            \"parseTomlBool(string,string)\",\n            \"parseTomlBoolArray(string,string)\",\n            \"parseTomlBytes(string,string)\",\n            \"parseTomlBytes32(string,string)\",\n            \"parseTomlBytes32Array(string,string)\",\n            \"parseTomlBytesArray(string,string)\",\n            \"parseTomlInt(string,string)\",\n            \"parseTomlIntArray(string,string)\",\n            \"parseTomlKeys(string,string)\",\n            \"parseTomlString(string,string)\",\n            \"parseTomlStringArray(string,string)\",\n            \"parseTomlUint(string,string)\",\n            \"parseTomlUintArray(string,string)\",\n            \"parseToml(string)\",\n            \"parseToml(string,string)\",\n            \"computeCreate2Address(bytes32,bytes32,address)\",\n            \"computeCreate2Address(bytes32,bytes32)\",\n            \"computeCreateAddress(address,uint256)\",\n            \"deriveKey(string,uint32)\",\n            \"deriveKey(string,string,uint32)\",\n            \"deriveKey(string,uint32,string)\",\n            \"deriveKey(string,string,uint32,string)\",\n            \"getLabel(address)\",\n            \"toBase64URL(bytes)\",\n            \"toBase64URL(string)\",\n            \"toBase64(bytes)\",\n            \"toBase64(string)\"\n        ],\n        \"Vm\": [\n            \"envAddress(string)\",\n            \"envAddress(string,string)\",\n            \"envBool(string)\",\n            \"envBool(string,string)\",\n            \"envBytes32(string)\",\n            \"envBytes32(string,string)\",\n            \"envBytes(string)\",\n            \"envBytes(string,string)\",\n            \"envInt(string)\",\n            \"envInt(string,string)\",\n            \"envOr(string,bool)\",\n            \"envOr(string,uint256)\",\n            \"envOr(string,string,address[])\",\n            \"envOr(string,string,bytes32[])\",\n            \"envOr(string,string,string[])\",\n            \"envOr(string,string,bytes[])\",\n            \"envOr(string,int256)\",\n            \"envOr(string,address)\",\n            \"envOr(string,bytes32)\",\n            \"envOr(string,string)\",\n            \"envOr(string,bytes)\",\n            \"envOr(string,string,bool[])\",\n            \"envOr(string,string,uint256[])\",\n            \"envOr(string,string,int256[])\",\n            \"envString(string)\",\n            \"envString(string,string)\",\n            \"envUint(string)\",\n            \"envUint(string,string)\",\n            \"addr(uint256)\",\n            \"getBlockNumber()\",\n            \"getBlockTimestamp()\",\n            \"getNonce(address)\",\n            \"load(address,bytes32)\",\n            \"signP256(uint256,bytes32)\",\n            \"sign(uint256,bytes32)\",\n            \"fsMetadata(string)\",\n            \"getCode(string)\",\n            \"getDeployedCode(string)\",\n            \"projectRoot()\",\n            \"readDir(string)\",\n            \"readDir(string,uint64)\",\n            \"readDir(string,uint64,bool)\",\n            \"readFile(string)\",\n            \"readFileBinary(string)\",\n            \"readLine(string)\",\n            \"readLink(string)\",\n            \"keyExists(string,string)\",\n            \"keyExistsJson(string,string)\",\n            \"parseJsonAddress(string,string)\",\n            \"parseJsonAddressArray(string,string)\",\n            \"parseJsonBool(string,string)\",\n            \"parseJsonBoolArray(string,string)\",\n            \"parseJsonBytes(string,string)\",\n            \"parseJsonBytes32(string,string)\",\n            \"parseJsonBytes32Array(string,string)\",\n            \"parseJsonBytesArray(string,string)\",\n            \"parseJsonInt(string,string)\",\n            \"parseJsonIntArray(string,string)\",\n            \"parseJsonKeys(string,string)\",\n            \"parseJsonString(string,string)\",\n            \"parseJsonStringArray(string,string)\",\n            \"parseJsonUint(string,string)\",\n            \"parseJsonUintArray(string,string)\",\n            \"parseJson(string)\",\n            \"parseJson(string,string)\",\n            \"parseAddress(string)\",\n            \"parseBool(string)\",\n            \"parseBytes(string)\",\n            \"parseBytes32(string)\",\n            \"parseInt(string)\",\n            \"parseUint(string)\",\n            \"replace(string,string,string)\",\n            \"split(string,string)\",\n            \"toLowercase(string)\",\n            \"toString(address)\",\n            \"toString(bytes)\",\n            \"toString(bytes32)\",\n            \"toString(bool)\",\n            \"toString(uint256)\",\n            \"toString(int256)\",\n            \"toUppercase(string)\",\n            \"trim(string)\",\n            \"assertApproxEqAbsDecimal(uint256,uint256,uint256,uint256)\",\n            \"assertApproxEqAbsDecimal(uint256,uint256,uint256,uint256,string)\",\n            \"assertApproxEqAbsDecimal(int256,int256,uint256,uint256)\",\n            \"assertApproxEqAbsDecimal(int256,int256,uint256,uint256,string)\",\n            \"assertApproxEqAbs(uint256,uint256,uint256)\",\n            \"assertApproxEqAbs(uint256,uint256,uint256,string)\",\n            \"assertApproxEqAbs(int256,int256,uint256)\",\n            \"assertApproxEqAbs(int256,int256,uint256,string)\",\n            \"assertApproxEqRelDecimal(uint256,uint256,uint256,uint256)\",\n            \"assertApproxEqRelDecimal(uint256,uint256,uint256,uint256,string)\",\n            \"assertApproxEqRelDecimal(int256,int256,uint256,uint256)\",\n            \"assertApproxEqRelDecimal(int256,int256,uint256,uint256,string)\",\n            \"assertApproxEqRel(uint256,uint256,uint256)\",\n            \"assertApproxEqRel(uint256,uint256,uint256,string)\",\n            \"assertApproxEqRel(int256,int256,uint256)\",\n            \"assertApproxEqRel(int256,int256,uint256,string)\",\n            \"assertEqDecimal(uint256,uint256,uint256)\",\n            \"assertEqDecimal(uint256,uint256,uint256,string)\",\n            \"assertEqDecimal(int256,int256,uint256)\",\n            \"assertEqDecimal(int256,int256,uint256,string)\",\n            \"assertEq(bool,bool)\",\n            \"assertEq(bool,bool,string)\",\n            \"assertEq(string,string)\",\n            \"assertEq(string,string,string)\",\n            \"assertEq(bytes,bytes)\",\n            \"assertEq(bytes,bytes,string)\",\n            \"assertEq(bool[],bool[])\",\n            \"assertEq(bool[],bool[],string)\",\n            \"assertEq(uint256[],uint256[])\",\n            \"assertEq(uint256[],uint256[],string)\",\n            \"assertEq(int256[],int256[])\",\n            \"assertEq(int256[],int256[],string)\",\n            \"assertEq(uint256,uint256)\",\n            \"assertEq(address[],address[])\",\n            \"assertEq(address[],address[],string)\",\n            \"assertEq(bytes32[],bytes32[])\",\n            \"assertEq(bytes32[],bytes32[],string)\",\n            \"assertEq(string[],string[])\",\n            \"assertEq(string[],string[],string)\",\n            \"assertEq(bytes[],bytes[])\",\n            \"assertEq(bytes[],bytes[],string)\",\n            \"assertEq(uint256,uint256,string)\",\n            \"assertEq(int256,int256)\",\n            \"assertEq(int256,int256,string)\",\n            \"assertEq(address,address)\",\n            \"assertEq(address,address,string)\",\n            \"assertEq(bytes32,bytes32)\",\n            \"assertEq(bytes32,bytes32,string)\",\n            \"assertFalse(bool)\",\n            \"assertFalse(bool,string)\",\n            \"assertGeDecimal(uint256,uint256,uint256)\",\n            \"assertGeDecimal(uint256,uint256,uint256,string)\",\n            \"assertGeDecimal(int256,int256,uint256)\",\n            \"assertGeDecimal(int256,int256,uint256,string)\",\n            \"assertGe(uint256,uint256)\",\n            \"assertGe(uint256,uint256,string)\",\n            \"assertGe(int256,int256)\",\n            \"assertGe(int256,int256,string)\",\n            \"assertGtDecimal(uint256,uint256,uint256)\",\n            \"assertGtDecimal(uint256,uint256,uint256,string)\",\n            \"assertGtDecimal(int256,int256,uint256)\",\n            \"assertGtDecimal(int256,int256,uint256,string)\",\n            \"assertGt(uint256,uint256)\",\n            \"assertGt(uint256,uint256,string)\",\n            \"assertGt(int256,int256)\",\n            \"assertGt(int256,int256,string)\",\n            \"assertLeDecimal(uint256,uint256,uint256)\",\n            \"assertLeDecimal(uint256,uint256,uint256,string)\",\n            \"assertLeDecimal(int256,int256,uint256)\",\n            \"assertLeDecimal(int256,int256,uint256,string)\",\n            \"assertLe(uint256,uint256)\",\n            \"assertLe(uint256,uint256,string)\",\n            \"assertLe(int256,int256)\",\n            \"assertLe(int256,int256,string)\",\n            \"assertLtDecimal(uint256,uint256,uint256)\",\n            \"assertLtDecimal(uint256,uint256,uint256,string)\",\n            \"assertLtDecimal(int256,int256,uint256)\",\n            \"assertLtDecimal(int256,int256,uint256,string)\",\n            \"assertLt(uint256,uint256)\",\n            \"assertLt(uint256,uint256,string)\",\n            \"assertLt(int256,int256)\",\n            \"assertLt(int256,int256,string)\",\n            \"assertNotEqDecimal(uint256,uint256,uint256)\",\n            \"assertNotEqDecimal(uint256,uint256,uint256,string)\",\n            \"assertNotEqDecimal(int256,int256,uint256)\",\n            \"assertNotEqDecimal(int256,int256,uint256,string)\",\n            \"assertNotEq(bool,bool)\",\n            \"assertNotEq(bool,bool,string)\",\n            \"assertNotEq(string,string)\",\n            \"assertNotEq(string,string,string)\",\n            \"assertNotEq(bytes,bytes)\",\n            \"assertNotEq(bytes,bytes,string)\",\n            \"assertNotEq(bool[],bool[])\",\n            \"assertNotEq(bool[],bool[],string)\",\n            \"assertNotEq(uint256[],uint256[])\",\n            \"assertNotEq(uint256[],uint256[],string)\",\n            \"assertNotEq(int256[],int256[])\",\n            \"assertNotEq(int256[],int256[],string)\",\n            \"assertNotEq(uint256,uint256)\",\n            \"assertNotEq(address[],address[])\",\n            \"assertNotEq(address[],address[],string)\",\n            \"assertNotEq(bytes32[],bytes32[])\",\n            \"assertNotEq(bytes32[],bytes32[],string)\",\n            \"assertNotEq(string[],string[])\",\n            \"assertNotEq(string[],string[],string)\",\n            \"assertNotEq(bytes[],bytes[])\",\n            \"assertNotEq(bytes[],bytes[],string)\",\n            \"assertNotEq(uint256,uint256,string)\",\n            \"assertNotEq(int256,int256)\",\n            \"assertNotEq(int256,int256,string)\",\n            \"assertNotEq(address,address)\",\n            \"assertNotEq(address,address,string)\",\n            \"assertNotEq(bytes32,bytes32)\",\n            \"assertNotEq(bytes32,bytes32,string)\",\n            \"assertTrue(bool)\",\n            \"assertTrue(bool,string)\",\n            \"assume(bool)\",\n            \"rpcUrl(string)\",\n            \"rpcUrlStructs()\",\n            \"rpcUrls()\",\n            \"keyExistsToml(string,string)\",\n            \"parseTomlAddress(string,string)\",\n            \"parseTomlAddressArray(string,string)\",\n            \"parseTomlBool(string,string)\",\n            \"parseTomlBoolArray(string,string)\",\n            \"parseTomlBytes(string,string)\",\n            \"parseTomlBytes32(string,string)\",\n            \"parseTomlBytes32Array(string,string)\",\n            \"parseTomlBytesArray(string,string)\",\n            \"parseTomlInt(string,string)\",\n            \"parseTomlIntArray(string,string)\",\n            \"parseTomlKeys(string,string)\",\n            \"parseTomlString(string,string)\",\n            \"parseTomlStringArray(string,string)\",\n            \"parseTomlUint(string,string)\",\n            \"parseTomlUintArray(string,string)\",\n            \"parseToml(string)\",\n            \"parseToml(string,string)\",\n            \"computeCreate2Address(bytes32,bytes32,address)\",\n            \"computeCreate2Address(bytes32,bytes32)\",\n            \"computeCreateAddress(address,uint256)\",\n            \"deriveKey(string,uint32)\",\n            \"deriveKey(string,string,uint32)\",\n            \"deriveKey(string,uint32,string)\",\n            \"deriveKey(string,string,uint32,string)\",\n            \"getLabel(address)\",\n            \"toBase64URL(bytes)\",\n            \"toBase64URL(string)\",\n            \"toBase64(bytes)\",\n            \"toBase64(string)\",\n            \"activeFork()\",\n            \"isPersistent(address)\"\n        ],\n        \"IERC165\": [\n            \"supportsInterface(bytes4)\"\n        ],\n        \"IERC20\": [\n            \"totalSupply()\",\n            \"balanceOf(address)\",\n            \"allowance(address,address)\"\n        ],\n        \"IERC721\": [\n            \"supportsInterface(bytes4)\",\n            \"balanceOf(address)\",\n            \"ownerOf(uint256)\",\n            \"getApproved(uint256)\",\n            \"isApprovedForAll(address,address)\"\n        ],\n        \"IERC721Metadata\": [\n            \"balanceOf(address)\",\n            \"ownerOf(uint256)\",\n            \"getApproved(uint256)\",\n            \"isApprovedForAll(address,address)\",\n            \"supportsInterface(bytes4)\",\n            \"name()\",\n            \"symbol()\",\n            \"tokenURI(uint256)\"\n        ],\n        \"IERC721Enumerable\": [\n            \"balanceOf(address)\",\n            \"ownerOf(uint256)\",\n            \"getApproved(uint256)\",\n            \"isApprovedForAll(address,address)\",\n            \"supportsInterface(bytes4)\",\n            \"totalSupply()\",\n            \"tokenByIndex(uint256)\",\n            \"tokenOfOwnerByIndex(address,uint256)\"\n        ],\n        \"IMulticall3\": [\n            \"getBasefee()\",\n            \"getBlockHash(uint256)\",\n            \"getBlockNumber()\",\n            \"getChainId()\",\n            \"getCurrentBlockCoinbase()\",\n            \"getCurrentBlockDifficulty()\",\n            \"getCurrentBlockGasLimit()\",\n            \"getCurrentBlockTimestamp()\",\n            \"getEthBalance(address)\",\n            \"getLastBlockHash()\"\n        ],\n        \"MockERC20\": [\n            \"DOMAIN_SEPARATOR()\",\n            \"name()\",\n            \"symbol()\",\n            \"decimals()\",\n            \"totalSupply()\",\n            \"balanceOf(address)\",\n            \"allowance(address,address)\",\n            \"nonces(address)\"\n        ],\n        \"MockERC721\": [\n            \"name()\",\n            \"symbol()\",\n            \"tokenURI(uint256)\",\n            \"ownerOf(uint256)\",\n            \"balanceOf(address)\",\n            \"getApproved(uint256)\",\n            \"isApprovedForAll(address,address)\",\n            \"supportsInterface(bytes4)\"\n        ],\n        \"IERC1363\": [\n            \"supportsInterface(bytes4)\",\n            \"totalSupply()\",\n            \"balanceOf(address)\",\n            \"allowance(address,address)\"\n        ],\n        \"ERC20\": [\n            \"DOMAIN_SEPARATOR()\",\n            \"name()\",\n            \"symbol()\",\n            \"decimals()\",\n            \"totalSupply()\",\n            \"balanceOf(address)\",\n            \"allowance(address,address)\",\n            \"nonces(address)\"\n        ],\n        \"CounterScript\": [\n            \"setUp()\",\n            \"IS_SCRIPT()\"\n        ],\n        \"RewardsManager\": [\n            \"currentEpoch()\",\n            \"getEpochData(uint256)\",\n            \"getVaultTimeLeftToAccrue(uint256,address)\",\n            \"getTotalSupplyAtEpoch(uint256,address)\",\n            \"getUserTimeLeftToAccrue(uint256,address,address)\",\n            \"getBalanceAtEpoch(uint256,address,address)\",\n            \"getUserNextEpochInfo(uint256,address,address,uint256)\",\n            \"getVaultNextEpochInfo(uint256,address,uint256)\",\n            \"getClaimableBulkRewards((uint256,uint256,address,address[]),address)\",\n            \"DEPLOY_TIME()\",\n            \"SECONDS_PER_EPOCH()\",\n            \"rewards(uint256,address,address)\",\n            \"rewardsInfo(uint256,address,address)\",\n            \"lastAccruedTimestamp(uint256,address)\",\n            \"lastUserAccrueTimestamp(uint256,address,address)\",\n            \"shares(uint256,address,address)\",\n            \"totalSupply(uint256,address)\",\n            \"points(uint256,address,address)\",\n            \"pointsWithdrawn(uint256,address,address,address)\",\n            \"totalPoints(uint256,address)\"\n        ],\n        \"CryticToFoundry\": [\n            \"excludeArtifacts()\",\n            \"excludeContracts()\",\n            \"excludeSenders()\",\n            \"targetArtifacts()\",\n            \"targetArtifactSelectors()\",\n            \"targetContracts()\",\n            \"targetSelectors()\",\n            \"targetSenders()\",\n            \"targetInterfaces()\",\n            \"failed()\",\n            \"canary_totalSupply_atEpoch()\",\n            \"IS_TEST()\"\n        ],\n        \"Properties\": [\n            \"canary_totalSupply_atEpoch()\"\n        ],\n        \"TargetFunctions\": [\n            \"canary_totalSupply_atEpoch()\"\n        ],\n        \"AdminTargets\": [\n            \"canary_totalSupply_atEpoch()\"\n        ],\n        \"DoomsdayTargets\": [\n            \"canary_totalSupply_atEpoch()\"\n        ],\n        \"ManagersTargets\": [\n            \"canary_totalSupply_atEpoch()\"\n        ],\n        \"RewardsManagerTargets\": [\n            \"canary_totalSupply_atEpoch()\"\n        ]\n    },\n    \"constants_used\": {\n        \"FoundryAsserts\": {\n            \"failed()\": [\n                [\n                    {\n                        \"value\": \"61678357398080765210293718086378416697372618187842506566286863523773954249005\",\n                        \"type\": \"Vm\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"bytes32\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"61678357398080765210293718086378416697372618187842506566286863523773954249005\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"failed\",\n                        \"type\": \"bytes32\"\n                    }\n                ]\n            ]\n        },\n        \"StdAssertions\": {\n            \"failed()\": [\n                [\n                    {\n                        \"value\": \"61678357398080765210293718086378416697372618187842506566286863523773954249005\",\n                        \"type\": \"Vm\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"bytes32\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"61678357398080765210293718086378416697372618187842506566286863523773954249005\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"failed\",\n                        \"type\": \"bytes32\"\n                    }\n                ]\n            ]\n        },\n        \"Test\": {\n            \"failed()\": [\n                [\n                    {\n                        \"value\": \"61678357398080765210293718086378416697372618187842506566286863523773954249005\",\n                        \"type\": \"Vm\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"bytes32\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"61678357398080765210293718086378416697372618187842506566286863523773954249005\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"failed\",\n                        \"type\": \"bytes32\"\n                    }\n                ]\n            ]\n        },\n        \"MockERC20\": {\n            \"initialize(string,string,uint8)\": [\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"ALREADY_INITIALIZED\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\",\n                        \"type\": \"string\"\n                    }\n                ]\n            ],\n            \"approve(address,uint256)\": [\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ]\n            ],\n            \"transfer(address,uint256)\": [\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ]\n            ],\n            \"transferFrom(address,address,uint256)\": [\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"115792089237316195423570985008687907853269984665640564039457584007913129639935\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\": [\n                [\n                    {\n                        \"value\": \"\\u0019\\u0001\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"PERMIT_DEADLINE_EXPIRED\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"INVALID_SIGNER\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"string\"\n                    }\n                ]\n            ],\n            \"DOMAIN_SEPARATOR()\": [\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\",\n                        \"type\": \"string\"\n                    }\n                ]\n            ],\n            \"constructor(string,string,uint8)\": [\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\",\n                        \"type\": \"string\"\n                    }\n                ]\n            ],\n            \"mint(address,uint256)\": [\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ]\n            ],\n            \"burn(address,uint256)\": [\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ]\n            ]\n        },\n        \"MockERC721\": {\n            \"ownerOf(uint256)\": [\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"NOT_MINTED\",\n                        \"type\": \"string\"\n                    }\n                ]\n            ],\n            \"balanceOf(address)\": [\n                [\n                    {\n                        \"value\": \"ZERO_ADDRESS\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ]\n            ],\n            \"initialize(string,string)\": [\n                [\n                    {\n                        \"value\": \"ALREADY_INITIALIZED\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ]\n            ],\n            \"approve(address,uint256)\": [\n                [\n                    {\n                        \"value\": \"NOT_AUTHORIZED\",\n                        \"type\": \"string\"\n                    }\n                ]\n            ],\n            \"transferFrom(address,address,uint256)\": [\n                [\n                    {\n                        \"value\": \"WRONG_FROM\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"INVALID_RECIPIENT\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"NOT_AUTHORIZED\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"safeTransferFrom(address,address,uint256)\": [\n                [\n                    {\n                        \"value\": \"WRONG_FROM\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"INVALID_RECIPIENT\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"NOT_AUTHORIZED\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"353073666\",\n                        \"type\": \"bytes4\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"UNSAFE_RECIPIENT\",\n                        \"type\": \"string\"\n                    }\n                ]\n            ],\n            \"safeTransferFrom(address,address,uint256,bytes)\": [\n                [\n                    {\n                        \"value\": \"WRONG_FROM\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"UNSAFE_RECIPIENT\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"INVALID_RECIPIENT\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"NOT_AUTHORIZED\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"353073666\",\n                        \"type\": \"bytes4\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"supportsInterface(bytes4)\": [\n                [\n                    {\n                        \"value\": \"2158778573\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"33540519\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1532892063\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ]\n        },\n        \"ERC20\": {\n            \"approve(address,uint256)\": [\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ]\n            ],\n            \"transfer(address,uint256)\": [\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ]\n            ],\n            \"transferFrom(address,address,uint256)\": [\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"115792089237316195423570985008687907853269984665640564039457584007913129639935\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\": [\n                [\n                    {\n                        \"value\": \"\\u0019\\u0001\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"PERMIT_DEADLINE_EXPIRED\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"INVALID_SIGNER\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"string\"\n                    }\n                ]\n            ],\n            \"DOMAIN_SEPARATOR()\": [\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\",\n                        \"type\": \"string\"\n                    }\n                ]\n            ]\n        },\n        \"CounterScript\": {\n            \"run()\": [\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"61678357398080765210293718086378416697372618187842506566286863523773954249005\",\n                        \"type\": \"Vm\"\n                    }\n                ]\n            ]\n        },\n        \"RewardsManager\": {\n            \"currentEpoch()\": [\n                [\n                    {\n                        \"value\": \"604800\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"getEpochData(uint256)\": [\n                [\n                    {\n                        \"value\": \"604800\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"notifyTransfer(address,address,uint256)\": [\n                [\n                    {\n                        \"value\": \"604800\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"only ended epochs\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Cannot see the future\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Cannot transfer to yourself\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"accrueVault(uint256,address)\": [\n                [\n                    {\n                        \"value\": \"604800\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Cannot see the future\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"getVaultTimeLeftToAccrue(uint256,address)\": [\n                [\n                    {\n                        \"value\": \"604800\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Cannot see the future\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"getTotalSupplyAtEpoch(uint256,address)\": [\n                [\n                    {\n                        \"value\": \"604800\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Cannot see the future\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"accrueUser(uint256,address,address)\": [\n                [\n                    {\n                        \"value\": \"604800\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"only ended epochs\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"getUserTimeLeftToAccrue(uint256,address,address)\": [\n                [\n                    {\n                        \"value\": \"604800\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Cannot see the future\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"getBalanceAtEpoch(uint256,address,address)\": [\n                [\n                    {\n                        \"value\": \"604800\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Cannot see the future\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"claimRewards(uint256[],address[],address[],address[])\": [\n                [\n                    {\n                        \"value\": \"already claimed\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"604800\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"length mismatch\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"32\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"only ended epochs\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"64\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"claimRewardReferenceEmitting(uint256,address,address,address)\": [\n                [\n                    {\n                        \"value\": \"604800\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"32\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"only ended epochs\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Cannot see the future\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"64\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"claimRewardEmitting(uint256,address,address,address)\": [\n                [\n                    {\n                        \"value\": \"already claimed\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"604800\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"32\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"only ended epochs\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"64\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"claimReward(uint256,address,address,address)\": [\n                [\n                    {\n                        \"value\": \"already claimed\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"604800\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"32\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"only ended epochs\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"64\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"claimBulkTokensOverMultipleEpochs(uint256,uint256,address,address[],address)\": [\n                [\n                    {\n                        \"value\": \"already claimed\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"604800\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"wrong math\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"32\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"dup\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"only ended epochs\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Cannot see the future\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"64\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"addBulkRewardsLinearly(uint256,uint256,address,address,uint256)\": [\n                [\n                    {\n                        \"value\": \"604800\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"32\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"64\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"must divide evenly\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"youtu.be/F3L376eH09Q\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"no feeOnTransfer\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Cannot add to past\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Must add at least one epoch\",\n                        \"type\": \"string\"\n                    }\n                ]\n            ],\n            \"addBulkRewards(uint256,uint256,address,address,uint256[])\": [\n                [\n                    {\n                        \"value\": \"length mismatch\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"604800\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Must add one epoch\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"32\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"64\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"youtu.be/F3L376eH09Q\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"no feeOnTransfer\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Cannot add to past\",\n                        \"type\": \"string\"\n                    }\n                ]\n            ],\n            \"addReward(uint256,address,address,uint256)\": [\n                [\n                    {\n                        \"value\": \"604800\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"32\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"64\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"youtu.be/F3L376eH09Q\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Cannot add to past\",\n                        \"type\": \"string\"\n                    }\n                ]\n            ],\n            \"getUserNextEpochInfo(uint256,address,address,uint256)\": [\n                [\n                    {\n                        \"value\": \"604800\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"only ended epochs\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"getVaultNextEpochInfo(uint256,address,uint256)\": [\n                [\n                    {\n                        \"value\": \"604800\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"only ended epochs\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"reap((uint256,uint256,address,address[]))\": [\n                [\n                    {\n                        \"value\": \"already claimed\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"604800\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"wrong math\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"32\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"dup\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"only ended epochs\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"64\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"tear((uint256,uint256,address,address[]))\": [\n                [\n                    {\n                        \"value\": \"already claimed\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"604800\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"wrong math\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"32\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"dup\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"only ended epochs\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"64\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"getClaimableBulkRewards((uint256,uint256,address,address[]),address)\": [\n                [\n                    {\n                        \"value\": \"already claimed\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"604800\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"wrong math\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"dup\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"only ended epochs\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ]\n        },\n        \"CryticTester\": {\n            \"rewardsManager_accrueUser_clamped(uint256)\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ]\n            ],\n            \"rewardsManager_accrueVault_clamped(uint256)\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ]\n            ],\n            \"rewardsManager_addReward_clamped(uint256,uint256)\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ]\n            ],\n            \"rewardsManager_claimReward_clamped(uint256)\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ]\n            ],\n            \"rewardsManager_accrueUser(uint256,address,address)\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ]\n            ],\n            \"rewardsManager_accrueVault(uint256,address)\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ]\n            ],\n            \"rewardsManager_addBulkRewards(uint256,uint256,address,address,uint256[])\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ]\n            ],\n            \"rewardsManager_addBulkRewardsLinearly(uint256,uint256,address,address,uint256)\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ]\n            ],\n            \"rewardsManager_addReward(uint256,address,address,uint256)\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ]\n            ],\n            \"rewardsManager_claimBulkTokensOverMultipleEpochs(uint256,uint256,address,address[],address)\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ]\n            ],\n            \"rewardsManager_claimReward(uint256,address,address,address)\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ]\n            ],\n            \"rewardsManager_claimRewardEmitting(uint256,address,address,address)\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ]\n            ],\n            \"rewardsManager_claimRewardReferenceEmitting(uint256,address,address,address)\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ]\n            ],\n            \"rewardsManager_claimRewards(uint256[],address[],address[],address[])\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ]\n            ],\n            \"rewardsManager_notifyTransfer(address,address,uint256)\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ]\n            ],\n            \"rewardsManager_reap((uint256,uint256,address,address[]))\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ]\n            ],\n            \"rewardsManager_tear((uint256,uint256,address,address[]))\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ]\n            ],\n            \"canary_totalSupply_atEpoch()\": [\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Total supply is less than 0\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"solvency_totalSupply_atEpoch()\": [\n                [\n                    {\n                        \"value\": \"Total supply is less than total balances\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ]\n            ],\n            \"add_new_asset(uint8)\": [\n                [\n                    {\n                        \"value\": \"TST\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Test Token\",\n                        \"type\": \"string\"\n                    }\n                ]\n            ],\n            \"asset_approve(address,uint128)\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ]\n            ],\n            \"asset_mint(address,uint128)\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ]\n            ],\n            \"claim_rewards_never_reverts()\": [\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"stateless\",\n                        \"type\": \"string\"\n                    }\n                ]\n            ],\n            \"constructor()\": [\n                [\n                    {\n                        \"value\": \"TST\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2827\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"18\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"266691\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"6\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"10\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Test Token\",\n                        \"type\": \"string\"\n                    }\n                ]\n            ]\n        },\n        \"CryticToFoundry\": {\n            \"failed()\": [\n                [\n                    {\n                        \"value\": \"61678357398080765210293718086378416697372618187842506566286863523773954249005\",\n                        \"type\": \"Vm\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"bytes32\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"61678357398080765210293718086378416697372618187842506566286863523773954249005\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"failed\",\n                        \"type\": \"bytes32\"\n                    }\n                ]\n            ],\n            \"rewardsManager_accrueUser_clamped(uint256)\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ]\n            ],\n            \"rewardsManager_accrueVault_clamped(uint256)\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ]\n            ],\n            \"rewardsManager_addReward_clamped(uint256,uint256)\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ]\n            ],\n            \"rewardsManager_claimReward_clamped(uint256)\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ]\n            ],\n            \"rewardsManager_accrueUser(uint256,address,address)\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ]\n            ],\n            \"rewardsManager_accrueVault(uint256,address)\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ]\n            ],\n            \"rewardsManager_addBulkRewards(uint256,uint256,address,address,uint256[])\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ]\n            ],\n            \"rewardsManager_addBulkRewardsLinearly(uint256,uint256,address,address,uint256)\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ]\n            ],\n            \"rewardsManager_addReward(uint256,address,address,uint256)\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ]\n            ],\n            \"rewardsManager_claimBulkTokensOverMultipleEpochs(uint256,uint256,address,address[],address)\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ]\n            ],\n            \"rewardsManager_claimReward(uint256,address,address,address)\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ]\n            ],\n            \"rewardsManager_claimRewardEmitting(uint256,address,address,address)\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ]\n            ],\n            \"rewardsManager_claimRewardReferenceEmitting(uint256,address,address,address)\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ]\n            ],\n            \"rewardsManager_claimRewards(uint256[],address[],address[],address[])\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ]\n            ],\n            \"rewardsManager_notifyTransfer(address,address,uint256)\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ]\n            ],\n            \"rewardsManager_reap((uint256,uint256,address,address[]))\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ]\n            ],\n            \"rewardsManager_tear((uint256,uint256,address,address[]))\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ]\n            ],\n            \"canary_totalSupply_atEpoch()\": [\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"61678357398080765210293718086378416697372618187842506566286863523773954249005\",\n                        \"type\": \"Vm\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Total supply is less than 0\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"solvency_totalSupply_atEpoch()\": [\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"61678357398080765210293718086378416697372618187842506566286863523773954249005\",\n                        \"type\": \"Vm\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Total supply is less than total balances\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"add_new_asset(uint8)\": [\n                [\n                    {\n                        \"value\": \"TST\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Test Token\",\n                        \"type\": \"string\"\n                    }\n                ]\n            ],\n            \"asset_approve(address,uint128)\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ]\n            ],\n            \"asset_mint(address,uint128)\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ]\n            ],\n            \"claim_rewards_never_reverts()\": [\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"stateless\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ]\n            ],\n            \"setUp()\": [\n                [\n                    {\n                        \"value\": \"TST\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"18\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2827\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"266691\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"6\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"10\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Test Token\",\n                        \"type\": \"string\"\n                    }\n                ]\n            ],\n            \"test_crytic()\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Total supply is less than 0\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"61678357398080765210293718086378416697372618187842506566286863523773954249005\",\n                        \"type\": \"Vm\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"test_canary_totalSupply_atEpoch_lckx()\": [\n                [\n                    {\n                        \"value\": \"31\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"19948\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"5014\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"359\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"65536\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"434894\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"728815563385977040452943777879061427756277306518\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"115792089237316195423570985008687907853269984665640564039457584007913129035135\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"600847\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4294967295\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Total supply is less than total balances\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"50417\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"136393\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"23403\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"61678357398080765210293718086378416697372618187842506566286863523773954249005\",\n                        \"type\": \"Vm\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"12884901885\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"5952\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"58783\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"8589934590\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"115792089237316195423570985008687907853269984665640564039457584007913096099417\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"23722\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"stateless\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4369999\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"600848\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"17\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"722\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"249040\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"115792089237316195423570985008687907853269984665640564039457584007913129639929\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"447588\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ]\n        },\n        \"Properties\": {\n            \"canary_totalSupply_atEpoch()\": [\n                [\n                    {\n                        \"value\": \"Total supply is less than 0\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"solvency_totalSupply_atEpoch()\": [\n                [\n                    {\n                        \"value\": \"Total supply is less than total balances\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ]\n        },\n        \"TargetFunctions\": {\n            \"rewardsManager_accrueUser_clamped(uint256)\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ]\n            ],\n            \"rewardsManager_accrueVault_clamped(uint256)\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ]\n            ],\n            \"rewardsManager_addReward_clamped(uint256,uint256)\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ]\n            ],\n            \"rewardsManager_claimReward_clamped(uint256)\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ]\n            ],\n            \"rewardsManager_accrueUser(uint256,address,address)\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ]\n            ],\n            \"rewardsManager_accrueVault(uint256,address)\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ]\n            ],\n            \"rewardsManager_addBulkRewards(uint256,uint256,address,address,uint256[])\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ]\n            ],\n            \"rewardsManager_addBulkRewardsLinearly(uint256,uint256,address,address,uint256)\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ]\n            ],\n            \"rewardsManager_addReward(uint256,address,address,uint256)\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ]\n            ],\n            \"rewardsManager_claimBulkTokensOverMultipleEpochs(uint256,uint256,address,address[],address)\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ]\n            ],\n            \"rewardsManager_claimReward(uint256,address,address,address)\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ]\n            ],\n            \"rewardsManager_claimRewardEmitting(uint256,address,address,address)\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ]\n            ],\n            \"rewardsManager_claimRewardReferenceEmitting(uint256,address,address,address)\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ]\n            ],\n            \"rewardsManager_claimRewards(uint256[],address[],address[],address[])\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ]\n            ],\n            \"rewardsManager_notifyTransfer(address,address,uint256)\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ]\n            ],\n            \"rewardsManager_reap((uint256,uint256,address,address[]))\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ]\n            ],\n            \"rewardsManager_tear((uint256,uint256,address,address[]))\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ]\n            ],\n            \"canary_totalSupply_atEpoch()\": [\n                [\n                    {\n                        \"value\": \"Total supply is less than 0\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"solvency_totalSupply_atEpoch()\": [\n                [\n                    {\n                        \"value\": \"Total supply is less than total balances\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"add_new_asset(uint8)\": [\n                [\n                    {\n                        \"value\": \"TST\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Test Token\",\n                        \"type\": \"string\"\n                    }\n                ]\n            ],\n            \"asset_approve(address,uint128)\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ]\n            ],\n            \"asset_mint(address,uint128)\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ]\n            ],\n            \"claim_rewards_never_reverts()\": [\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"stateless\",\n                        \"type\": \"string\"\n                    }\n                ]\n            ]\n        },\n        \"AdminTargets\": {\n            \"canary_totalSupply_atEpoch()\": [\n                [\n                    {\n                        \"value\": \"Total supply is less than 0\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"solvency_totalSupply_atEpoch()\": [\n                [\n                    {\n                        \"value\": \"Total supply is less than total balances\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ]\n        },\n        \"DoomsdayTargets\": {\n            \"canary_totalSupply_atEpoch()\": [\n                [\n                    {\n                        \"value\": \"Total supply is less than 0\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"solvency_totalSupply_atEpoch()\": [\n                [\n                    {\n                        \"value\": \"Total supply is less than total balances\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"claim_rewards_never_reverts()\": [\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"stateless\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ]\n            ]\n        },\n        \"ManagersTargets\": {\n            \"canary_totalSupply_atEpoch()\": [\n                [\n                    {\n                        \"value\": \"Total supply is less than 0\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"solvency_totalSupply_atEpoch()\": [\n                [\n                    {\n                        \"value\": \"Total supply is less than total balances\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"add_new_asset(uint8)\": [\n                [\n                    {\n                        \"value\": \"TST\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Test Token\",\n                        \"type\": \"string\"\n                    }\n                ]\n            ],\n            \"asset_approve(address,uint128)\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ]\n            ],\n            \"asset_mint(address,uint128)\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ]\n            ]\n        },\n        \"RewardsManagerTargets\": {\n            \"canary_totalSupply_atEpoch()\": [\n                [\n                    {\n                        \"value\": \"Total supply is less than 0\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"solvency_totalSupply_atEpoch()\": [\n                [\n                    {\n                        \"value\": \"Total supply is less than total balances\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"rewardsManager_accrueUser_clamped(uint256)\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ]\n            ],\n            \"rewardsManager_accrueVault_clamped(uint256)\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ]\n            ],\n            \"rewardsManager_addReward_clamped(uint256,uint256)\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ]\n            ],\n            \"rewardsManager_claimReward_clamped(uint256)\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ]\n            ],\n            \"rewardsManager_accrueUser(uint256,address,address)\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ]\n            ],\n            \"rewardsManager_accrueVault(uint256,address)\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ]\n            ],\n            \"rewardsManager_addBulkRewards(uint256,uint256,address,address,uint256[])\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ]\n            ],\n            \"rewardsManager_addBulkRewardsLinearly(uint256,uint256,address,address,uint256)\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ]\n            ],\n            \"rewardsManager_addReward(uint256,address,address,uint256)\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ]\n            ],\n            \"rewardsManager_claimBulkTokensOverMultipleEpochs(uint256,uint256,address,address[],address)\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ]\n            ],\n            \"rewardsManager_claimReward(uint256,address,address,address)\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ]\n            ],\n            \"rewardsManager_claimRewardEmitting(uint256,address,address,address)\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ]\n            ],\n            \"rewardsManager_claimRewardReferenceEmitting(uint256,address,address,address)\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ]\n            ],\n            \"rewardsManager_claimRewards(uint256[],address[],address[],address[])\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ]\n            ],\n            \"rewardsManager_notifyTransfer(address,address,uint256)\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ]\n            ],\n            \"rewardsManager_reap((uint256,uint256,address,address[]))\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ]\n            ],\n            \"rewardsManager_tear((uint256,uint256,address,address[]))\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ]\n            ]\n        }\n    },\n    \"constants_used_in_binary\": {\n        \"MockERC20\": {\n            \"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\": {\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            }\n        },\n        \"MockERC721\": {\n            \"transferFrom(address,address,uint256)\": {\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.SUBTRACTION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"safeTransferFrom(address,address,uint256)\": {\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.GREATER\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.SUBTRACTION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"safeTransferFrom(address,address,uint256,bytes)\": {\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.GREATER\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.SUBTRACTION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"supportsInterface(bytes4)\": {\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"2158778573\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"33540519\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"1532892063\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            }\n        },\n        \"ERC20\": {\n            \"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\": {\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            }\n        },\n        \"RewardsManager\": {\n            \"currentEpoch()\": {\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"getEpochData(uint256)\": {\n                \"BinaryType.SUBTRACTION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"notifyTransfer(address,address,uint256)\": {\n                \"BinaryType.SUBTRACTION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.NOT_EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.GREATER\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"accrueVault(uint256,address)\": {\n                \"BinaryType.SUBTRACTION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.NOT_EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.GREATER\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"getVaultTimeLeftToAccrue(uint256,address)\": {\n                \"BinaryType.SUBTRACTION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"getTotalSupplyAtEpoch(uint256,address)\": {\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.GREATER\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.SUBTRACTION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.NOT_EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"accrueUser(uint256,address,address)\": {\n                \"BinaryType.NOT_EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.SUBTRACTION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.GREATER\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"getUserTimeLeftToAccrue(uint256,address,address)\": {\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.SUBTRACTION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"getBalanceAtEpoch(uint256,address,address)\": {\n                \"BinaryType.SUBTRACTION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.NOT_EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.GREATER\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"claimRewards(uint256[],address[],address[],address[])\": {\n                \"BinaryType.SUBTRACTION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.NOT_EQUAL\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"32\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.GREATER\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"claimRewardReferenceEmitting(uint256,address,address,address)\": {\n                \"BinaryType.SUBTRACTION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.NOT_EQUAL\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"32\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.GREATER\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"claimRewardEmitting(uint256,address,address,address)\": {\n                \"BinaryType.SUBTRACTION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.NOT_EQUAL\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"32\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.GREATER\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"claimReward(uint256,address,address,address)\": {\n                \"BinaryType.SUBTRACTION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.NOT_EQUAL\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"32\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.GREATER\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"claimBulkTokensOverMultipleEpochs(uint256,uint256,address,address[],address)\": {\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.SUBTRACTION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.NOT_EQUAL\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"32\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.GREATER\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"addBulkRewardsLinearly(uint256,uint256,address,address,uint256)\": {\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"32\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.NOT_EQUAL\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"addBulkRewards(uint256,uint256,address,address,uint256[])\": {\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"32\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.NOT_EQUAL\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"addReward(uint256,address,address,uint256)\": {\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"32\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.NOT_EQUAL\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"getUserNextEpochInfo(uint256,address,address,uint256)\": {\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.SUBTRACTION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"getVaultNextEpochInfo(uint256,address,uint256)\": {\n                \"BinaryType.SUBTRACTION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"reap((uint256,uint256,address,address[]))\": {\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"32\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.NOT_EQUAL\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.SUBTRACTION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.GREATER\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"tear((uint256,uint256,address,address[]))\": {\n                \"BinaryType.NOT_EQUAL\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.SUBTRACTION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.GREATER\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"32\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"getClaimableBulkRewards((uint256,uint256,address,address[]),address)\": {\n                \"BinaryType.SUBTRACTION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.NOT_EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.GREATER\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            }\n        },\n        \"CryticTester\": {\n            \"solvency_totalSupply_atEpoch()\": {\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"add_new_asset(uint8)\": {\n                \"BinaryType.NOT_EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"claim_rewards_never_reverts()\": {\n                \"BinaryType.SUBTRACTION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"constructor()\": {\n                \"BinaryType.NOT_EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            }\n        },\n        \"CryticToFoundry\": {\n            \"solvency_totalSupply_atEpoch()\": {\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"add_new_asset(uint8)\": {\n                \"BinaryType.NOT_EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"claim_rewards_never_reverts()\": {\n                \"BinaryType.SUBTRACTION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"setUp()\": {\n                \"BinaryType.NOT_EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"test_crytic()\": {\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"test_canary_totalSupply_atEpoch_lckx()\": {\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"136393\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"31\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"23403\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"19948\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"600847\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"600848\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"5952\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"17\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"5014\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"249040\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"434894\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"58783\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"23722\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"447588\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"50417\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.SUBTRACTION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            }\n        },\n        \"Properties\": {\n            \"solvency_totalSupply_atEpoch()\": {\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            }\n        },\n        \"TargetFunctions\": {\n            \"solvency_totalSupply_atEpoch()\": {\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"add_new_asset(uint8)\": {\n                \"BinaryType.NOT_EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"claim_rewards_never_reverts()\": {\n                \"BinaryType.SUBTRACTION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            }\n        },\n        \"AdminTargets\": {\n            \"solvency_totalSupply_atEpoch()\": {\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            }\n        },\n        \"DoomsdayTargets\": {\n            \"solvency_totalSupply_atEpoch()\": {\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"claim_rewards_never_reverts()\": {\n                \"BinaryType.SUBTRACTION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            }\n        },\n        \"ManagersTargets\": {\n            \"solvency_totalSupply_atEpoch()\": {\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"add_new_asset(uint8)\": {\n                \"BinaryType.NOT_EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            }\n        },\n        \"RewardsManagerTargets\": {\n            \"solvency_totalSupply_atEpoch()\": {\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            }\n        }\n    },\n    \"functions_relations\": {\n        \"Asserts\": {},\n        \"BaseProperties\": {},\n        \"BaseSetup\": {},\n        \"BaseTargetFunctions\": {},\n        \"CryticAsserts\": {},\n        \"FoundryAsserts\": {\n            \"excludeArtifacts()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"excludeContracts()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"excludeSenders()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetArtifacts()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetArtifactSelectors()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetContracts()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetSelectors()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetSenders()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetInterfaces()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"failed()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            }\n        },\n        \"IHevm\": {\n            \"warp(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"roll(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assume(bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"deal(address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"load(address,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"store(address,bytes32,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"sign(uint256,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"addr(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"ffi(string[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"prank(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"createFork(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"selectFork(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"activeFork()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"label(address,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            }\n        },\n        \"CommonBase\": {},\n        \"TestBase\": {},\n        \"ScriptBase\": {},\n        \"Script\": {},\n        \"StdAssertions\": {\n            \"failed()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            }\n        },\n        \"StdChains\": {},\n        \"StdCheatsSafe\": {},\n        \"StdCheats\": {},\n        \"stdError\": {},\n        \"StdInvariant\": {\n            \"excludeArtifacts()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"excludeContracts()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"excludeSenders()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetArtifacts()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetArtifactSelectors()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetContracts()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetSelectors()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetSenders()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetInterfaces()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            }\n        },\n        \"stdJson\": {},\n        \"stdMath\": {},\n        \"stdStorageSafe\": {},\n        \"stdStorage\": {},\n        \"StdStyle\": {},\n        \"stdToml\": {},\n        \"StdUtils\": {},\n        \"Test\": {\n            \"excludeArtifacts()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"excludeContracts()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"excludeSenders()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetArtifacts()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetArtifactSelectors()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetContracts()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetSelectors()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetSenders()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetInterfaces()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"failed()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            }\n        },\n        \"VmSafe\": {\n            \"envAddress(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envAddress(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envBool(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envBool(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envBytes32(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envBytes32(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envBytes(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envBytes(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envInt(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envInt(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,string,address[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,string,bytes32[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,string,string[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,string,bytes[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,int256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,string,bool[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,string,uint256[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,string,int256[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envString(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envString(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envUint(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envUint(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"setEnv(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"accesses(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"addr(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"eth_getLogs(uint256,uint256,address,bytes32[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getBlockNumber()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getBlockTimestamp()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getMappingKeyAndParentOf(address,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getMappingLength(address,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getMappingSlotAt(address,bytes32,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getNonce(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getRecordedLogs()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"load(address,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"pauseGasMetering()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"record()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"recordLogs()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"resumeGasMetering()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"rpc(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"signP256(uint256,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"sign(uint256,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"startMappingRecording()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"startStateDiffRecording()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"stopAndReturnStateDiff()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"stopMappingRecording()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"closeFile(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"copyFile(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"createDir(string,bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"exists(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"ffi(string[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"fsMetadata(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getCode(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getDeployedCode(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"isDir(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"isFile(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"projectRoot()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"readDir(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"readDir(string,uint64)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"readDir(string,uint64,bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"readFile(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"readFileBinary(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"readLine(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"readLink(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"removeDir(string,bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"removeFile(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"tryFfi(string[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"unixTime()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"writeFile(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"writeFileBinary(string,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"writeLine(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"keyExists(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"keyExistsJson(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonAddress(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonAddressArray(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonBool(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonBoolArray(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonBytes(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonBytes32(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonBytes32Array(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonBytesArray(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonInt(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonIntArray(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonKeys(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonString(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonStringArray(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonUint(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonUintArray(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJson(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJson(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeAddress(string,string,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeAddress(string,string,address[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeBool(string,string,bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeBool(string,string,bool[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeBytes32(string,string,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeBytes32(string,string,bytes32[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeBytes(string,string,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeBytes(string,string,bytes[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeInt(string,string,int256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeInt(string,string,int256[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeJson(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeString(string,string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeString(string,string,string[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeUint(string,string,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeUint(string,string,uint256[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"writeJson(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"writeJson(string,string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"broadcast()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"broadcast(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"broadcast(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"startBroadcast()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"startBroadcast(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"startBroadcast(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"stopBroadcast()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseAddress(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseBool(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseBytes(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseBytes32(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseInt(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseUint(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"replace(string,string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"split(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"toLowercase(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"toString(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"toString(bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"toString(bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"toString(bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"toString(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"toString(int256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"toUppercase(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"trim(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqAbsDecimal(uint256,uint256,uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqAbsDecimal(uint256,uint256,uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqAbsDecimal(int256,int256,uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqAbsDecimal(int256,int256,uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqAbs(uint256,uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqAbs(uint256,uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqAbs(int256,int256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqAbs(int256,int256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqRelDecimal(uint256,uint256,uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqRelDecimal(uint256,uint256,uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqRelDecimal(int256,int256,uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqRelDecimal(int256,int256,uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqRel(uint256,uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqRel(uint256,uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqRel(int256,int256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqRel(int256,int256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEqDecimal(uint256,uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEqDecimal(uint256,uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEqDecimal(int256,int256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEqDecimal(int256,int256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(bool,bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(bool,bool,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(string,string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(bytes,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(bytes,bytes,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(bool[],bool[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(bool[],bool[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(uint256[],uint256[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(uint256[],uint256[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(int256[],int256[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(int256[],int256[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(address[],address[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(address[],address[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(bytes32[],bytes32[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(bytes32[],bytes32[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(string[],string[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(string[],string[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(bytes[],bytes[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(bytes[],bytes[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(int256,int256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(int256,int256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(address,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(address,address,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(bytes32,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(bytes32,bytes32,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertFalse(bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertFalse(bool,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGeDecimal(uint256,uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGeDecimal(uint256,uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGeDecimal(int256,int256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGeDecimal(int256,int256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGe(uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGe(uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGe(int256,int256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGe(int256,int256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGtDecimal(uint256,uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGtDecimal(uint256,uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGtDecimal(int256,int256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGtDecimal(int256,int256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGt(uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGt(uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGt(int256,int256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGt(int256,int256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLeDecimal(uint256,uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLeDecimal(uint256,uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLeDecimal(int256,int256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLeDecimal(int256,int256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLe(uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLe(uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLe(int256,int256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLe(int256,int256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLtDecimal(uint256,uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLtDecimal(uint256,uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLtDecimal(int256,int256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLtDecimal(int256,int256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLt(uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLt(uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLt(int256,int256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLt(int256,int256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEqDecimal(uint256,uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEqDecimal(uint256,uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEqDecimal(int256,int256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEqDecimal(int256,int256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(bool,bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(bool,bool,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(string,string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(bytes,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(bytes,bytes,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(bool[],bool[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(bool[],bool[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(uint256[],uint256[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(uint256[],uint256[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(int256[],int256[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(int256[],int256[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(address[],address[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(address[],address[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(bytes32[],bytes32[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(bytes32[],bytes32[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(string[],string[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(string[],string[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(bytes[],bytes[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(bytes[],bytes[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(int256,int256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(int256,int256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(address,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(address,address,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(bytes32,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(bytes32,bytes32,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertTrue(bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertTrue(bool,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assume(bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"breakpoint(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"breakpoint(string,bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"rpcUrl(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"rpcUrlStructs()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"rpcUrls()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"sleep(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"keyExistsToml(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlAddress(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlAddressArray(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlBool(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlBoolArray(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlBytes(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlBytes32(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlBytes32Array(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlBytesArray(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlInt(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlIntArray(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlKeys(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlString(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlStringArray(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlUint(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlUintArray(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseToml(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseToml(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"writeToml(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"writeToml(string,string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"computeCreate2Address(bytes32,bytes32,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"computeCreate2Address(bytes32,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"computeCreateAddress(address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"createWallet(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"createWallet(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"createWallet(uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"deriveKey(string,uint32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"deriveKey(string,string,uint32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"deriveKey(string,uint32,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"deriveKey(string,string,uint32,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getLabel(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getNonce((address,uint256,uint256,uint256))\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"label(address,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"rememberKey(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"sign((address,uint256,uint256,uint256),bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"toBase64URL(bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"toBase64URL(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"toBase64(bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"toBase64(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            }\n        },\n        \"Vm\": {\n            \"envAddress(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envAddress(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envBool(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envBool(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envBytes32(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envBytes32(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envBytes(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envBytes(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envInt(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envInt(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,string,address[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,string,bytes32[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,string,string[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,string,bytes[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,int256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,string,bool[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,string,uint256[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,string,int256[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envString(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envString(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envUint(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envUint(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"setEnv(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"accesses(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"addr(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"eth_getLogs(uint256,uint256,address,bytes32[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getBlockNumber()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getBlockTimestamp()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getMappingKeyAndParentOf(address,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getMappingLength(address,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getMappingSlotAt(address,bytes32,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getNonce(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getRecordedLogs()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"load(address,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"pauseGasMetering()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"record()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"recordLogs()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"resumeGasMetering()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"rpc(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"signP256(uint256,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"sign(uint256,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"startMappingRecording()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"startStateDiffRecording()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"stopAndReturnStateDiff()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"stopMappingRecording()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"closeFile(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"copyFile(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"createDir(string,bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"exists(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"ffi(string[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"fsMetadata(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getCode(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getDeployedCode(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"isDir(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"isFile(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"projectRoot()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"readDir(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"readDir(string,uint64)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"readDir(string,uint64,bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"readFile(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"readFileBinary(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"readLine(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"readLink(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"removeDir(string,bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"removeFile(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"tryFfi(string[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"unixTime()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"writeFile(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"writeFileBinary(string,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"writeLine(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"keyExists(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"keyExistsJson(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonAddress(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonAddressArray(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonBool(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonBoolArray(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonBytes(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonBytes32(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonBytes32Array(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonBytesArray(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonInt(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonIntArray(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonKeys(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonString(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonStringArray(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonUint(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonUintArray(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJson(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJson(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeAddress(string,string,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeAddress(string,string,address[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeBool(string,string,bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeBool(string,string,bool[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeBytes32(string,string,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeBytes32(string,string,bytes32[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeBytes(string,string,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeBytes(string,string,bytes[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeInt(string,string,int256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeInt(string,string,int256[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeJson(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeString(string,string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeString(string,string,string[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeUint(string,string,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeUint(string,string,uint256[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"writeJson(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"writeJson(string,string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"broadcast()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"broadcast(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"broadcast(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"startBroadcast()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"startBroadcast(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"startBroadcast(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"stopBroadcast()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseAddress(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseBool(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseBytes(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseBytes32(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseInt(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseUint(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"replace(string,string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"split(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"toLowercase(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"toString(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"toString(bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"toString(bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"toString(bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"toString(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"toString(int256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"toUppercase(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"trim(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqAbsDecimal(uint256,uint256,uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqAbsDecimal(uint256,uint256,uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqAbsDecimal(int256,int256,uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqAbsDecimal(int256,int256,uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqAbs(uint256,uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqAbs(uint256,uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqAbs(int256,int256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqAbs(int256,int256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqRelDecimal(uint256,uint256,uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqRelDecimal(uint256,uint256,uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqRelDecimal(int256,int256,uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqRelDecimal(int256,int256,uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqRel(uint256,uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqRel(uint256,uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqRel(int256,int256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqRel(int256,int256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEqDecimal(uint256,uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEqDecimal(uint256,uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEqDecimal(int256,int256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEqDecimal(int256,int256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(bool,bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(bool,bool,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(string,string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(bytes,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(bytes,bytes,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(bool[],bool[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(bool[],bool[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(uint256[],uint256[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(uint256[],uint256[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(int256[],int256[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(int256[],int256[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(address[],address[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(address[],address[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(bytes32[],bytes32[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(bytes32[],bytes32[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(string[],string[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(string[],string[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(bytes[],bytes[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(bytes[],bytes[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(int256,int256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(int256,int256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(address,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(address,address,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(bytes32,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(bytes32,bytes32,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertFalse(bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertFalse(bool,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGeDecimal(uint256,uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGeDecimal(uint256,uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGeDecimal(int256,int256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGeDecimal(int256,int256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGe(uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGe(uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGe(int256,int256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGe(int256,int256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGtDecimal(uint256,uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGtDecimal(uint256,uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGtDecimal(int256,int256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGtDecimal(int256,int256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGt(uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGt(uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGt(int256,int256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGt(int256,int256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLeDecimal(uint256,uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLeDecimal(uint256,uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLeDecimal(int256,int256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLeDecimal(int256,int256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLe(uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLe(uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLe(int256,int256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLe(int256,int256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLtDecimal(uint256,uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLtDecimal(uint256,uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLtDecimal(int256,int256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLtDecimal(int256,int256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLt(uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLt(uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLt(int256,int256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLt(int256,int256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEqDecimal(uint256,uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEqDecimal(uint256,uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEqDecimal(int256,int256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEqDecimal(int256,int256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(bool,bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(bool,bool,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(string,string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(bytes,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(bytes,bytes,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(bool[],bool[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(bool[],bool[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(uint256[],uint256[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(uint256[],uint256[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(int256[],int256[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(int256[],int256[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(address[],address[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(address[],address[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(bytes32[],bytes32[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(bytes32[],bytes32[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(string[],string[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(string[],string[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(bytes[],bytes[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(bytes[],bytes[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(int256,int256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(int256,int256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(address,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(address,address,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(bytes32,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(bytes32,bytes32,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertTrue(bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertTrue(bool,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assume(bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"breakpoint(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"breakpoint(string,bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"rpcUrl(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"rpcUrlStructs()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"rpcUrls()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"sleep(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"keyExistsToml(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlAddress(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlAddressArray(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlBool(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlBoolArray(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlBytes(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlBytes32(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlBytes32Array(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlBytesArray(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlInt(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlIntArray(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlKeys(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlString(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlStringArray(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlUint(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlUintArray(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseToml(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseToml(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"writeToml(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"writeToml(string,string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"computeCreate2Address(bytes32,bytes32,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"computeCreate2Address(bytes32,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"computeCreateAddress(address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"createWallet(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"createWallet(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"createWallet(uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"deriveKey(string,uint32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"deriveKey(string,string,uint32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"deriveKey(string,uint32,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"deriveKey(string,string,uint32,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getLabel(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getNonce((address,uint256,uint256,uint256))\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"label(address,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"rememberKey(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"sign((address,uint256,uint256,uint256),bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"toBase64URL(bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"toBase64URL(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"toBase64(bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"toBase64(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"activeFork()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"allowCheatcodes(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"chainId(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"clearMockedCalls()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"coinbase(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"createFork(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"createFork(string,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"createFork(string,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"createSelectFork(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"createSelectFork(string,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"createSelectFork(string,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"deal(address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"deleteSnapshot(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"deleteSnapshots()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"difficulty(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"dumpState(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"etch(address,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"fee(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"isPersistent(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"loadAllocs(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"makePersistent(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"makePersistent(address,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"makePersistent(address,address,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"makePersistent(address[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"mockCallRevert(address,bytes,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"mockCallRevert(address,uint256,bytes,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"mockCall(address,bytes,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"mockCall(address,uint256,bytes,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"prank(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"prank(address,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"prevrandao(bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"readCallers()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"resetNonce(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"revertTo(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"revertToAndDelete(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"revokePersistent(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"revokePersistent(address[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"roll(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"rollFork(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"rollFork(bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"rollFork(uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"rollFork(uint256,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"selectFork(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"setNonce(address,uint64)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"setNonceUnsafe(address,uint64)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"snapshot()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"startPrank(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"startPrank(address,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"stopPrank()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"store(address,bytes32,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"transact(bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"transact(uint256,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"txGasPrice(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"warp(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectCallMinGas(address,uint256,uint64,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectCallMinGas(address,uint256,uint64,bytes,uint64)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectCall(address,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectCall(address,bytes,uint64)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectCall(address,uint256,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectCall(address,uint256,bytes,uint64)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectCall(address,uint256,uint64,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectCall(address,uint256,uint64,bytes,uint64)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectEmit(bool,bool,bool,bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectEmit(bool,bool,bool,bool,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectEmit()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectEmit(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectRevert()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectRevert(bytes4)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectRevert(bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectSafeMemory(uint64,uint64)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectSafeMemoryCall(uint64,uint64)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"skip(bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"stopExpectSafeMemory()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            }\n        },\n        \"console\": {},\n        \"console2\": {},\n        \"IERC165\": {\n            \"supportsInterface(bytes4)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            }\n        },\n        \"IERC20\": {\n            \"totalSupply()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"balanceOf(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"transfer(address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"allowance(address,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"approve(address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"transferFrom(address,address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            }\n        },\n        \"IERC721\": {\n            \"supportsInterface(bytes4)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"balanceOf(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"ownerOf(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"safeTransferFrom(address,address,uint256,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"safeTransferFrom(address,address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"transferFrom(address,address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"approve(address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"setApprovalForAll(address,bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getApproved(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"isApprovedForAll(address,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            }\n        },\n        \"IERC721TokenReceiver\": {\n            \"onERC721Received(address,address,uint256,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            }\n        },\n        \"IERC721Metadata\": {\n            \"balanceOf(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"ownerOf(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"safeTransferFrom(address,address,uint256,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"safeTransferFrom(address,address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"transferFrom(address,address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"approve(address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"setApprovalForAll(address,bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getApproved(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"isApprovedForAll(address,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"supportsInterface(bytes4)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"name()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"symbol()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"tokenURI(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            }\n        },\n        \"IERC721Enumerable\": {\n            \"balanceOf(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"ownerOf(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"safeTransferFrom(address,address,uint256,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"safeTransferFrom(address,address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"transferFrom(address,address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"approve(address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"setApprovalForAll(address,bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getApproved(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"isApprovedForAll(address,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"supportsInterface(bytes4)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"totalSupply()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"tokenByIndex(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"tokenOfOwnerByIndex(address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            }\n        },\n        \"IMulticall3\": {\n            \"aggregate((address,bytes)[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"aggregate3((address,bool,bytes)[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"aggregate3Value((address,bool,uint256,bytes)[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"blockAndAggregate((address,bytes)[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getBasefee()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getBlockHash(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getBlockNumber()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getChainId()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getCurrentBlockCoinbase()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getCurrentBlockDifficulty()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getCurrentBlockGasLimit()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getCurrentBlockTimestamp()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getEthBalance(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getLastBlockHash()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"tryAggregate(bool,(address,bytes)[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"tryBlockAndAggregate(bool,(address,bytes)[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            }\n        },\n        \"MockERC20\": {\n            \"approve(address,uint256)\": {\n                \"impacts\": [\n                    \"transferFrom(address,address,uint256)\"\n                ],\n                \"is_impacted_by\": []\n            },\n            \"transfer(address,uint256)\": {\n                \"impacts\": [\n                    \"transfer(address,uint256)\",\n                    \"transferFrom(address,address,uint256)\",\n                    \"mint(address,uint256)\",\n                    \"burn(address,uint256)\"\n                ],\n                \"is_impacted_by\": [\n                    \"transfer(address,uint256)\",\n                    \"transferFrom(address,address,uint256)\",\n                    \"mint(address,uint256)\",\n                    \"burn(address,uint256)\"\n                ]\n            },\n            \"transferFrom(address,address,uint256)\": {\n                \"impacts\": [\n                    \"transfer(address,uint256)\",\n                    \"transferFrom(address,address,uint256)\",\n                    \"mint(address,uint256)\",\n                    \"burn(address,uint256)\"\n                ],\n                \"is_impacted_by\": [\n                    \"approve(address,uint256)\",\n                    \"transfer(address,uint256)\",\n                    \"transferFrom(address,address,uint256)\",\n                    \"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\",\n                    \"mint(address,uint256)\",\n                    \"burn(address,uint256)\"\n                ]\n            },\n            \"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\": {\n                \"impacts\": [\n                    \"transferFrom(address,address,uint256)\",\n                    \"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\"\n                ],\n                \"is_impacted_by\": [\n                    \"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\",\n                    \"constructor(string,string,uint8)\"\n                ]\n            },\n            \"DOMAIN_SEPARATOR()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"constructor(string,string,uint8)\"\n                ]\n            },\n            \"constructor(string,string,uint8)\": {\n                \"impacts\": [\n                    \"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\",\n                    \"DOMAIN_SEPARATOR()\",\n                    \"constructor(string,string,uint8)\"\n                ],\n                \"is_impacted_by\": [\n                    \"constructor(string,string,uint8)\"\n                ]\n            },\n            \"mint(address,uint256)\": {\n                \"impacts\": [\n                    \"transfer(address,uint256)\",\n                    \"transferFrom(address,address,uint256)\",\n                    \"mint(address,uint256)\",\n                    \"burn(address,uint256)\"\n                ],\n                \"is_impacted_by\": [\n                    \"transfer(address,uint256)\",\n                    \"transferFrom(address,address,uint256)\",\n                    \"mint(address,uint256)\",\n                    \"burn(address,uint256)\"\n                ]\n            },\n            \"burn(address,uint256)\": {\n                \"impacts\": [\n                    \"transfer(address,uint256)\",\n                    \"transferFrom(address,address,uint256)\",\n                    \"mint(address,uint256)\",\n                    \"burn(address,uint256)\"\n                ],\n                \"is_impacted_by\": [\n                    \"transfer(address,uint256)\",\n                    \"transferFrom(address,address,uint256)\",\n                    \"mint(address,uint256)\",\n                    \"burn(address,uint256)\"\n                ]\n            }\n        },\n        \"MockERC721\": {\n            \"name()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"initialize(string,string)\"\n                ]\n            },\n            \"symbol()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"initialize(string,string)\"\n                ]\n            },\n            \"tokenURI(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"ownerOf(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"transferFrom(address,address,uint256)\",\n                    \"safeTransferFrom(address,address,uint256)\",\n                    \"safeTransferFrom(address,address,uint256,bytes)\"\n                ]\n            },\n            \"balanceOf(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"transferFrom(address,address,uint256)\",\n                    \"safeTransferFrom(address,address,uint256)\",\n                    \"safeTransferFrom(address,address,uint256,bytes)\"\n                ]\n            },\n            \"getApproved(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"approve(address,uint256)\",\n                    \"transferFrom(address,address,uint256)\",\n                    \"safeTransferFrom(address,address,uint256)\",\n                    \"safeTransferFrom(address,address,uint256,bytes)\"\n                ]\n            },\n            \"isApprovedForAll(address,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setApprovalForAll(address,bool)\"\n                ]\n            },\n            \"initialize(string,string)\": {\n                \"impacts\": [\n                    \"name()\",\n                    \"symbol()\",\n                    \"initialize(string,string)\"\n                ],\n                \"is_impacted_by\": [\n                    \"initialize(string,string)\"\n                ]\n            },\n            \"approve(address,uint256)\": {\n                \"impacts\": [\n                    \"getApproved(uint256)\",\n                    \"transferFrom(address,address,uint256)\",\n                    \"safeTransferFrom(address,address,uint256)\",\n                    \"safeTransferFrom(address,address,uint256,bytes)\"\n                ],\n                \"is_impacted_by\": [\n                    \"setApprovalForAll(address,bool)\",\n                    \"transferFrom(address,address,uint256)\",\n                    \"safeTransferFrom(address,address,uint256)\",\n                    \"safeTransferFrom(address,address,uint256,bytes)\"\n                ]\n            },\n            \"setApprovalForAll(address,bool)\": {\n                \"impacts\": [\n                    \"isApprovedForAll(address,address)\",\n                    \"approve(address,uint256)\",\n                    \"transferFrom(address,address,uint256)\",\n                    \"safeTransferFrom(address,address,uint256)\",\n                    \"safeTransferFrom(address,address,uint256,bytes)\"\n                ],\n                \"is_impacted_by\": []\n            },\n            \"transferFrom(address,address,uint256)\": {\n                \"impacts\": [\n                    \"ownerOf(uint256)\",\n                    \"balanceOf(address)\",\n                    \"getApproved(uint256)\",\n                    \"approve(address,uint256)\",\n                    \"transferFrom(address,address,uint256)\",\n                    \"safeTransferFrom(address,address,uint256)\",\n                    \"safeTransferFrom(address,address,uint256,bytes)\"\n                ],\n                \"is_impacted_by\": [\n                    \"approve(address,uint256)\",\n                    \"setApprovalForAll(address,bool)\",\n                    \"transferFrom(address,address,uint256)\",\n                    \"safeTransferFrom(address,address,uint256)\",\n                    \"safeTransferFrom(address,address,uint256,bytes)\"\n                ]\n            },\n            \"safeTransferFrom(address,address,uint256)\": {\n                \"impacts\": [\n                    \"ownerOf(uint256)\",\n                    \"balanceOf(address)\",\n                    \"getApproved(uint256)\",\n                    \"approve(address,uint256)\",\n                    \"transferFrom(address,address,uint256)\",\n                    \"safeTransferFrom(address,address,uint256)\",\n                    \"safeTransferFrom(address,address,uint256,bytes)\"\n                ],\n                \"is_impacted_by\": [\n                    \"approve(address,uint256)\",\n                    \"setApprovalForAll(address,bool)\",\n                    \"transferFrom(address,address,uint256)\",\n                    \"safeTransferFrom(address,address,uint256)\",\n                    \"safeTransferFrom(address,address,uint256,bytes)\"\n                ]\n            },\n            \"safeTransferFrom(address,address,uint256,bytes)\": {\n                \"impacts\": [\n                    \"ownerOf(uint256)\",\n                    \"balanceOf(address)\",\n                    \"getApproved(uint256)\",\n                    \"approve(address,uint256)\",\n                    \"transferFrom(address,address,uint256)\",\n                    \"safeTransferFrom(address,address,uint256)\",\n                    \"safeTransferFrom(address,address,uint256,bytes)\"\n                ],\n                \"is_impacted_by\": [\n                    \"approve(address,uint256)\",\n                    \"setApprovalForAll(address,bool)\",\n                    \"transferFrom(address,address,uint256)\",\n                    \"safeTransferFrom(address,address,uint256)\",\n                    \"safeTransferFrom(address,address,uint256,bytes)\"\n                ]\n            },\n            \"supportsInterface(bytes4)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            }\n        },\n        \"safeconsole\": {},\n        \"IERC1363\": {\n            \"supportsInterface(bytes4)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"totalSupply()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"balanceOf(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"transfer(address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"allowance(address,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"approve(address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"transferFrom(address,address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"transferAndCall(address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"transferAndCall(address,uint256,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"transferFromAndCall(address,address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"transferFromAndCall(address,address,uint256,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"approveAndCall(address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"approveAndCall(address,uint256,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            }\n        },\n        \"SafeERC20\": {},\n        \"ReentrancyGuard\": {},\n        \"ActorManager\": {},\n        \"AssetManager\": {},\n        \"EnumerableSet\": {},\n        \"ERC20\": {\n            \"approve(address,uint256)\": {\n                \"impacts\": [\n                    \"transferFrom(address,address,uint256)\"\n                ],\n                \"is_impacted_by\": []\n            },\n            \"transfer(address,uint256)\": {\n                \"impacts\": [\n                    \"transfer(address,uint256)\",\n                    \"transferFrom(address,address,uint256)\"\n                ],\n                \"is_impacted_by\": [\n                    \"transfer(address,uint256)\",\n                    \"transferFrom(address,address,uint256)\"\n                ]\n            },\n            \"transferFrom(address,address,uint256)\": {\n                \"impacts\": [\n                    \"transfer(address,uint256)\",\n                    \"transferFrom(address,address,uint256)\"\n                ],\n                \"is_impacted_by\": [\n                    \"approve(address,uint256)\",\n                    \"transfer(address,uint256)\",\n                    \"transferFrom(address,address,uint256)\",\n                    \"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\"\n                ]\n            },\n            \"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\": {\n                \"impacts\": [\n                    \"transferFrom(address,address,uint256)\",\n                    \"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\"\n                ],\n                \"is_impacted_by\": [\n                    \"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\"\n                ]\n            },\n            \"DOMAIN_SEPARATOR()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            }\n        },\n        \"Panic\": {},\n        \"Utils\": {},\n        \"CounterScript\": {\n            \"setUp()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"run()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            }\n        },\n        \"RewardsManager\": {\n            \"constructor()\": {\n                \"impacts\": [\n                    \"currentEpoch()\",\n                    \"getEpochData(uint256)\",\n                    \"notifyTransfer(address,address,uint256)\",\n                    \"accrueVault(uint256,address)\",\n                    \"getVaultTimeLeftToAccrue(uint256,address)\",\n                    \"getTotalSupplyAtEpoch(uint256,address)\",\n                    \"accrueUser(uint256,address,address)\",\n                    \"getUserTimeLeftToAccrue(uint256,address,address)\",\n                    \"getBalanceAtEpoch(uint256,address,address)\",\n                    \"claimRewards(uint256[],address[],address[],address[])\",\n                    \"claimRewardReferenceEmitting(uint256,address,address,address)\",\n                    \"claimRewardEmitting(uint256,address,address,address)\",\n                    \"claimReward(uint256,address,address,address)\",\n                    \"claimBulkTokensOverMultipleEpochs(uint256,uint256,address,address[],address)\",\n                    \"addBulkRewardsLinearly(uint256,uint256,address,address,uint256)\",\n                    \"addBulkRewards(uint256,uint256,address,address,uint256[])\",\n                    \"addReward(uint256,address,address,uint256)\",\n                    \"getUserNextEpochInfo(uint256,address,address,uint256)\",\n                    \"getVaultNextEpochInfo(uint256,address,uint256)\",\n                    \"reap((uint256,uint256,address,address[]))\",\n                    \"tear((uint256,uint256,address,address[]))\",\n                    \"getClaimableBulkRewards((uint256,uint256,address,address[]),address)\"\n                ],\n                \"is_impacted_by\": []\n            },\n            \"currentEpoch()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"constructor()\"\n                ]\n            },\n            \"getEpochData(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"constructor()\"\n                ]\n            },\n            \"notifyTransfer(address,address,uint256)\": {\n                \"impacts\": [\n                    \"notifyTransfer(address,address,uint256)\",\n                    \"accrueVault(uint256,address)\",\n                    \"getVaultTimeLeftToAccrue(uint256,address)\",\n                    \"getTotalSupplyAtEpoch(uint256,address)\",\n                    \"accrueUser(uint256,address,address)\",\n                    \"getUserTimeLeftToAccrue(uint256,address,address)\",\n                    \"getBalanceAtEpoch(uint256,address,address)\",\n                    \"claimRewards(uint256[],address[],address[],address[])\",\n                    \"claimRewardReferenceEmitting(uint256,address,address,address)\",\n                    \"claimRewardEmitting(uint256,address,address,address)\",\n                    \"claimReward(uint256,address,address,address)\",\n                    \"claimBulkTokensOverMultipleEpochs(uint256,uint256,address,address[],address)\",\n                    \"getUserNextEpochInfo(uint256,address,address,uint256)\",\n                    \"getVaultNextEpochInfo(uint256,address,uint256)\",\n                    \"reap((uint256,uint256,address,address[]))\",\n                    \"tear((uint256,uint256,address,address[]))\",\n                    \"getClaimableBulkRewards((uint256,uint256,address,address[]),address)\"\n                ],\n                \"is_impacted_by\": [\n                    \"constructor()\",\n                    \"notifyTransfer(address,address,uint256)\",\n                    \"accrueVault(uint256,address)\",\n                    \"accrueUser(uint256,address,address)\",\n                    \"claimRewardReferenceEmitting(uint256,address,address,address)\",\n                    \"claimBulkTokensOverMultipleEpochs(uint256,uint256,address,address[],address)\",\n                    \"reap((uint256,uint256,address,address[]))\",\n                    \"tear((uint256,uint256,address,address[]))\"\n                ]\n            },\n            \"accrueVault(uint256,address)\": {\n                \"impacts\": [\n                    \"notifyTransfer(address,address,uint256)\",\n                    \"accrueVault(uint256,address)\",\n                    \"getVaultTimeLeftToAccrue(uint256,address)\",\n                    \"getTotalSupplyAtEpoch(uint256,address)\",\n                    \"claimRewards(uint256[],address[],address[],address[])\",\n                    \"claimRewardReferenceEmitting(uint256,address,address,address)\",\n                    \"claimRewardEmitting(uint256,address,address,address)\",\n                    \"claimReward(uint256,address,address,address)\",\n                    \"claimBulkTokensOverMultipleEpochs(uint256,uint256,address,address[],address)\",\n                    \"getVaultNextEpochInfo(uint256,address,uint256)\",\n                    \"reap((uint256,uint256,address,address[]))\",\n                    \"tear((uint256,uint256,address,address[]))\",\n                    \"getClaimableBulkRewards((uint256,uint256,address,address[]),address)\"\n                ],\n                \"is_impacted_by\": [\n                    \"constructor()\",\n                    \"notifyTransfer(address,address,uint256)\",\n                    \"accrueVault(uint256,address)\",\n                    \"claimRewardReferenceEmitting(uint256,address,address,address)\",\n                    \"claimBulkTokensOverMultipleEpochs(uint256,uint256,address,address[],address)\"\n                ]\n            },\n            \"getVaultTimeLeftToAccrue(uint256,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"constructor()\",\n                    \"notifyTransfer(address,address,uint256)\",\n                    \"accrueVault(uint256,address)\",\n                    \"claimRewardReferenceEmitting(uint256,address,address,address)\",\n                    \"claimBulkTokensOverMultipleEpochs(uint256,uint256,address,address[],address)\"\n                ]\n            },\n            \"getTotalSupplyAtEpoch(uint256,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"constructor()\",\n                    \"notifyTransfer(address,address,uint256)\",\n                    \"accrueVault(uint256,address)\",\n                    \"claimRewardReferenceEmitting(uint256,address,address,address)\",\n                    \"claimBulkTokensOverMultipleEpochs(uint256,uint256,address,address[],address)\"\n                ]\n            },\n            \"accrueUser(uint256,address,address)\": {\n                \"impacts\": [\n                    \"notifyTransfer(address,address,uint256)\",\n                    \"accrueUser(uint256,address,address)\",\n                    \"getUserTimeLeftToAccrue(uint256,address,address)\",\n                    \"getBalanceAtEpoch(uint256,address,address)\",\n                    \"claimRewards(uint256[],address[],address[],address[])\",\n                    \"claimRewardReferenceEmitting(uint256,address,address,address)\",\n                    \"claimRewardEmitting(uint256,address,address,address)\",\n                    \"claimReward(uint256,address,address,address)\",\n                    \"claimBulkTokensOverMultipleEpochs(uint256,uint256,address,address[],address)\",\n                    \"getUserNextEpochInfo(uint256,address,address,uint256)\",\n                    \"reap((uint256,uint256,address,address[]))\",\n                    \"tear((uint256,uint256,address,address[]))\",\n                    \"getClaimableBulkRewards((uint256,uint256,address,address[]),address)\"\n                ],\n                \"is_impacted_by\": [\n                    \"constructor()\",\n                    \"notifyTransfer(address,address,uint256)\",\n                    \"accrueUser(uint256,address,address)\",\n                    \"claimRewardReferenceEmitting(uint256,address,address,address)\",\n                    \"claimBulkTokensOverMultipleEpochs(uint256,uint256,address,address[],address)\",\n                    \"reap((uint256,uint256,address,address[]))\",\n                    \"tear((uint256,uint256,address,address[]))\"\n                ]\n            },\n            \"getUserTimeLeftToAccrue(uint256,address,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"constructor()\",\n                    \"notifyTransfer(address,address,uint256)\",\n                    \"accrueUser(uint256,address,address)\",\n                    \"claimRewardReferenceEmitting(uint256,address,address,address)\",\n                    \"claimBulkTokensOverMultipleEpochs(uint256,uint256,address,address[],address)\",\n                    \"reap((uint256,uint256,address,address[]))\",\n                    \"tear((uint256,uint256,address,address[]))\"\n                ]\n            },\n            \"getBalanceAtEpoch(uint256,address,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"constructor()\",\n                    \"notifyTransfer(address,address,uint256)\",\n                    \"accrueUser(uint256,address,address)\",\n                    \"claimRewardReferenceEmitting(uint256,address,address,address)\",\n                    \"claimBulkTokensOverMultipleEpochs(uint256,uint256,address,address[],address)\",\n                    \"reap((uint256,uint256,address,address[]))\",\n                    \"tear((uint256,uint256,address,address[]))\"\n                ]\n            },\n            \"claimRewards(uint256[],address[],address[],address[])\": {\n                \"impacts\": [\n                    \"claimRewards(uint256[],address[],address[],address[])\",\n                    \"claimRewardReferenceEmitting(uint256,address,address,address)\",\n                    \"claimRewardEmitting(uint256,address,address,address)\",\n                    \"claimReward(uint256,address,address,address)\",\n                    \"claimBulkTokensOverMultipleEpochs(uint256,uint256,address,address[],address)\",\n                    \"reap((uint256,uint256,address,address[]))\",\n                    \"tear((uint256,uint256,address,address[]))\",\n                    \"getClaimableBulkRewards((uint256,uint256,address,address[]),address)\"\n                ],\n                \"is_impacted_by\": [\n                    \"constructor()\",\n                    \"notifyTransfer(address,address,uint256)\",\n                    \"accrueVault(uint256,address)\",\n                    \"accrueUser(uint256,address,address)\",\n                    \"claimRewards(uint256[],address[],address[],address[])\",\n                    \"claimRewardReferenceEmitting(uint256,address,address,address)\",\n                    \"claimRewardEmitting(uint256,address,address,address)\",\n                    \"claimReward(uint256,address,address,address)\",\n                    \"claimBulkTokensOverMultipleEpochs(uint256,uint256,address,address[],address)\",\n                    \"addBulkRewardsLinearly(uint256,uint256,address,address,uint256)\",\n                    \"addBulkRewards(uint256,uint256,address,address,uint256[])\",\n                    \"addReward(uint256,address,address,uint256)\",\n                    \"reap((uint256,uint256,address,address[]))\",\n                    \"tear((uint256,uint256,address,address[]))\"\n                ]\n            },\n            \"claimRewardReferenceEmitting(uint256,address,address,address)\": {\n                \"impacts\": [\n                    \"notifyTransfer(address,address,uint256)\",\n                    \"accrueVault(uint256,address)\",\n                    \"getVaultTimeLeftToAccrue(uint256,address)\",\n                    \"getTotalSupplyAtEpoch(uint256,address)\",\n                    \"accrueUser(uint256,address,address)\",\n                    \"getUserTimeLeftToAccrue(uint256,address,address)\",\n                    \"getBalanceAtEpoch(uint256,address,address)\",\n                    \"claimRewards(uint256[],address[],address[],address[])\",\n                    \"claimRewardReferenceEmitting(uint256,address,address,address)\",\n                    \"claimRewardEmitting(uint256,address,address,address)\",\n                    \"claimReward(uint256,address,address,address)\",\n                    \"claimBulkTokensOverMultipleEpochs(uint256,uint256,address,address[],address)\",\n                    \"getUserNextEpochInfo(uint256,address,address,uint256)\",\n                    \"getVaultNextEpochInfo(uint256,address,uint256)\",\n                    \"reap((uint256,uint256,address,address[]))\",\n                    \"tear((uint256,uint256,address,address[]))\",\n                    \"getClaimableBulkRewards((uint256,uint256,address,address[]),address)\"\n                ],\n                \"is_impacted_by\": [\n                    \"constructor()\",\n                    \"notifyTransfer(address,address,uint256)\",\n                    \"accrueVault(uint256,address)\",\n                    \"accrueUser(uint256,address,address)\",\n                    \"claimRewards(uint256[],address[],address[],address[])\",\n                    \"claimRewardReferenceEmitting(uint256,address,address,address)\",\n                    \"claimRewardEmitting(uint256,address,address,address)\",\n                    \"claimReward(uint256,address,address,address)\",\n                    \"claimBulkTokensOverMultipleEpochs(uint256,uint256,address,address[],address)\",\n                    \"addBulkRewardsLinearly(uint256,uint256,address,address,uint256)\",\n                    \"addBulkRewards(uint256,uint256,address,address,uint256[])\",\n                    \"addReward(uint256,address,address,uint256)\",\n                    \"reap((uint256,uint256,address,address[]))\",\n                    \"tear((uint256,uint256,address,address[]))\"\n                ]\n            },\n            \"claimRewardEmitting(uint256,address,address,address)\": {\n                \"impacts\": [\n                    \"claimRewards(uint256[],address[],address[],address[])\",\n                    \"claimRewardReferenceEmitting(uint256,address,address,address)\",\n                    \"claimRewardEmitting(uint256,address,address,address)\",\n                    \"claimReward(uint256,address,address,address)\",\n                    \"claimBulkTokensOverMultipleEpochs(uint256,uint256,address,address[],address)\",\n                    \"reap((uint256,uint256,address,address[]))\",\n                    \"tear((uint256,uint256,address,address[]))\",\n                    \"getClaimableBulkRewards((uint256,uint256,address,address[]),address)\"\n                ],\n                \"is_impacted_by\": [\n                    \"constructor()\",\n                    \"notifyTransfer(address,address,uint256)\",\n                    \"accrueVault(uint256,address)\",\n                    \"accrueUser(uint256,address,address)\",\n                    \"claimRewards(uint256[],address[],address[],address[])\",\n                    \"claimRewardReferenceEmitting(uint256,address,address,address)\",\n                    \"claimRewardEmitting(uint256,address,address,address)\",\n                    \"claimReward(uint256,address,address,address)\",\n                    \"claimBulkTokensOverMultipleEpochs(uint256,uint256,address,address[],address)\",\n                    \"addBulkRewardsLinearly(uint256,uint256,address,address,uint256)\",\n                    \"addBulkRewards(uint256,uint256,address,address,uint256[])\",\n                    \"addReward(uint256,address,address,uint256)\",\n                    \"reap((uint256,uint256,address,address[]))\",\n                    \"tear((uint256,uint256,address,address[]))\"\n                ]\n            },\n            \"claimReward(uint256,address,address,address)\": {\n                \"impacts\": [\n                    \"claimRewards(uint256[],address[],address[],address[])\",\n                    \"claimRewardReferenceEmitting(uint256,address,address,address)\",\n                    \"claimRewardEmitting(uint256,address,address,address)\",\n                    \"claimReward(uint256,address,address,address)\",\n                    \"claimBulkTokensOverMultipleEpochs(uint256,uint256,address,address[],address)\",\n                    \"reap((uint256,uint256,address,address[]))\",\n                    \"tear((uint256,uint256,address,address[]))\",\n                    \"getClaimableBulkRewards((uint256,uint256,address,address[]),address)\"\n                ],\n                \"is_impacted_by\": [\n                    \"constructor()\",\n                    \"notifyTransfer(address,address,uint256)\",\n                    \"accrueVault(uint256,address)\",\n                    \"accrueUser(uint256,address,address)\",\n                    \"claimRewards(uint256[],address[],address[],address[])\",\n                    \"claimRewardReferenceEmitting(uint256,address,address,address)\",\n                    \"claimRewardEmitting(uint256,address,address,address)\",\n                    \"claimReward(uint256,address,address,address)\",\n                    \"claimBulkTokensOverMultipleEpochs(uint256,uint256,address,address[],address)\",\n                    \"addBulkRewardsLinearly(uint256,uint256,address,address,uint256)\",\n                    \"addBulkRewards(uint256,uint256,address,address,uint256[])\",\n                    \"addReward(uint256,address,address,uint256)\",\n                    \"reap((uint256,uint256,address,address[]))\",\n                    \"tear((uint256,uint256,address,address[]))\"\n                ]\n            },\n            \"claimBulkTokensOverMultipleEpochs(uint256,uint256,address,address[],address)\": {\n                \"impacts\": [\n                    \"notifyTransfer(address,address,uint256)\",\n                    \"accrueVault(uint256,address)\",\n                    \"getVaultTimeLeftToAccrue(uint256,address)\",\n                    \"getTotalSupplyAtEpoch(uint256,address)\",\n                    \"accrueUser(uint256,address,address)\",\n                    \"getUserTimeLeftToAccrue(uint256,address,address)\",\n                    \"getBalanceAtEpoch(uint256,address,address)\",\n                    \"claimRewards(uint256[],address[],address[],address[])\",\n                    \"claimRewardReferenceEmitting(uint256,address,address,address)\",\n                    \"claimRewardEmitting(uint256,address,address,address)\",\n                    \"claimReward(uint256,address,address,address)\",\n                    \"claimBulkTokensOverMultipleEpochs(uint256,uint256,address,address[],address)\",\n                    \"getUserNextEpochInfo(uint256,address,address,uint256)\",\n                    \"getVaultNextEpochInfo(uint256,address,uint256)\",\n                    \"reap((uint256,uint256,address,address[]))\",\n                    \"tear((uint256,uint256,address,address[]))\",\n                    \"getClaimableBulkRewards((uint256,uint256,address,address[]),address)\"\n                ],\n                \"is_impacted_by\": [\n                    \"constructor()\",\n                    \"notifyTransfer(address,address,uint256)\",\n                    \"accrueVault(uint256,address)\",\n                    \"accrueUser(uint256,address,address)\",\n                    \"claimRewards(uint256[],address[],address[],address[])\",\n                    \"claimRewardReferenceEmitting(uint256,address,address,address)\",\n                    \"claimRewardEmitting(uint256,address,address,address)\",\n                    \"claimReward(uint256,address,address,address)\",\n                    \"claimBulkTokensOverMultipleEpochs(uint256,uint256,address,address[],address)\",\n                    \"addBulkRewardsLinearly(uint256,uint256,address,address,uint256)\",\n                    \"addBulkRewards(uint256,uint256,address,address,uint256[])\",\n                    \"addReward(uint256,address,address,uint256)\",\n                    \"reap((uint256,uint256,address,address[]))\",\n                    \"tear((uint256,uint256,address,address[]))\"\n                ]\n            },\n            \"addBulkRewardsLinearly(uint256,uint256,address,address,uint256)\": {\n                \"impacts\": [\n                    \"claimRewards(uint256[],address[],address[],address[])\",\n                    \"claimRewardReferenceEmitting(uint256,address,address,address)\",\n                    \"claimRewardEmitting(uint256,address,address,address)\",\n                    \"claimReward(uint256,address,address,address)\",\n                    \"claimBulkTokensOverMultipleEpochs(uint256,uint256,address,address[],address)\",\n                    \"addBulkRewardsLinearly(uint256,uint256,address,address,uint256)\",\n                    \"addBulkRewards(uint256,uint256,address,address,uint256[])\",\n                    \"addReward(uint256,address,address,uint256)\",\n                    \"reap((uint256,uint256,address,address[]))\",\n                    \"tear((uint256,uint256,address,address[]))\",\n                    \"getClaimableBulkRewards((uint256,uint256,address,address[]),address)\"\n                ],\n                \"is_impacted_by\": [\n                    \"constructor()\",\n                    \"addBulkRewardsLinearly(uint256,uint256,address,address,uint256)\",\n                    \"addBulkRewards(uint256,uint256,address,address,uint256[])\",\n                    \"addReward(uint256,address,address,uint256)\"\n                ]\n            },\n            \"addBulkRewards(uint256,uint256,address,address,uint256[])\": {\n                \"impacts\": [\n                    \"claimRewards(uint256[],address[],address[],address[])\",\n                    \"claimRewardReferenceEmitting(uint256,address,address,address)\",\n                    \"claimRewardEmitting(uint256,address,address,address)\",\n                    \"claimReward(uint256,address,address,address)\",\n                    \"claimBulkTokensOverMultipleEpochs(uint256,uint256,address,address[],address)\",\n                    \"addBulkRewardsLinearly(uint256,uint256,address,address,uint256)\",\n                    \"addBulkRewards(uint256,uint256,address,address,uint256[])\",\n                    \"addReward(uint256,address,address,uint256)\",\n                    \"reap((uint256,uint256,address,address[]))\",\n                    \"tear((uint256,uint256,address,address[]))\",\n                    \"getClaimableBulkRewards((uint256,uint256,address,address[]),address)\"\n                ],\n                \"is_impacted_by\": [\n                    \"constructor()\",\n                    \"addBulkRewardsLinearly(uint256,uint256,address,address,uint256)\",\n                    \"addBulkRewards(uint256,uint256,address,address,uint256[])\",\n                    \"addReward(uint256,address,address,uint256)\"\n                ]\n            },\n            \"addReward(uint256,address,address,uint256)\": {\n                \"impacts\": [\n                    \"claimRewards(uint256[],address[],address[],address[])\",\n                    \"claimRewardReferenceEmitting(uint256,address,address,address)\",\n                    \"claimRewardEmitting(uint256,address,address,address)\",\n                    \"claimReward(uint256,address,address,address)\",\n                    \"claimBulkTokensOverMultipleEpochs(uint256,uint256,address,address[],address)\",\n                    \"addBulkRewardsLinearly(uint256,uint256,address,address,uint256)\",\n                    \"addBulkRewards(uint256,uint256,address,address,uint256[])\",\n                    \"addReward(uint256,address,address,uint256)\",\n                    \"reap((uint256,uint256,address,address[]))\",\n                    \"tear((uint256,uint256,address,address[]))\",\n                    \"getClaimableBulkRewards((uint256,uint256,address,address[]),address)\"\n                ],\n                \"is_impacted_by\": [\n                    \"constructor()\",\n                    \"addBulkRewardsLinearly(uint256,uint256,address,address,uint256)\",\n                    \"addBulkRewards(uint256,uint256,address,address,uint256[])\",\n                    \"addReward(uint256,address,address,uint256)\"\n                ]\n            },\n            \"getUserNextEpochInfo(uint256,address,address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"constructor()\",\n                    \"notifyTransfer(address,address,uint256)\",\n                    \"accrueUser(uint256,address,address)\",\n                    \"claimRewardReferenceEmitting(uint256,address,address,address)\",\n                    \"claimBulkTokensOverMultipleEpochs(uint256,uint256,address,address[],address)\",\n                    \"reap((uint256,uint256,address,address[]))\",\n                    \"tear((uint256,uint256,address,address[]))\"\n                ]\n            },\n            \"getVaultNextEpochInfo(uint256,address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"constructor()\",\n                    \"notifyTransfer(address,address,uint256)\",\n                    \"accrueVault(uint256,address)\",\n                    \"claimRewardReferenceEmitting(uint256,address,address,address)\",\n                    \"claimBulkTokensOverMultipleEpochs(uint256,uint256,address,address[],address)\"\n                ]\n            },\n            \"reap((uint256,uint256,address,address[]))\": {\n                \"impacts\": [\n                    \"notifyTransfer(address,address,uint256)\",\n                    \"accrueUser(uint256,address,address)\",\n                    \"getUserTimeLeftToAccrue(uint256,address,address)\",\n                    \"getBalanceAtEpoch(uint256,address,address)\",\n                    \"claimRewards(uint256[],address[],address[],address[])\",\n                    \"claimRewardReferenceEmitting(uint256,address,address,address)\",\n                    \"claimRewardEmitting(uint256,address,address,address)\",\n                    \"claimReward(uint256,address,address,address)\",\n                    \"claimBulkTokensOverMultipleEpochs(uint256,uint256,address,address[],address)\",\n                    \"getUserNextEpochInfo(uint256,address,address,uint256)\",\n                    \"reap((uint256,uint256,address,address[]))\",\n                    \"tear((uint256,uint256,address,address[]))\",\n                    \"getClaimableBulkRewards((uint256,uint256,address,address[]),address)\"\n                ],\n                \"is_impacted_by\": [\n                    \"constructor()\",\n                    \"notifyTransfer(address,address,uint256)\",\n                    \"accrueVault(uint256,address)\",\n                    \"accrueUser(uint256,address,address)\",\n                    \"claimRewards(uint256[],address[],address[],address[])\",\n                    \"claimRewardReferenceEmitting(uint256,address,address,address)\",\n                    \"claimRewardEmitting(uint256,address,address,address)\",\n                    \"claimReward(uint256,address,address,address)\",\n                    \"claimBulkTokensOverMultipleEpochs(uint256,uint256,address,address[],address)\",\n                    \"addBulkRewardsLinearly(uint256,uint256,address,address,uint256)\",\n                    \"addBulkRewards(uint256,uint256,address,address,uint256[])\",\n                    \"addReward(uint256,address,address,uint256)\",\n                    \"reap((uint256,uint256,address,address[]))\",\n                    \"tear((uint256,uint256,address,address[]))\"\n                ]\n            },\n            \"tear((uint256,uint256,address,address[]))\": {\n                \"impacts\": [\n                    \"notifyTransfer(address,address,uint256)\",\n                    \"accrueUser(uint256,address,address)\",\n                    \"getUserTimeLeftToAccrue(uint256,address,address)\",\n                    \"getBalanceAtEpoch(uint256,address,address)\",\n                    \"claimRewards(uint256[],address[],address[],address[])\",\n                    \"claimRewardReferenceEmitting(uint256,address,address,address)\",\n                    \"claimRewardEmitting(uint256,address,address,address)\",\n                    \"claimReward(uint256,address,address,address)\",\n                    \"claimBulkTokensOverMultipleEpochs(uint256,uint256,address,address[],address)\",\n                    \"getUserNextEpochInfo(uint256,address,address,uint256)\",\n                    \"reap((uint256,uint256,address,address[]))\",\n                    \"tear((uint256,uint256,address,address[]))\",\n                    \"getClaimableBulkRewards((uint256,uint256,address,address[]),address)\"\n                ],\n                \"is_impacted_by\": [\n                    \"constructor()\",\n                    \"notifyTransfer(address,address,uint256)\",\n                    \"accrueVault(uint256,address)\",\n                    \"accrueUser(uint256,address,address)\",\n                    \"claimRewards(uint256[],address[],address[],address[])\",\n                    \"claimRewardReferenceEmitting(uint256,address,address,address)\",\n                    \"claimRewardEmitting(uint256,address,address,address)\",\n                    \"claimReward(uint256,address,address,address)\",\n                    \"claimBulkTokensOverMultipleEpochs(uint256,uint256,address,address[],address)\",\n                    \"addBulkRewardsLinearly(uint256,uint256,address,address,uint256)\",\n                    \"addBulkRewards(uint256,uint256,address,address,uint256[])\",\n                    \"addReward(uint256,address,address,uint256)\",\n                    \"reap((uint256,uint256,address,address[]))\",\n                    \"tear((uint256,uint256,address,address[]))\"\n                ]\n            },\n            \"getClaimableBulkRewards((uint256,uint256,address,address[]),address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"constructor()\",\n                    \"notifyTransfer(address,address,uint256)\",\n                    \"accrueVault(uint256,address)\",\n                    \"accrueUser(uint256,address,address)\",\n                    \"claimRewards(uint256[],address[],address[],address[])\",\n                    \"claimRewardReferenceEmitting(uint256,address,address,address)\",\n                    \"claimRewardEmitting(uint256,address,address,address)\",\n                    \"claimReward(uint256,address,address,address)\",\n                    \"claimBulkTokensOverMultipleEpochs(uint256,uint256,address,address[],address)\",\n                    \"addBulkRewardsLinearly(uint256,uint256,address,address,uint256)\",\n                    \"addBulkRewards(uint256,uint256,address,address,uint256[])\",\n                    \"addReward(uint256,address,address,uint256)\",\n                    \"reap((uint256,uint256,address,address[]))\",\n                    \"tear((uint256,uint256,address,address[]))\"\n                ]\n            }\n        },\n        \"BeforeAfter\": {},\n        \"CryticTester\": {\n            \"rewardsManager_accrueUser_clamped(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\",\n                    \"constructor()\"\n                ]\n            },\n            \"rewardsManager_accrueVault_clamped(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\",\n                    \"constructor()\"\n                ]\n            },\n            \"rewardsManager_addReward_clamped(uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\",\n                    \"switch_asset(uint256)\",\n                    \"add_new_asset(uint8)\",\n                    \"constructor()\"\n                ]\n            },\n            \"rewardsManager_claimReward_clamped(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\",\n                    \"switch_asset(uint256)\",\n                    \"add_new_asset(uint8)\",\n                    \"constructor()\"\n                ]\n            },\n            \"rewardsManager_accrueUser(uint256,address,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\",\n                    \"constructor()\"\n                ]\n            },\n            \"rewardsManager_accrueVault(uint256,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\",\n                    \"constructor()\"\n                ]\n            },\n            \"rewardsManager_addBulkRewards(uint256,uint256,address,address,uint256[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\",\n                    \"constructor()\"\n                ]\n            },\n            \"rewardsManager_addBulkRewardsLinearly(uint256,uint256,address,address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\",\n                    \"constructor()\"\n                ]\n            },\n            \"rewardsManager_addReward(uint256,address,address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\",\n                    \"constructor()\"\n                ]\n            },\n            \"rewardsManager_claimBulkTokensOverMultipleEpochs(uint256,uint256,address,address[],address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\",\n                    \"constructor()\"\n                ]\n            },\n            \"rewardsManager_claimReward(uint256,address,address,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\",\n                    \"constructor()\"\n                ]\n            },\n            \"rewardsManager_claimRewardEmitting(uint256,address,address,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\",\n                    \"constructor()\"\n                ]\n            },\n            \"rewardsManager_claimRewardReferenceEmitting(uint256,address,address,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\",\n                    \"constructor()\"\n                ]\n            },\n            \"rewardsManager_claimRewards(uint256[],address[],address[],address[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\",\n                    \"constructor()\"\n                ]\n            },\n            \"rewardsManager_notifyTransfer(address,address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\",\n                    \"constructor()\"\n                ]\n            },\n            \"rewardsManager_reap((uint256,uint256,address,address[]))\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\",\n                    \"constructor()\"\n                ]\n            },\n            \"rewardsManager_tear((uint256,uint256,address,address[]))\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\",\n                    \"constructor()\"\n                ]\n            },\n            \"canary_totalSupply_atEpoch()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"constructor()\"\n                ]\n            },\n            \"solvency_totalSupply_atEpoch()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"constructor()\"\n                ]\n            },\n            \"switchActor(uint256)\": {\n                \"impacts\": [\n                    \"rewardsManager_accrueUser_clamped(uint256)\",\n                    \"rewardsManager_accrueVault_clamped(uint256)\",\n                    \"rewardsManager_addReward_clamped(uint256,uint256)\",\n                    \"rewardsManager_claimReward_clamped(uint256)\",\n                    \"rewardsManager_accrueUser(uint256,address,address)\",\n                    \"rewardsManager_accrueVault(uint256,address)\",\n                    \"rewardsManager_addBulkRewards(uint256,uint256,address,address,uint256[])\",\n                    \"rewardsManager_addBulkRewardsLinearly(uint256,uint256,address,address,uint256)\",\n                    \"rewardsManager_addReward(uint256,address,address,uint256)\",\n                    \"rewardsManager_claimBulkTokensOverMultipleEpochs(uint256,uint256,address,address[],address)\",\n                    \"rewardsManager_claimReward(uint256,address,address,address)\",\n                    \"rewardsManager_claimRewardEmitting(uint256,address,address,address)\",\n                    \"rewardsManager_claimRewardReferenceEmitting(uint256,address,address,address)\",\n                    \"rewardsManager_claimRewards(uint256[],address[],address[],address[])\",\n                    \"rewardsManager_notifyTransfer(address,address,uint256)\",\n                    \"rewardsManager_reap((uint256,uint256,address,address[]))\",\n                    \"rewardsManager_tear((uint256,uint256,address,address[]))\",\n                    \"asset_approve(address,uint128)\",\n                    \"claim_rewards_never_reverts()\"\n                ],\n                \"is_impacted_by\": []\n            },\n            \"switch_asset(uint256)\": {\n                \"impacts\": [\n                    \"rewardsManager_addReward_clamped(uint256,uint256)\",\n                    \"rewardsManager_claimReward_clamped(uint256)\",\n                    \"asset_approve(address,uint128)\",\n                    \"asset_mint(address,uint128)\",\n                    \"claim_rewards_never_reverts()\"\n                ],\n                \"is_impacted_by\": []\n            },\n            \"add_new_asset(uint8)\": {\n                \"impacts\": [\n                    \"rewardsManager_addReward_clamped(uint256,uint256)\",\n                    \"rewardsManager_claimReward_clamped(uint256)\",\n                    \"asset_approve(address,uint128)\",\n                    \"asset_mint(address,uint128)\",\n                    \"claim_rewards_never_reverts()\"\n                ],\n                \"is_impacted_by\": []\n            },\n            \"asset_approve(address,uint128)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\",\n                    \"switch_asset(uint256)\",\n                    \"add_new_asset(uint8)\",\n                    \"constructor()\"\n                ]\n            },\n            \"asset_mint(address,uint128)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switch_asset(uint256)\",\n                    \"add_new_asset(uint8)\",\n                    \"constructor()\"\n                ]\n            },\n            \"claim_rewards_never_reverts()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\",\n                    \"switch_asset(uint256)\",\n                    \"add_new_asset(uint8)\",\n                    \"constructor()\"\n                ]\n            },\n            \"constructor()\": {\n                \"impacts\": [\n                    \"rewardsManager_accrueUser_clamped(uint256)\",\n                    \"rewardsManager_accrueVault_clamped(uint256)\",\n                    \"rewardsManager_addReward_clamped(uint256,uint256)\",\n                    \"rewardsManager_claimReward_clamped(uint256)\",\n                    \"rewardsManager_accrueUser(uint256,address,address)\",\n                    \"rewardsManager_accrueVault(uint256,address)\",\n                    \"rewardsManager_addBulkRewards(uint256,uint256,address,address,uint256[])\",\n                    \"rewardsManager_addBulkRewardsLinearly(uint256,uint256,address,address,uint256)\",\n                    \"rewardsManager_addReward(uint256,address,address,uint256)\",\n                    \"rewardsManager_claimBulkTokensOverMultipleEpochs(uint256,uint256,address,address[],address)\",\n                    \"rewardsManager_claimReward(uint256,address,address,address)\",\n                    \"rewardsManager_claimRewardEmitting(uint256,address,address,address)\",\n                    \"rewardsManager_claimRewardReferenceEmitting(uint256,address,address,address)\",\n                    \"rewardsManager_claimRewards(uint256[],address[],address[],address[])\",\n                    \"rewardsManager_notifyTransfer(address,address,uint256)\",\n                    \"rewardsManager_reap((uint256,uint256,address,address[]))\",\n                    \"rewardsManager_tear((uint256,uint256,address,address[]))\",\n                    \"canary_totalSupply_atEpoch()\",\n                    \"solvency_totalSupply_atEpoch()\",\n                    \"asset_approve(address,uint128)\",\n                    \"asset_mint(address,uint128)\",\n                    \"claim_rewards_never_reverts()\"\n                ],\n                \"is_impacted_by\": []\n            }\n        },\n        \"CryticToFoundry\": {\n            \"excludeArtifacts()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"excludeContracts()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"excludeSenders()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetArtifacts()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetArtifactSelectors()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetContracts()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetSelectors()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetSenders()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetInterfaces()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"failed()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"rewardsManager_accrueUser_clamped(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\",\n                    \"setUp()\"\n                ]\n            },\n            \"rewardsManager_accrueVault_clamped(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\",\n                    \"setUp()\"\n                ]\n            },\n            \"rewardsManager_addReward_clamped(uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\",\n                    \"switch_asset(uint256)\",\n                    \"add_new_asset(uint8)\",\n                    \"setUp()\"\n                ]\n            },\n            \"rewardsManager_claimReward_clamped(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\",\n                    \"switch_asset(uint256)\",\n                    \"add_new_asset(uint8)\",\n                    \"setUp()\"\n                ]\n            },\n            \"rewardsManager_accrueUser(uint256,address,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\",\n                    \"setUp()\"\n                ]\n            },\n            \"rewardsManager_accrueVault(uint256,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\",\n                    \"setUp()\"\n                ]\n            },\n            \"rewardsManager_addBulkRewards(uint256,uint256,address,address,uint256[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\",\n                    \"setUp()\"\n                ]\n            },\n            \"rewardsManager_addBulkRewardsLinearly(uint256,uint256,address,address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\",\n                    \"setUp()\"\n                ]\n            },\n            \"rewardsManager_addReward(uint256,address,address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\",\n                    \"setUp()\"\n                ]\n            },\n            \"rewardsManager_claimBulkTokensOverMultipleEpochs(uint256,uint256,address,address[],address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\",\n                    \"setUp()\"\n                ]\n            },\n            \"rewardsManager_claimReward(uint256,address,address,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\",\n                    \"setUp()\"\n                ]\n            },\n            \"rewardsManager_claimRewardEmitting(uint256,address,address,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\",\n                    \"setUp()\"\n                ]\n            },\n            \"rewardsManager_claimRewardReferenceEmitting(uint256,address,address,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\",\n                    \"setUp()\"\n                ]\n            },\n            \"rewardsManager_claimRewards(uint256[],address[],address[],address[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\",\n                    \"setUp()\"\n                ]\n            },\n            \"rewardsManager_notifyTransfer(address,address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\",\n                    \"setUp()\"\n                ]\n            },\n            \"rewardsManager_reap((uint256,uint256,address,address[]))\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\",\n                    \"setUp()\"\n                ]\n            },\n            \"rewardsManager_tear((uint256,uint256,address,address[]))\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\",\n                    \"setUp()\"\n                ]\n            },\n            \"canary_totalSupply_atEpoch()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"solvency_totalSupply_atEpoch()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"switchActor(uint256)\": {\n                \"impacts\": [\n                    \"rewardsManager_accrueUser_clamped(uint256)\",\n                    \"rewardsManager_accrueVault_clamped(uint256)\",\n                    \"rewardsManager_addReward_clamped(uint256,uint256)\",\n                    \"rewardsManager_claimReward_clamped(uint256)\",\n                    \"rewardsManager_accrueUser(uint256,address,address)\",\n                    \"rewardsManager_accrueVault(uint256,address)\",\n                    \"rewardsManager_addBulkRewards(uint256,uint256,address,address,uint256[])\",\n                    \"rewardsManager_addBulkRewardsLinearly(uint256,uint256,address,address,uint256)\",\n                    \"rewardsManager_addReward(uint256,address,address,uint256)\",\n                    \"rewardsManager_claimBulkTokensOverMultipleEpochs(uint256,uint256,address,address[],address)\",\n                    \"rewardsManager_claimReward(uint256,address,address,address)\",\n                    \"rewardsManager_claimRewardEmitting(uint256,address,address,address)\",\n                    \"rewardsManager_claimRewardReferenceEmitting(uint256,address,address,address)\",\n                    \"rewardsManager_claimRewards(uint256[],address[],address[],address[])\",\n                    \"rewardsManager_notifyTransfer(address,address,uint256)\",\n                    \"rewardsManager_reap((uint256,uint256,address,address[]))\",\n                    \"rewardsManager_tear((uint256,uint256,address,address[]))\",\n                    \"asset_approve(address,uint128)\",\n                    \"claim_rewards_never_reverts()\",\n                    \"test_crytic()\",\n                    \"test_canary_totalSupply_atEpoch_lckx()\"\n                ],\n                \"is_impacted_by\": []\n            },\n            \"switch_asset(uint256)\": {\n                \"impacts\": [\n                    \"rewardsManager_addReward_clamped(uint256,uint256)\",\n                    \"rewardsManager_claimReward_clamped(uint256)\",\n                    \"asset_approve(address,uint128)\",\n                    \"asset_mint(address,uint128)\",\n                    \"claim_rewards_never_reverts()\",\n                    \"test_crytic()\",\n                    \"test_canary_totalSupply_atEpoch_lckx()\"\n                ],\n                \"is_impacted_by\": []\n            },\n            \"add_new_asset(uint8)\": {\n                \"impacts\": [\n                    \"rewardsManager_addReward_clamped(uint256,uint256)\",\n                    \"rewardsManager_claimReward_clamped(uint256)\",\n                    \"asset_approve(address,uint128)\",\n                    \"asset_mint(address,uint128)\",\n                    \"claim_rewards_never_reverts()\",\n                    \"test_crytic()\",\n                    \"test_canary_totalSupply_atEpoch_lckx()\"\n                ],\n                \"is_impacted_by\": []\n            },\n            \"asset_approve(address,uint128)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\",\n                    \"switch_asset(uint256)\",\n                    \"add_new_asset(uint8)\",\n                    \"setUp()\"\n                ]\n            },\n            \"asset_mint(address,uint128)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switch_asset(uint256)\",\n                    \"add_new_asset(uint8)\",\n                    \"setUp()\"\n                ]\n            },\n            \"claim_rewards_never_reverts()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\",\n                    \"switch_asset(uint256)\",\n                    \"add_new_asset(uint8)\",\n                    \"setUp()\"\n                ]\n            },\n            \"setUp()\": {\n                \"impacts\": [\n                    \"rewardsManager_accrueUser_clamped(uint256)\",\n                    \"rewardsManager_accrueVault_clamped(uint256)\",\n                    \"rewardsManager_addReward_clamped(uint256,uint256)\",\n                    \"rewardsManager_claimReward_clamped(uint256)\",\n                    \"rewardsManager_accrueUser(uint256,address,address)\",\n                    \"rewardsManager_accrueVault(uint256,address)\",\n                    \"rewardsManager_addBulkRewards(uint256,uint256,address,address,uint256[])\",\n                    \"rewardsManager_addBulkRewardsLinearly(uint256,uint256,address,address,uint256)\",\n                    \"rewardsManager_addReward(uint256,address,address,uint256)\",\n                    \"rewardsManager_claimBulkTokensOverMultipleEpochs(uint256,uint256,address,address[],address)\",\n                    \"rewardsManager_claimReward(uint256,address,address,address)\",\n                    \"rewardsManager_claimRewardEmitting(uint256,address,address,address)\",\n                    \"rewardsManager_claimRewardReferenceEmitting(uint256,address,address,address)\",\n                    \"rewardsManager_claimRewards(uint256[],address[],address[],address[])\",\n                    \"rewardsManager_notifyTransfer(address,address,uint256)\",\n                    \"rewardsManager_reap((uint256,uint256,address,address[]))\",\n                    \"rewardsManager_tear((uint256,uint256,address,address[]))\",\n                    \"canary_totalSupply_atEpoch()\",\n                    \"solvency_totalSupply_atEpoch()\",\n                    \"asset_approve(address,uint128)\",\n                    \"asset_mint(address,uint128)\",\n                    \"claim_rewards_never_reverts()\",\n                    \"test_crytic()\",\n                    \"test_canary_totalSupply_atEpoch_lckx()\"\n                ],\n                \"is_impacted_by\": []\n            },\n            \"test_crytic()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\",\n                    \"switch_asset(uint256)\",\n                    \"add_new_asset(uint8)\",\n                    \"setUp()\"\n                ]\n            },\n            \"test_canary_totalSupply_atEpoch_lckx()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\",\n                    \"switch_asset(uint256)\",\n                    \"add_new_asset(uint8)\",\n                    \"setUp()\"\n                ]\n            }\n        },\n        \"Properties\": {\n            \"canary_totalSupply_atEpoch()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"solvency_totalSupply_atEpoch()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            }\n        },\n        \"Setup\": {},\n        \"TargetFunctions\": {\n            \"rewardsManager_accrueUser_clamped(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\"\n                ]\n            },\n            \"rewardsManager_accrueVault_clamped(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\"\n                ]\n            },\n            \"rewardsManager_addReward_clamped(uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\",\n                    \"switch_asset(uint256)\",\n                    \"add_new_asset(uint8)\"\n                ]\n            },\n            \"rewardsManager_claimReward_clamped(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\",\n                    \"switch_asset(uint256)\",\n                    \"add_new_asset(uint8)\"\n                ]\n            },\n            \"rewardsManager_accrueUser(uint256,address,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\"\n                ]\n            },\n            \"rewardsManager_accrueVault(uint256,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\"\n                ]\n            },\n            \"rewardsManager_addBulkRewards(uint256,uint256,address,address,uint256[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\"\n                ]\n            },\n            \"rewardsManager_addBulkRewardsLinearly(uint256,uint256,address,address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\"\n                ]\n            },\n            \"rewardsManager_addReward(uint256,address,address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\"\n                ]\n            },\n            \"rewardsManager_claimBulkTokensOverMultipleEpochs(uint256,uint256,address,address[],address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\"\n                ]\n            },\n            \"rewardsManager_claimReward(uint256,address,address,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\"\n                ]\n            },\n            \"rewardsManager_claimRewardEmitting(uint256,address,address,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\"\n                ]\n            },\n            \"rewardsManager_claimRewardReferenceEmitting(uint256,address,address,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\"\n                ]\n            },\n            \"rewardsManager_claimRewards(uint256[],address[],address[],address[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\"\n                ]\n            },\n            \"rewardsManager_notifyTransfer(address,address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\"\n                ]\n            },\n            \"rewardsManager_reap((uint256,uint256,address,address[]))\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\"\n                ]\n            },\n            \"rewardsManager_tear((uint256,uint256,address,address[]))\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\"\n                ]\n            },\n            \"canary_totalSupply_atEpoch()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"solvency_totalSupply_atEpoch()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"switchActor(uint256)\": {\n                \"impacts\": [\n                    \"rewardsManager_accrueUser_clamped(uint256)\",\n                    \"rewardsManager_accrueVault_clamped(uint256)\",\n                    \"rewardsManager_addReward_clamped(uint256,uint256)\",\n                    \"rewardsManager_claimReward_clamped(uint256)\",\n                    \"rewardsManager_accrueUser(uint256,address,address)\",\n                    \"rewardsManager_accrueVault(uint256,address)\",\n                    \"rewardsManager_addBulkRewards(uint256,uint256,address,address,uint256[])\",\n                    \"rewardsManager_addBulkRewardsLinearly(uint256,uint256,address,address,uint256)\",\n                    \"rewardsManager_addReward(uint256,address,address,uint256)\",\n                    \"rewardsManager_claimBulkTokensOverMultipleEpochs(uint256,uint256,address,address[],address)\",\n                    \"rewardsManager_claimReward(uint256,address,address,address)\",\n                    \"rewardsManager_claimRewardEmitting(uint256,address,address,address)\",\n                    \"rewardsManager_claimRewardReferenceEmitting(uint256,address,address,address)\",\n                    \"rewardsManager_claimRewards(uint256[],address[],address[],address[])\",\n                    \"rewardsManager_notifyTransfer(address,address,uint256)\",\n                    \"rewardsManager_reap((uint256,uint256,address,address[]))\",\n                    \"rewardsManager_tear((uint256,uint256,address,address[]))\",\n                    \"asset_approve(address,uint128)\",\n                    \"claim_rewards_never_reverts()\"\n                ],\n                \"is_impacted_by\": []\n            },\n            \"switch_asset(uint256)\": {\n                \"impacts\": [\n                    \"rewardsManager_addReward_clamped(uint256,uint256)\",\n                    \"rewardsManager_claimReward_clamped(uint256)\",\n                    \"asset_approve(address,uint128)\",\n                    \"asset_mint(address,uint128)\",\n                    \"claim_rewards_never_reverts()\"\n                ],\n                \"is_impacted_by\": []\n            },\n            \"add_new_asset(uint8)\": {\n                \"impacts\": [\n                    \"rewardsManager_addReward_clamped(uint256,uint256)\",\n                    \"rewardsManager_claimReward_clamped(uint256)\",\n                    \"asset_approve(address,uint128)\",\n                    \"asset_mint(address,uint128)\",\n                    \"claim_rewards_never_reverts()\"\n                ],\n                \"is_impacted_by\": []\n            },\n            \"asset_approve(address,uint128)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\",\n                    \"switch_asset(uint256)\",\n                    \"add_new_asset(uint8)\"\n                ]\n            },\n            \"asset_mint(address,uint128)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switch_asset(uint256)\",\n                    \"add_new_asset(uint8)\"\n                ]\n            },\n            \"claim_rewards_never_reverts()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\",\n                    \"switch_asset(uint256)\",\n                    \"add_new_asset(uint8)\"\n                ]\n            }\n        },\n        \"AdminTargets\": {\n            \"canary_totalSupply_atEpoch()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"solvency_totalSupply_atEpoch()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            }\n        },\n        \"DoomsdayTargets\": {\n            \"canary_totalSupply_atEpoch()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"solvency_totalSupply_atEpoch()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"claim_rewards_never_reverts()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            }\n        },\n        \"ManagersTargets\": {\n            \"canary_totalSupply_atEpoch()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"solvency_totalSupply_atEpoch()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"switchActor(uint256)\": {\n                \"impacts\": [\n                    \"asset_approve(address,uint128)\"\n                ],\n                \"is_impacted_by\": []\n            },\n            \"switch_asset(uint256)\": {\n                \"impacts\": [\n                    \"asset_approve(address,uint128)\",\n                    \"asset_mint(address,uint128)\"\n                ],\n                \"is_impacted_by\": []\n            },\n            \"add_new_asset(uint8)\": {\n                \"impacts\": [\n                    \"asset_approve(address,uint128)\",\n                    \"asset_mint(address,uint128)\"\n                ],\n                \"is_impacted_by\": []\n            },\n            \"asset_approve(address,uint128)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\",\n                    \"switch_asset(uint256)\",\n                    \"add_new_asset(uint8)\"\n                ]\n            },\n            \"asset_mint(address,uint128)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switch_asset(uint256)\",\n                    \"add_new_asset(uint8)\"\n                ]\n            }\n        },\n        \"RewardsManagerTargets\": {\n            \"canary_totalSupply_atEpoch()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"solvency_totalSupply_atEpoch()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"rewardsManager_accrueUser_clamped(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"rewardsManager_accrueVault_clamped(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"rewardsManager_addReward_clamped(uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"rewardsManager_claimReward_clamped(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"rewardsManager_accrueUser(uint256,address,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"rewardsManager_accrueVault(uint256,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"rewardsManager_addBulkRewards(uint256,uint256,address,address,uint256[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"rewardsManager_addBulkRewardsLinearly(uint256,uint256,address,address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"rewardsManager_addReward(uint256,address,address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"rewardsManager_claimBulkTokensOverMultipleEpochs(uint256,uint256,address,address[],address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"rewardsManager_claimReward(uint256,address,address,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"rewardsManager_claimRewardEmitting(uint256,address,address,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"rewardsManager_claimRewardReferenceEmitting(uint256,address,address,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"rewardsManager_claimRewards(uint256[],address[],address[],address[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"rewardsManager_notifyTransfer(address,address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"rewardsManager_reap((uint256,uint256,address,address[]))\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"rewardsManager_tear((uint256,uint256,address,address[]))\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            }\n        }\n    },\n    \"constructors\": {\n        \"ReentrancyGuard\": \"constructor()\",\n        \"ActorManager\": \"constructor()\",\n        \"ERC20\": \"constructor(string,string,uint8)\",\n        \"MockERC20\": \"constructor(string,string,uint8)\",\n        \"RewardsManager\": \"constructor()\",\n        \"BeforeAfter\": \"constructor()\",\n        \"CryticTester\": \"constructor()\",\n        \"CryticToFoundry\": \"constructor()\",\n        \"Properties\": \"constructor()\",\n        \"Setup\": \"constructor()\",\n        \"TargetFunctions\": \"constructor()\",\n        \"AdminTargets\": \"constructor()\",\n        \"DoomsdayTargets\": \"constructor()\",\n        \"ManagersTargets\": \"constructor()\",\n        \"RewardsManagerTargets\": \"constructor()\"\n    },\n    \"have_external_calls\": {\n        \"FoundryAsserts\": [\n            \"failed()\"\n        ],\n        \"StdAssertions\": [\n            \"failed()\"\n        ],\n        \"Test\": [\n            \"failed()\"\n        ],\n        \"MockERC721\": [\n            \"safeTransferFrom(address,address,uint256,bytes)\",\n            \"safeTransferFrom(address,address,uint256)\"\n        ],\n        \"CounterScript\": [\n            \"run()\"\n        ],\n        \"RewardsManager\": [\n            \"claimBulkTokensOverMultipleEpochs(uint256,uint256,address,address[],address)\",\n            \"tear((uint256,uint256,address,address[]))\",\n            \"reap((uint256,uint256,address,address[]))\",\n            \"claimRewardReferenceEmitting(uint256,address,address,address)\",\n            \"claimRewardEmitting(uint256,address,address,address)\",\n            \"addBulkRewards(uint256,uint256,address,address,uint256[])\",\n            \"addBulkRewardsLinearly(uint256,uint256,address,address,uint256)\",\n            \"claimReward(uint256,address,address,address)\",\n            \"claimRewards(uint256[],address[],address[],address[])\",\n            \"addReward(uint256,address,address,uint256)\"\n        ],\n        \"CryticTester\": [\n            \"rewardsManager_accrueVault(uint256,address)\",\n            \"rewardsManager_reap((uint256,uint256,address,address[]))\",\n            \"solvency_totalSupply_atEpoch()\",\n            \"rewardsManager_claimReward_clamped(uint256)\",\n            \"rewardsManager_claimReward(uint256,address,address,address)\",\n            \"rewardsManager_tear((uint256,uint256,address,address[]))\",\n            \"rewardsManager_notifyTransfer(address,address,uint256)\",\n            \"asset_approve(address,uint128)\",\n            \"rewardsManager_claimRewardReferenceEmitting(uint256,address,address,address)\",\n            \"add_new_asset(uint8)\",\n            \"rewardsManager_accrueUser_clamped(uint256)\",\n            \"constructor()\",\n            \"rewardsManager_accrueUser(uint256,address,address)\",\n            \"claim_rewards_never_reverts()\",\n            \"rewardsManager_claimBulkTokensOverMultipleEpochs(uint256,uint256,address,address[],address)\",\n            \"rewardsManager_addReward_clamped(uint256,uint256)\",\n            \"rewardsManager_accrueVault_clamped(uint256)\",\n            \"asset_mint(address,uint128)\",\n            \"rewardsManager_addReward(uint256,address,address,uint256)\",\n            \"rewardsManager_claimRewards(uint256[],address[],address[],address[])\",\n            \"canary_totalSupply_atEpoch()\",\n            \"rewardsManager_addBulkRewardsLinearly(uint256,uint256,address,address,uint256)\",\n            \"rewardsManager_addBulkRewards(uint256,uint256,address,address,uint256[])\",\n            \"switch_asset(uint256)\",\n            \"switchActor(uint256)\",\n            \"rewardsManager_claimRewardEmitting(uint256,address,address,address)\"\n        ],\n        \"CryticToFoundry\": [\n            \"rewardsManager_accrueVault(uint256,address)\",\n            \"rewardsManager_reap((uint256,uint256,address,address[]))\",\n            \"solvency_totalSupply_atEpoch()\",\n            \"rewardsManager_claimReward_clamped(uint256)\",\n            \"rewardsManager_claimReward(uint256,address,address,address)\",\n            \"rewardsManager_tear((uint256,uint256,address,address[]))\",\n            \"rewardsManager_notifyTransfer(address,address,uint256)\",\n            \"asset_approve(address,uint128)\",\n            \"failed()\",\n            \"rewardsManager_claimRewardReferenceEmitting(uint256,address,address,address)\",\n            \"add_new_asset(uint8)\",\n            \"rewardsManager_accrueUser_clamped(uint256)\",\n            \"rewardsManager_accrueUser(uint256,address,address)\",\n            \"test_crytic()\",\n            \"claim_rewards_never_reverts()\",\n            \"rewardsManager_claimBulkTokensOverMultipleEpochs(uint256,uint256,address,address[],address)\",\n            \"rewardsManager_addReward_clamped(uint256,uint256)\",\n            \"test_canary_totalSupply_atEpoch_lckx()\",\n            \"rewardsManager_accrueVault_clamped(uint256)\",\n            \"asset_mint(address,uint128)\",\n            \"rewardsManager_addReward(uint256,address,address,uint256)\",\n            \"rewardsManager_claimRewards(uint256[],address[],address[],address[])\",\n            \"canary_totalSupply_atEpoch()\",\n            \"rewardsManager_addBulkRewardsLinearly(uint256,uint256,address,address,uint256)\",\n            \"rewardsManager_addBulkRewards(uint256,uint256,address,address,uint256[])\",\n            \"switch_asset(uint256)\",\n            \"setUp()\",\n            \"switchActor(uint256)\",\n            \"rewardsManager_claimRewardEmitting(uint256,address,address,address)\"\n        ],\n        \"Properties\": [\n            \"canary_totalSupply_atEpoch()\",\n            \"solvency_totalSupply_atEpoch()\"\n        ],\n        \"TargetFunctions\": [\n            \"rewardsManager_accrueVault(uint256,address)\",\n            \"rewardsManager_reap((uint256,uint256,address,address[]))\",\n            \"solvency_totalSupply_atEpoch()\",\n            \"rewardsManager_claimReward_clamped(uint256)\",\n            \"rewardsManager_claimReward(uint256,address,address,address)\",\n            \"rewardsManager_tear((uint256,uint256,address,address[]))\",\n            \"rewardsManager_notifyTransfer(address,address,uint256)\",\n            \"asset_approve(address,uint128)\",\n            \"rewardsManager_claimRewardReferenceEmitting(uint256,address,address,address)\",\n            \"add_new_asset(uint8)\",\n            \"rewardsManager_accrueUser_clamped(uint256)\",\n            \"rewardsManager_accrueUser(uint256,address,address)\",\n            \"claim_rewards_never_reverts()\",\n            \"rewardsManager_claimBulkTokensOverMultipleEpochs(uint256,uint256,address,address[],address)\",\n            \"rewardsManager_addReward_clamped(uint256,uint256)\",\n            \"rewardsManager_accrueVault_clamped(uint256)\",\n            \"asset_mint(address,uint128)\",\n            \"rewardsManager_addReward(uint256,address,address,uint256)\",\n            \"rewardsManager_claimRewards(uint256[],address[],address[],address[])\",\n            \"canary_totalSupply_atEpoch()\",\n            \"rewardsManager_addBulkRewardsLinearly(uint256,uint256,address,address,uint256)\",\n            \"rewardsManager_addBulkRewards(uint256,uint256,address,address,uint256[])\",\n            \"switch_asset(uint256)\",\n            \"switchActor(uint256)\",\n            \"rewardsManager_claimRewardEmitting(uint256,address,address,address)\"\n        ],\n        \"AdminTargets\": [\n            \"canary_totalSupply_atEpoch()\",\n            \"solvency_totalSupply_atEpoch()\"\n        ],\n        \"DoomsdayTargets\": [\n            \"canary_totalSupply_atEpoch()\",\n            \"solvency_totalSupply_atEpoch()\",\n            \"claim_rewards_never_reverts()\"\n        ],\n        \"ManagersTargets\": [\n            \"canary_totalSupply_atEpoch()\",\n            \"solvency_totalSupply_atEpoch()\",\n            \"switch_asset(uint256)\",\n            \"asset_approve(address,uint128)\",\n            \"switchActor(uint256)\",\n            \"asset_mint(address,uint128)\",\n            \"add_new_asset(uint8)\"\n        ],\n        \"RewardsManagerTargets\": [\n            \"solvency_totalSupply_atEpoch()\",\n            \"rewardsManager_accrueVault(uint256,address)\",\n            \"rewardsManager_reap((uint256,uint256,address,address[]))\",\n            \"rewardsManager_claimReward_clamped(uint256)\",\n            \"rewardsManager_claimReward(uint256,address,address,address)\",\n            \"rewardsManager_tear((uint256,uint256,address,address[]))\",\n            \"rewardsManager_notifyTransfer(address,address,uint256)\",\n            \"rewardsManager_claimRewardReferenceEmitting(uint256,address,address,address)\",\n            \"rewardsManager_accrueUser_clamped(uint256)\",\n            \"rewardsManager_accrueUser(uint256,address,address)\",\n            \"rewardsManager_claimBulkTokensOverMultipleEpochs(uint256,uint256,address,address[],address)\",\n            \"rewardsManager_addReward_clamped(uint256,uint256)\",\n            \"rewardsManager_accrueVault_clamped(uint256)\",\n            \"rewardsManager_addReward(uint256,address,address,uint256)\",\n            \"rewardsManager_claimRewards(uint256[],address[],address[],address[])\",\n            \"canary_totalSupply_atEpoch()\",\n            \"rewardsManager_addBulkRewardsLinearly(uint256,uint256,address,address,uint256)\",\n            \"rewardsManager_addBulkRewards(uint256,uint256,address,address,uint256[])\",\n            \"rewardsManager_claimRewardEmitting(uint256,address,address,address)\"\n        ]\n    },\n    \"use_balance\": {},\n    \"solc_versions\": [\n        \"0.8.24\"\n    ],\n    \"with_fallback\": [],\n    \"with_receive\": []\n}", "first_markdown_element": "", "id": "7cbda502cc20b83ab76b280e4168eff8b47a67c322adc9b39956c2f331834978", "printer": "echidna"}]}}
